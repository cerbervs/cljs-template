{"version":3,"sources":["rewrite_clj/node/forms.cljs"],"mappings":"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","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k35237","else__4442__auto__","G__35242","cljs.core/Keyword","children","cljs.core.get","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce","ret__4461__auto__","p__35243","vec__35244","k__4462__auto__","cljs.core.nth","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__35236","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","coll__4436__auto__","cljs.core/hash-unordered-coll","this35238","other35239","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__35272","cljs.core/keyword-identical?","expr__35273","cljs.core.assoc","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.forms/FormsNode","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__35240","extmap__4478__auto__","G__35277","cljs.core/record?","rewrite-clj.node.forms/->FormsNode","rewrite-clj.node.forms/map->FormsNode","_","es","rewrite-clj.node.protocols/sexprs","cljs.core/next","cljs.core.list_STAR_","cljs.core/first","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.forms/forms-node"],"sourcesContent":["(ns rewrite-clj.node.forms\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord FormsNode [children]\n  node/Node\n  (tag [_]\n    :forms)\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (let [es (node/sexprs children)]\n      (if (next es)\n        (list* 'do es)\n        (first es))))\n  (length [_]\n    (node/sum-lengths children))\n  (string [_]\n    (node/concat-strings children))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO: Macro fun !\n;(node/make-printable! FormsNode)\n\n;; ## Constructor\n\n(defn forms-node\n  \"Create top-level node wrapping multiple children\n   (equals an implicit `do` on the top-level).\"\n  [children]\n  (->FormsNode children))\n"]}