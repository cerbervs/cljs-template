{"version":3,"sources":["rewrite_clj/node/protocols.cljs"],"mappings":"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","names":["x__4487__auto__","m__4488__auto__","rewrite-clj.node.protocols/tag","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","rewrite-clj.node.protocols/printable-only?","rewrite-clj.node.protocols/sexpr","rewrite-clj.node.protocols/length","rewrite-clj.node.protocols/string","rewrite-clj.node.protocols/Node","_","goog.object/set","this","cljs.core/count","cljs.core.pr_str","rewrite-clj.node.protocols/sexprs","nodes","cljs.core.remove","cljs.core.map","rewrite-clj.node.protocols/sum-lengths","cljs.core.reduce","cljs.core/+","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj.node.protocols/inner?","rewrite-clj.node.protocols/children","rewrite-clj.node.protocols/replace-children","rewrite-clj.node.protocols/InnerNode","children","js/Error","rewrite-clj.node.protocols/child-sexprs","node","rewrite-clj.node.protocols/coerce","rewrite-clj.node.protocols/NodeCoerceable","rewrite-clj.node.protocols/assert-sexpr-count","c","cljs.core._EQ_","rewrite-clj.node.protocols/assert-single-sexpr"],"sourcesContent":["(ns rewrite-clj.node.protocols\n  (:require [clojure.string :as s]))\n\n\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure nodes.\"\n  (tag [_]\n    \"Keyword representing the type of the node.\")\n  (printable-only? [_]\n    \"Return true if the node cannot be converted to an s-expression\n     element.\")\n  (sexpr [_]\n    \"Convert node to s-expression.\")\n  (length [_]\n    \"Get number of characters for the string version of this node.\")\n  (string [_]\n    \"Convert node to printable string.\"))\n\n\n(extend-protocol Node\n  object\n  (tag [_] :unknown)\n  (printable-only? [_] false)\n  (sexpr [this] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexprs\n  \"Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms.\"\n  [nodes]\n  (->> nodes\n       (remove printable-only?)\n       (map sexpr)))\n\n(defn sum-lengths\n  \"Sum up lengths of the given nodes.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Convert nodes to strings and concatenate them.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure nodes.\"\n  (inner? [_]\n    \"Check whether the node can contain children.\")\n  (children [_]\n    \"Get child nodes.\")\n  (replace-children [_ children]\n    \"Replace the node's children.\"))\n\n(extend-protocol InnerNode\n  object\n  (inner? [_] false)\n  (children [_]\n    (throw (js/Error. \"UnsupportedOperationException\")))\n  (replace-children [_ _]\n    (throw (js/Error. \"UnsupportedOperationException\"))))\n\n(defn child-sexprs\n  \"Get all child s-expressions for the given node.\"\n  [node]\n  (if (inner? node)\n    (sexprs (children node))))\n\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [_]))\n\n\n;; TODO: Need to handle format !!!!\n;; (defn- node->string\n;;   [node]\n;;   (let [n (str (if (printable-only? node)\n;;                  (pr-str (string node))\n;;                  (string node)))\n;;         n' (if (re-find #\"\\n\" n)\n;;              (->> (s/replace n #\"\\r?\\n\" \"\\n  \")\n;;                   (format \"%n  %s%n\"))\n;;              (str \" \" n))]\n;;     (format \"<%s:%s>\" (name (tag node)) n')))\n\n\n;; (defn write-node\n;;   [writer node]\n;;   (str writer (node->string node)))\n\n\n;; ## Helpers\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n    (= (count (remove printable-only? nodes)) c)\n   (str \"can only contain\" c \" non-whitespace form(s).\")))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n"]}