["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.whitespace');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.node.protocols');\n/**\n * This function is applied to every newline string.\n */\nrewrite_clj.node.whitespace._STAR_newline_fn_STAR_ = cljs.core.identity;\n/**\n * This function is applied to every newline string and should produce\n * the eventual character count.\n */\nrewrite_clj.node.whitespace._STAR_count_fn_STAR_ = cljs.core.count;\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.whitespace.WhitespaceNode = (function (whitespace,__meta,__extmap,__hash){\nthis.whitespace = whitespace;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.toString = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn this$.rewrite_clj$node$protocols$Node$string$arity$1(null);\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4385__auto__,k__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nreturn this__4385__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4386__auto__,null);\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4387__auto__,k29495,else__4388__auto__){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar G__29509 = k29495;\nvar G__29509__$1 = (((G__29509 instanceof cljs.core.Keyword))?G__29509.fqn:null);\nswitch (G__29509__$1) {\ncase \"whitespace\":\nreturn self__.whitespace;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k29495,else__4388__auto__);\n\n}\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4404__auto__,f__4405__auto__,init__4406__auto__){\nvar self__ = this;\nvar this__4404__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (this__4404__auto____$1){\nreturn (function (ret__4407__auto__,p__29510){\nvar vec__29511 = p__29510;\nvar k__4408__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29511,(0),null);\nvar v__4409__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29511,(1),null);\nreturn (f__4405__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4405__auto__.cljs$core$IFn$_invoke$arity$3(ret__4407__auto__,k__4408__auto__,v__4409__auto__) : f__4405__auto__.call(null,ret__4407__auto__,k__4408__auto__,v__4409__auto__));\n});})(this__4404__auto____$1))\n,init__4406__auto__,this__4404__auto____$1);\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4399__auto__,writer__4400__auto__,opts__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nvar pr_pair__4402__auto__ = ((function (this__4399__auto____$1){\nreturn (function (keyval__4403__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4401__auto__,keyval__4403__auto__);\n});})(this__4399__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,pr_pair__4402__auto__,\"#rewrite-clj.node.whitespace.WhitespaceNode{\",\", \",\"}\",opts__4401__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),self__.whitespace],null))], null),self__.__extmap));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__29494){\nvar self__ = this;\nvar G__29494__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__29494__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4383__auto__){\nvar self__ = this;\nvar this__4383__auto____$1 = this;\nreturn self__.__meta;\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4380__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4389__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4381__auto__){\nvar self__ = this;\nvar this__4381__auto____$1 = this;\nvar h__4243__auto__ = self__.__hash;\nif((!((h__4243__auto__ == null)))){\nreturn h__4243__auto__;\n} else {\nvar h__4243__auto____$1 = (function (){var fexpr__29516 = ((function (h__4243__auto__,this__4381__auto____$1){\nreturn (function (coll__4382__auto__){\nreturn (1595850179 ^ cljs.core.hash_unordered_coll(coll__4382__auto__));\n});})(h__4243__auto__,this__4381__auto____$1))\n;\nreturn fexpr__29516(this__4381__auto____$1);\n})();\nself__.__hash = h__4243__auto____$1;\n\nreturn h__4243__auto____$1;\n}\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this29496,other29497){\nvar self__ = this;\nvar this29496__$1 = this;\nreturn (((!((other29497 == null)))) && ((this29496__$1.constructor === other29497.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this29496__$1.whitespace,other29497.whitespace)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this29496__$1.__extmap,other29497.__extmap)));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL;\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483);\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn true;\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$sexpr$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nthrow (new Error(\"Unsupported operation\"));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn cljs.core.count(self__.whitespace);\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn self__.whitespace;\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4394__auto__,k__4395__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),null], null), null),k__4395__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4394__auto____$1),self__.__meta),k__4395__auto__);\n} else {\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4395__auto__)),null));\n}\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4392__auto__,k__4393__auto__,G__29494){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nvar pred__29529 = cljs.core.keyword_identical_QMARK_;\nvar expr__29530 = k__4393__auto__;\nif(cljs.core.truth_((function (){var G__29532 = new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483);\nvar G__29533 = expr__29530;\nreturn (pred__29529.cljs$core$IFn$_invoke$arity$2 ? pred__29529.cljs$core$IFn$_invoke$arity$2(G__29532,G__29533) : pred__29529.call(null,G__29532,G__29533));\n})())){\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(G__29494,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4393__auto__,G__29494),null));\n}\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4397__auto__){\nvar self__ = this;\nvar this__4397__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),self__.whitespace,null))], null),self__.__extmap));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4384__auto__,G__29494){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,G__29494,self__.__extmap,self__.__hash));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4390__auto__,entry__4391__auto__){\nvar self__ = this;\nvar this__4390__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4391__auto__)){\nreturn this__4390__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4390__auto____$1,entry__4391__auto__);\n}\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"whitespace\",\"whitespace\",300496044,null)], null);\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$type = true;\n\nrewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$ctorPrSeq = (function (this__4428__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.whitespace/WhitespaceNode\",null,(1),null));\n});\n\nrewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__){\nreturn cljs.core._write(writer__4429__auto__,\"rewrite-clj.node.whitespace/WhitespaceNode\");\n});\n\n/**\n * Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode.\n */\nrewrite_clj.node.whitespace.__GT_WhitespaceNode = (function rewrite_clj$node$whitespace$__GT_WhitespaceNode(whitespace){\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(whitespace,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.whitespace.map__GT_WhitespaceNode = (function rewrite_clj$node$whitespace$map__GT_WhitespaceNode(G__29499){\nvar extmap__4424__auto__ = (function (){var G__29548 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__29499,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483));\nif(cljs.core.record_QMARK_(G__29499)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__29548);\n} else {\nreturn G__29548;\n}\n})();\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483).cljs$core$IFn$_invoke$arity$1(G__29499),null,cljs.core.not_empty(extmap__4424__auto__),null));\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.whitespace.NewlineNode = (function (newlines,__meta,__extmap,__hash){\nthis.newlines = newlines;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nrewrite_clj.node.whitespace.NewlineNode.prototype.toString = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn this$.rewrite_clj$node$protocols$Node$string$arity$1(null);\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4385__auto__,k__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nreturn this__4385__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4386__auto__,null);\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4387__auto__,k29554,else__4388__auto__){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar G__29566 = k29554;\nvar G__29566__$1 = (((G__29566 instanceof cljs.core.Keyword))?G__29566.fqn:null);\nswitch (G__29566__$1) {\ncase \"newlines\":\nreturn self__.newlines;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k29554,else__4388__auto__);\n\n}\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4404__auto__,f__4405__auto__,init__4406__auto__){\nvar self__ = this;\nvar this__4404__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (this__4404__auto____$1){\nreturn (function (ret__4407__auto__,p__29598){\nvar vec__29605 = p__29598;\nvar k__4408__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29605,(0),null);\nvar v__4409__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29605,(1),null);\nreturn (f__4405__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4405__auto__.cljs$core$IFn$_invoke$arity$3(ret__4407__auto__,k__4408__auto__,v__4409__auto__) : f__4405__auto__.call(null,ret__4407__auto__,k__4408__auto__,v__4409__auto__));\n});})(this__4404__auto____$1))\n,init__4406__auto__,this__4404__auto____$1);\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4399__auto__,writer__4400__auto__,opts__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nvar pr_pair__4402__auto__ = ((function (this__4399__auto____$1){\nreturn (function (keyval__4403__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4401__auto__,keyval__4403__auto__);\n});})(this__4399__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,pr_pair__4402__auto__,\"#rewrite-clj.node.whitespace.NewlineNode{\",\", \",\"}\",opts__4401__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),self__.newlines],null))], null),self__.__extmap));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__29553){\nvar self__ = this;\nvar G__29553__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__29553__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4383__auto__){\nvar self__ = this;\nvar this__4383__auto____$1 = this;\nreturn self__.__meta;\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4380__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4389__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4381__auto__){\nvar self__ = this;\nvar this__4381__auto____$1 = this;\nvar h__4243__auto__ = self__.__hash;\nif((!((h__4243__auto__ == null)))){\nreturn h__4243__auto__;\n} else {\nvar h__4243__auto____$1 = (function (){var fexpr__29625 = ((function (h__4243__auto__,this__4381__auto____$1){\nreturn (function (coll__4382__auto__){\nreturn (979711303 ^ cljs.core.hash_unordered_coll(coll__4382__auto__));\n});})(h__4243__auto__,this__4381__auto____$1))\n;\nreturn fexpr__29625(this__4381__auto____$1);\n})();\nself__.__hash = h__4243__auto____$1;\n\nreturn h__4243__auto____$1;\n}\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this29556,other29557){\nvar self__ = this;\nvar this29556__$1 = this;\nreturn (((!((other29557 == null)))) && ((this29556__$1.constructor === other29557.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this29556__$1.newlines,other29557.newlines)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this29556__$1.__extmap,other29557.__extmap)));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL;\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323);\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn true;\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$sexpr$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nthrow (new Error(\"Unsupported operation\"));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn (rewrite_clj.node.whitespace._STAR_count_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.whitespace._STAR_count_fn_STAR_.cljs$core$IFn$_invoke$arity$1(self__.newlines) : rewrite_clj.node.whitespace._STAR_count_fn_STAR_.call(null,self__.newlines));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn (rewrite_clj.node.whitespace._STAR_newline_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.whitespace._STAR_newline_fn_STAR_.cljs$core$IFn$_invoke$arity$1(self__.newlines) : rewrite_clj.node.whitespace._STAR_newline_fn_STAR_.call(null,self__.newlines));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4394__auto__,k__4395__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),null], null), null),k__4395__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4394__auto____$1),self__.__meta),k__4395__auto__);\n} else {\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4395__auto__)),null));\n}\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4392__auto__,k__4393__auto__,G__29553){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nvar pred__29637 = cljs.core.keyword_identical_QMARK_;\nvar expr__29638 = k__4393__auto__;\nif(cljs.core.truth_((function (){var G__29641 = new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518);\nvar G__29642 = expr__29638;\nreturn (pred__29637.cljs$core$IFn$_invoke$arity$2 ? pred__29637.cljs$core$IFn$_invoke$arity$2(G__29641,G__29642) : pred__29637.call(null,G__29641,G__29642));\n})())){\nreturn (new rewrite_clj.node.whitespace.NewlineNode(G__29553,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4393__auto__,G__29553),null));\n}\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4397__auto__){\nvar self__ = this;\nvar this__4397__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),self__.newlines,null))], null),self__.__extmap));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4384__auto__,G__29553){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,G__29553,self__.__extmap,self__.__hash));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4390__auto__,entry__4391__auto__){\nvar self__ = this;\nvar this__4390__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4391__auto__)){\nreturn this__4390__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4390__auto____$1,entry__4391__auto__);\n}\n});\n\nrewrite_clj.node.whitespace.NewlineNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"newlines\",\"newlines\",455080009,null)], null);\n});\n\nrewrite_clj.node.whitespace.NewlineNode.cljs$lang$type = true;\n\nrewrite_clj.node.whitespace.NewlineNode.cljs$lang$ctorPrSeq = (function (this__4428__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.whitespace/NewlineNode\",null,(1),null));\n});\n\nrewrite_clj.node.whitespace.NewlineNode.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__){\nreturn cljs.core._write(writer__4429__auto__,\"rewrite-clj.node.whitespace/NewlineNode\");\n});\n\n/**\n * Positional factory function for rewrite-clj.node.whitespace/NewlineNode.\n */\nrewrite_clj.node.whitespace.__GT_NewlineNode = (function rewrite_clj$node$whitespace$__GT_NewlineNode(newlines){\nreturn (new rewrite_clj.node.whitespace.NewlineNode(newlines,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.whitespace.map__GT_NewlineNode = (function rewrite_clj$node$whitespace$map__GT_NewlineNode(G__29558){\nvar extmap__4424__auto__ = (function (){var G__29661 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__29558,new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518));\nif(cljs.core.record_QMARK_(G__29558)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__29661);\n} else {\nreturn G__29661;\n}\n})();\nreturn (new rewrite_clj.node.whitespace.NewlineNode(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518).cljs$core$IFn$_invoke$arity$1(G__29558),null,cljs.core.not_empty(extmap__4424__auto__),null));\n});\n\n/**\n * Create whitespace node.\n */\nrewrite_clj.node.whitespace.whitespace_node = (function rewrite_clj$node$whitespace$whitespace_node(s){\nreturn rewrite_clj.node.whitespace.__GT_WhitespaceNode(s);\n});\n/**\n * Create newline node.\n */\nrewrite_clj.node.whitespace.newline_node = (function rewrite_clj$node$whitespace$newline_node(s){\nreturn rewrite_clj.node.whitespace.__GT_NewlineNode(s);\n});\n/**\n * Check whether a character represents a linebreak.\n */\nrewrite_clj.node.whitespace.newline_QMARK_ = (function rewrite_clj$node$whitespace$newline_QMARK_(c){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\"\\n\",null,\"\\r\",null], null), null),c);\n});\n/**\n * Convert a string of whitespace to whitespace/newline nodes.\n */\nrewrite_clj.node.whitespace.whitespace_nodes = (function rewrite_clj$node$whitespace$whitespace_nodes(s){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (char_seq){\nvar s__$1 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,char_seq);\nif(rewrite_clj.node.whitespace.newline_QMARK_(cljs.core.first(char_seq))){\nreturn rewrite_clj.node.whitespace.newline_node(s__$1);\n} else {\nreturn rewrite_clj.node.whitespace.whitespace_node(s__$1);\n}\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace.newline_QMARK_,s));\n});\n/**\n * Create node representing the given number of spaces.\n */\nrewrite_clj.node.whitespace.spaces = (function rewrite_clj$node$whitespace$spaces(n){\nreturn rewrite_clj.node.whitespace.whitespace_node(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\" \")));\n});\n/**\n * Create node representing the given number of newline characters.\n */\nrewrite_clj.node.whitespace.newlines = (function rewrite_clj$node$whitespace$newlines(n){\nreturn rewrite_clj.node.whitespace.newline_node(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\"\\n\")));\n});\nvar comma_29821 = rewrite_clj.node.whitespace.whitespace_node(\", \");\n/**\n * Interleave the given seq of nodes with `\", \"` nodes.\n */\nrewrite_clj.node.whitespace.comma_separated = ((function (comma_29821){\nreturn (function rewrite_clj$node$whitespace$comma_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(comma_29821)));\n});})(comma_29821))\n;\nvar nl_29829 = rewrite_clj.node.whitespace.newline_node(\"\\n\");\n/**\n * Interleave the given seq of nodes with newline nodes.\n */\nrewrite_clj.node.whitespace.line_separated = ((function (nl_29829){\nreturn (function rewrite_clj$node$whitespace$line_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(nl_29829)));\n});})(nl_29829))\n;\nvar space_29834 = rewrite_clj.node.whitespace.whitespace_node(\" \");\n/**\n * Interleave the given seq of nodes with `\" \"` nodes.\n */\nrewrite_clj.node.whitespace.space_separated = ((function (space_29834){\nreturn (function rewrite_clj$node$whitespace$space_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(space_29834)));\n});})(space_29834))\n;\n/**\n * Check whether a node represents whitespace.\n */\nrewrite_clj.node.whitespace.whitespace_QMARK_ = (function rewrite_clj$node$whitespace$whitespace_QMARK_(node){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),null,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),null], null), null),rewrite_clj.node.protocols.tag(node));\n});\n/**\n * Check whether a ndoe represents linebreaks.\n */\nrewrite_clj.node.whitespace.linebreak_QMARK_ = (function rewrite_clj$node$whitespace$linebreak_QMARK_(node){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.tag(node),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/whitespace.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",32],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.whitespace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node.protocols","^I","~$node","^I","~$cljs.core","^K","~$goog","^L"],"~:seen",["^B",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^K","^K"],"~:form",["~#list",["~$ns","^D",["^R",["^N",["^I","~:as","^J"]]]]],"~:flags",["^ ","^N",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^L","^K","^I"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/whitespace.cljs"],"~:compiled-at",1587374059208,"~:resource-name","rewrite_clj/node/whitespace.cljs","~:warnings",[],"~:source","(ns rewrite-clj.node.whitespace\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Newline Modifiers\n\n(def ^:dynamic *newline-fn*\n  \"This function is applied to every newline string.\"\n  identity)\n\n(def ^:dynamic *count-fn*\n  \"This function is applied to every newline string and should produce\n   the eventual character count.\"\n  count)\n\n\n;; TODO\n;; (defmacro with-newline-fn\n;;   [f & body]\n;;   `(binding [*newline-fn* (comp *newline-fn* ~f)]\n;;      ~@body))\n\n;; (defmacro with-count-fn\n;;   [f & body]\n;;   `(binding [*count-fn* (comp *count-fn* ~f)]\n;;      ~@body))\n\n;; ## Nodes\n\n(defrecord WhitespaceNode [whitespace]\n  node/Node\n  (tag [_] :whitespace)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (count whitespace))\n  (string [_] whitespace)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord NewlineNode [newlines]\n  node/Node\n  (tag [_] :newline)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (*count-fn* newlines))\n  (string [_] (*newline-fn* newlines))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n;; TODO\n;; (node/make-printable! WhitespaceNode)\n;; (node/make-printable! NewlineNode)\n\n;; ## Constructors\n\n(defn whitespace-node\n  \"Create whitespace node.\"\n  [s]\n  (->WhitespaceNode s))\n\n(defn newline-node\n  \"Create newline node.\"\n  [s]\n  (->NewlineNode s))\n\n(defn- newline?\n  \"Check whether a character represents a linebreak.\"\n  [c]\n  (contains? #{\\return \\newline} c))\n\n(defn whitespace-nodes\n  \"Convert a string of whitespace to whitespace/newline nodes.\"\n  [s]\n  (->> (partition-by newline? s)\n       (map\n         (fn [char-seq]\n           (let [s (apply str char-seq)]\n             (if (newline? (first char-seq))\n               (newline-node s)\n               (whitespace-node s)))))))\n\n;; ## Utilities\n\n(defn spaces\n  \"Create node representing the given number of spaces.\"\n  [n]\n  (whitespace-node (apply str (repeat n \\space))))\n\n(defn newlines\n  \"Create node representing the given number of newline characters.\"\n  [n]\n  (newline-node (apply str (repeat n \\newline))))\n\n\n\n(let [comma (whitespace-node \", \")]\n  (defn comma-separated\n    \"Interleave the given seq of nodes with `\\\", \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat comma)))))\n\n(let [nl (newline-node \"\\n\")]\n  (defn line-separated\n    \"Interleave the given seq of nodes with newline nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat nl)))))\n\n(let [space (whitespace-node \" \")]\n  (defn space-separated\n    \"Interleave the given seq of nodes with `\\\" \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat space)))))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Check whether a node represents whitespace.\"\n  [node]\n  (contains?\n    #{:whitespace\n      :newline}\n    (node/tag node)))\n\n(defn linebreak?\n  \"Check whether a ndoe represents linebreaks.\"\n  [node]\n  (= (node/tag node) :newline))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.node.whitespace/*newline-fn*","cljs.core/identity","rewrite-clj.node.whitespace/*count-fn*","cljs.core/count","this__4385__auto__","k__4386__auto__","this__4387__auto__","k29495","else__4388__auto__","G__29509","cljs.core/Keyword","whitespace","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__29510","vec__29511","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__29494","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","this__4381__auto__","h__4243__auto__","fexpr__29516","coll__4382__auto__","cljs.core/hash-unordered-coll","this29496","other29497","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__29529","cljs.core/keyword-identical?","expr__29530","G__29532","G__29533","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.whitespace/WhitespaceNode","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__29499","extmap__4424__auto__","G__29548","cljs.core/record?","rewrite-clj.node.whitespace/->WhitespaceNode","rewrite-clj.node.whitespace/map->WhitespaceNode","_","js/Error","this","k29554","G__29566","newlines","p__29598","vec__29605","G__29553","fexpr__29625","this29556","other29557","pred__29637","expr__29638","G__29641","G__29642","rewrite-clj.node.whitespace/NewlineNode","G__29558","G__29661","rewrite-clj.node.whitespace/->NewlineNode","rewrite-clj.node.whitespace/map->NewlineNode","rewrite-clj.node.whitespace/whitespace-node","s","rewrite-clj.node.whitespace/newline-node","rewrite-clj.node.whitespace/newline?","c","rewrite-clj.node.whitespace/whitespace-nodes","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","char-seq","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/first","rewrite-clj.node.whitespace/spaces","n","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.whitespace/newlines","comma","rewrite-clj.node.whitespace/comma-separated","nodes","cljs.core/butlast","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","nl","rewrite-clj.node.whitespace/line-separated","space","rewrite-clj.node.whitespace/space-separated","rewrite-clj.node.whitespace/whitespace?","node","rewrite-clj.node.protocols/tag","rewrite-clj.node.whitespace/linebreak?"]]],"~:cache-keys",["~#cmap",[["~:macro","^K"],[1587365553000],["^Y","goog/math/math.js"],[1584607223013,"^L","~$goog.array","~$goog.asserts"],["^Y","goog/array/array.js"],[1584607223013,"^L","^1<"],["^Y","goog/debug/error.js"],[1584607223013,"^L"],["^Y","goog/dom/nodetype.js"],[1584607223013,"^L"],["^Y","goog/object/object.js"],[1584607223013,"^L"],"~:SHADOW-TIMESTAMP",[1587365557000,1587365553000],["^Y","goog/math/long.js"],[1584607223013,"^L","^1<","~$goog.reflect"],["^Y","goog/functions/functions.js"],[1584607223013,"^L"],["^Y","goog/structs/map.js"],[1584607223013,"^L","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^Y","goog/asserts/asserts.js"],[1584607223013,"^L","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^Y","goog/uri/uri.js"],[1584607223013,"^L","^1;","^1<","^1D","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^Y","rewrite_clj/node/protocols.cljs"],[1587365556840,"^L","^K","~$clojure.string"],["^Y","goog/base.js"],[1584607223013],["^Y","goog/structs/structs.js"],[1584607223013,"^L","^1;","^1A"],["^Y","rewrite_clj/node/whitespace.cljs"],[1587365556840,"^L","^K","^I"],["^Y","clojure/string.cljs"],[1587365553008,"^L","^K","^1D","~$goog.string.StringBuffer"],["^Y","goog/string/string.js"],[1584607223013,"^L"],["^Y","goog/reflect/reflect.js"],[1584607223013,"^L"],["^Y","goog/string/stringbuffer.js"],[1584607223013,"^L"],["^Y","goog/iter/iter.js"],[1584607223013,"^L","^1;","^1<","~$goog.functions","~$goog.math"],["^Y","cljs/core.cljs"],[1587365553008,"~$goog.math.Long","~$goog.math.Integer","^1D","^1A","^1;","~$goog.Uri","^1K"],["^Y","goog/math/integer.js"],[1584607223013,"^L"],["^Y","goog/uri/utils.js"],[1584607223013,"^L","^1;","^1<","^1D"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",1,"^8",5,"^9",1,"^:",32],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^I","^K","^K","^L","^L"],"^M",["^B",["^N"]],"~:shadow/js-access-global",["^B",["Error"]],"^O",null,"~:defs",["^ ","~$->NewlineNode",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",41,"^8",12,"^9",41,"^:",23,"~:internal-ctor",true,"~:factory","~:positional","~:arglists",["^R",["~$quote",["^R",[["~$newlines"]]]]],"~:doc","Positional factory function for rewrite-clj.node.whitespace/NewlineNode."],"^C","~$rewrite-clj.node.whitespace/->NewlineNode","^6","rewrite_clj/node/whitespace.cljs","^:",23,"~:method-params",["^R",[["^1["]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^8",1,"^1V",true,"~:variadic?",false,"^1W","^1X","^7",41,"~:ret-tag","~$rewrite-clj.node.whitespace/NewlineNode","^9",41,"~:max-fixed-arity",1,"~:fn-var",true,"^1Y",["^R",["^1Z",["^R",[["^1["]]]]],"^20","Positional factory function for rewrite-clj.node.whitespace/NewlineNode."],"~$WhitespaceNode",["^ ","~:num-fields",1,"~:protocols",["^B",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^C","~$rewrite-clj.node.whitespace/WhitespaceNode","^6","rewrite_clj/node/whitespace.cljs","^:",26,"~:type",true,"^8",12,"^1V",true,"^7",29,"~:record",true,"^9",29,"~:tag","~$function","~:skip-protocol-flag",["^B",["^2=","^2>","^2?","^2@","^2A","^2C","^2D","^2E","^2F","^2G","^2H","^2J","^2K","^2L","^2M"]]],"~$whitespace?",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",120,"^8",7,"^9",120,"^:",18,"^1Y",["^R",["^1Z",["^R",[["^J"]]]]],"^20","Check whether a node represents whitespace."],"^C","~$rewrite-clj.node.whitespace/whitespace?","^6","rewrite_clj/node/whitespace.cljs","^:",18,"^22",["^R",[["^J"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^25",false,"^7",120,"^26","~$boolean","^9",120,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["^J"]]]]],"^20","Check whether a node represents whitespace."],"~$whitespace-node",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",60,"^8",7,"^9",60,"^:",22,"^1Y",["^R",["^1Z",["^R",[["~$s"]]]]],"^20","Create whitespace node."],"^C","~$rewrite-clj.node.whitespace/whitespace-node","^6","rewrite_clj/node/whitespace.cljs","^:",22,"^22",["^R",[["~$s"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^25",false,"^7",60,"^26","^2N","^9",60,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["~$s"]]]]],"^20","Create whitespace node."],"~$space-separated",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",113,"^8",9,"^9",113,"^:",24,"^1Y",["^R",["^1Z",["^R",[["~$nodes"]]]]],"^20","Interleave the given seq of nodes with `\" \"` nodes."],"^C","~$rewrite-clj.node.whitespace/space-separated","^6","rewrite_clj/node/whitespace.cljs","^:",24,"^22",["^R",[["^2Z"]]],"^23",null,"^24",["^R",[null,null]],"^8",3,"^25",false,"^7",113,"^26","~$seq","^9",113,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["^2Z"]]]]],"^20","Interleave the given seq of nodes with `\" \"` nodes."],"~$linebreak?",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",128,"^8",7,"^9",128,"^:",17,"^1Y",["^R",["^1Z",["^R",[["^J"]]]]],"^20","Check whether a ndoe represents linebreaks."],"^C","~$rewrite-clj.node.whitespace/linebreak?","^6","rewrite_clj/node/whitespace.cljs","^:",17,"^22",["^R",[["^J"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^25",false,"^7",128,"^26","^2V","^9",128,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["^J"]]]]],"^20","Check whether a ndoe represents linebreaks."],"~$*count-fn*",["^ ","^C","~$rewrite-clj.node.whitespace/*count-fn*","^6","rewrite_clj/node/whitespace.cljs","^7",10,"^8",1,"^9",10,"^:",26,"~:dynamic",true,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",10,"^8",16,"^9",10,"^:",26,"^35",true],"^20","This function is applied to every newline string and should produce\n   the eventual character count."],"~$comma-separated",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",101,"^8",9,"^9",101,"^:",24,"^1Y",["^R",["^1Z",["^R",[["^2Z"]]]]],"^20","Interleave the given seq of nodes with `\", \"` nodes."],"^C","~$rewrite-clj.node.whitespace/comma-separated","^6","rewrite_clj/node/whitespace.cljs","^:",24,"^22",["^R",[["^2Z"]]],"^23",null,"^24",["^R",[null,null]],"^8",3,"^25",false,"^7",101,"^26","^30","^9",101,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["^2Z"]]]]],"^20","Interleave the given seq of nodes with `\", \"` nodes."],"~$map->WhitespaceNode",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",29,"^8",12,"^9",29,"^:",26,"^1V",true,"^1W","~:map","^1Y",["^R",["^1Z",["^R",[["~$G__29499"]]]]],"^20","Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values."],"^C","~$rewrite-clj.node.whitespace/map->WhitespaceNode","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^22",["^R",[["^3:"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^1V",true,"^25",false,"^1W","^39","^7",29,"^26","^2N","^9",29,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["^3:"]]]]],"^20","Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values."],"^1[",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",93,"^8",7,"^9",93,"^:",15,"^1Y",["^R",["^1Z",["^R",[["~$n"]]]]],"^20","Create node representing the given number of newline characters."],"^C","~$rewrite-clj.node.whitespace/newlines","^6","rewrite_clj/node/whitespace.cljs","^:",15,"^22",["^R",[["~$n"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^25",false,"^7",93,"^26","^27","^9",93,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["~$n"]]]]],"^20","Create node representing the given number of newline characters."],"~$whitespace-nodes",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",75,"^8",7,"^9",75,"^:",23,"^1Y",["^R",["^1Z",["^R",[["~$s"]]]]],"^20","Convert a string of whitespace to whitespace/newline nodes."],"^C","~$rewrite-clj.node.whitespace/whitespace-nodes","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^22",["^R",[["~$s"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^25",false,"^7",75,"^26","~$cljs.core/LazySeq","^9",75,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["~$s"]]]]],"^20","Convert a string of whitespace to whitespace/newline nodes."],"~$NewlineNode",["^ ","^2;",1,"^2<",["^B",["^2=","^2>","^2?","^2@","^2A","^2B","^2C","^2D","^2E","^2F","^2G","^2H","^2I","^2J","^2K","^2L","^2M"]],"^C","^27","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^2O",true,"^8",12,"^1V",true,"^7",41,"^2P",true,"^9",41,"^2Q","^2R","^2S",["^B",["^2=","^2>","^2?","^2@","^2A","^2C","^2D","^2E","^2F","^2G","^2H","^2J","^2K","^2L","^2M"]]],"~$newline-node",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",65,"^8",7,"^9",65,"^:",19,"^1Y",["^R",["^1Z",["^R",[["~$s"]]]]],"^20","Create newline node."],"^C","~$rewrite-clj.node.whitespace/newline-node","^6","rewrite_clj/node/whitespace.cljs","^:",19,"^22",["^R",[["~$s"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^25",false,"^7",65,"^26","^27","^9",65,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["~$s"]]]]],"^20","Create newline node."],"~$*newline-fn*",["^ ","^C","~$rewrite-clj.node.whitespace/*newline-fn*","^6","rewrite_clj/node/whitespace.cljs","^7",6,"^8",1,"^9",6,"^:",28,"^35",true,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",6,"^8",16,"^9",6,"^:",28,"^35",true],"^20","This function is applied to every newline string."],"~$newline?",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",70,"^8",8,"^9",70,"^:",16,"~:private",true,"^1Y",["^R",["^1Z",["^R",[["~$c"]]]]],"^20","Check whether a character represents a linebreak."],"^3F",true,"^C","~$rewrite-clj.node.whitespace/newline?","^6","rewrite_clj/node/whitespace.cljs","^:",16,"^22",["^R",[["~$c"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^25",false,"^7",70,"^26","^2V","^9",70,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["~$c"]]]]],"^20","Check whether a character represents a linebreak."],"~$->WhitespaceNode",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",29,"^8",12,"^9",29,"^:",26,"^1V",true,"^1W","^1X","^1Y",["^R",["^1Z",["^R",[["~$whitespace"]]]]],"^20","Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode."],"^C","~$rewrite-clj.node.whitespace/->WhitespaceNode","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^22",["^R",[["^3I"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^1V",true,"^25",false,"^1W","^1X","^7",29,"^26","^2N","^9",29,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["^3I"]]]]],"^20","Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode."],"~$spaces",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",88,"^8",7,"^9",88,"^:",13,"^1Y",["^R",["^1Z",["^R",[["~$n"]]]]],"^20","Create node representing the given number of spaces."],"^C","~$rewrite-clj.node.whitespace/spaces","^6","rewrite_clj/node/whitespace.cljs","^:",13,"^22",["^R",[["~$n"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^25",false,"^7",88,"^26","^2N","^9",88,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["~$n"]]]]],"^20","Create node representing the given number of spaces."],"~$map->NewlineNode",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",41,"^8",12,"^9",41,"^:",23,"^1V",true,"^1W","^39","^1Y",["^R",["^1Z",["^R",[["~$G__29558"]]]]],"^20","Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values."],"^C","~$rewrite-clj.node.whitespace/map->NewlineNode","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^22",["^R",[["^3N"]]],"^23",null,"^24",["^R",[null,null]],"^8",1,"^1V",true,"^25",false,"^1W","^39","^7",41,"^26","^27","^9",41,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["^3N"]]]]],"^20","Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values."],"~$line-separated",["^ ","^1U",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",107,"^8",9,"^9",107,"^:",23,"^1Y",["^R",["^1Z",["^R",[["^2Z"]]]]],"^20","Interleave the given seq of nodes with newline nodes."],"^C","~$rewrite-clj.node.whitespace/line-separated","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^22",["^R",[["^2Z"]]],"^23",null,"^24",["^R",[null,null]],"^8",3,"^25",false,"^7",107,"^26","^30","^9",107,"^28",1,"^29",true,"^1Y",["^R",["^1Z",["^R",[["^2Z"]]]]],"^20","Interleave the given seq of nodes with newline nodes."]],"^P",["^ ","^K","^K"],"~:cljs.analyzer/constants",["^ ","^M",["^B",["~:newlines","~:whitespace","^1[","^3I","~:newline"]],"~:order",["^3T","^3I","^3S","^3U","^1["]],"^U",["^ ","^N",["^B",[]]],"^V",["^ "],"^W",["^L","^K","^I"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^19",[["^3Y","~:static-fns"],true,["^3Y","~:elide-asserts"],false,["^3Y","~:optimize-constants"],null,["^3Y","^10"],null,["^3Y","~:external-config"],null,["^3Y","~:tooling-config"],null,["^3Y","~:emit-constants"],null,["^3Y","~:load-tests"],null,["^3Y","~:infer-externs"],true,["^3Y","^12"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3Y","~:fn-invoke-direct"],null,["^3Y","~:source-map"],"/dev/null"]]]