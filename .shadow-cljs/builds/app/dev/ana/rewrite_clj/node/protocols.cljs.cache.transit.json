["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.protocols');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\n\n/**\n * Protocol for EDN/Clojure nodes.\n * @interface\n */\nrewrite_clj.node.protocols.Node = function(){};\n\n/**\n * Keyword representing the type of the node.\n */\nrewrite_clj.node.protocols.tag = (function rewrite_clj$node$protocols$tag(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$tag$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$tag$arity$1(_);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.tag[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4488__auto__.call(null,_));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.tag[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4485__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.tag\",_);\n}\n}\n}\n});\n\n/**\n * Return true if the node cannot be converted to an s-expression\n *   element.\n */\nrewrite_clj.node.protocols.printable_only_QMARK_ = (function rewrite_clj$node$protocols$printable_only_QMARK_(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1(_);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.printable_only_QMARK_[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4488__auto__.call(null,_));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.printable_only_QMARK_[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4485__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.printable-only?\",_);\n}\n}\n}\n});\n\n/**\n * Convert node to s-expression.\n */\nrewrite_clj.node.protocols.sexpr = (function rewrite_clj$node$protocols$sexpr(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$sexpr$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$sexpr$arity$1(_);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.sexpr[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4488__auto__.call(null,_));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.sexpr[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4485__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.sexpr\",_);\n}\n}\n}\n});\n\n/**\n * Get number of characters for the string version of this node.\n */\nrewrite_clj.node.protocols.length = (function rewrite_clj$node$protocols$length(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$length$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$length$arity$1(_);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.length[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4488__auto__.call(null,_));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.length[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4485__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.length\",_);\n}\n}\n}\n});\n\n/**\n * Convert node to printable string.\n */\nrewrite_clj.node.protocols.string = (function rewrite_clj$node$protocols$string(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$string$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$string$arity$1(_);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.string[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4488__auto__.call(null,_));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.string[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4485__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.string\",_);\n}\n}\n}\n});\n\ngoog.object.set(rewrite_clj.node.protocols.Node,\"object\",true);\n\ngoog.object.set(rewrite_clj.node.protocols.tag,\"object\",(function (_){\nreturn new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881);\n}));\n\ngoog.object.set(rewrite_clj.node.protocols.printable_only_QMARK_,\"object\",(function (_){\nreturn false;\n}));\n\ngoog.object.set(rewrite_clj.node.protocols.sexpr,\"object\",(function (this$){\nreturn this$;\n}));\n\ngoog.object.set(rewrite_clj.node.protocols.length,\"object\",(function (this$){\nreturn cljs.core.count(rewrite_clj.node.protocols.string(this$));\n}));\n\ngoog.object.set(rewrite_clj.node.protocols.string,\"object\",(function (this$){\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0));\n}));\n/**\n * Given a seq of nodes, convert those that represent s-expressions\n * to the respective forms.\n */\nrewrite_clj.node.protocols.sexprs = (function rewrite_clj$node$protocols$sexprs(nodes){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.sexpr,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.printable_only_QMARK_,nodes));\n});\n/**\n * Sum up lengths of the given nodes.\n */\nrewrite_clj.node.protocols.sum_lengths = (function rewrite_clj$node$protocols$sum_lengths(nodes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.length,nodes));\n});\n/**\n * Convert nodes to strings and concatenate them.\n */\nrewrite_clj.node.protocols.concat_strings = (function rewrite_clj$node$protocols$concat_strings(nodes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.string,nodes));\n});\n\n/**\n * Protocol for non-leaf EDN/Clojure nodes.\n * @interface\n */\nrewrite_clj.node.protocols.InnerNode = function(){};\n\n/**\n * Check whether the node can contain children.\n */\nrewrite_clj.node.protocols.inner_QMARK_ = (function rewrite_clj$node$protocols$inner_QMARK_(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$InnerNode$inner_QMARK_$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$InnerNode$inner_QMARK_$arity$1(_);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.inner_QMARK_[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4488__auto__.call(null,_));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.inner_QMARK_[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4485__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.inner?\",_);\n}\n}\n}\n});\n\n/**\n * Get child nodes.\n */\nrewrite_clj.node.protocols.children = (function rewrite_clj$node$protocols$children(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$InnerNode$children$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$InnerNode$children$arity$1(_);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.children[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4488__auto__.call(null,_));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.children[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4485__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.children\",_);\n}\n}\n}\n});\n\n/**\n * Replace the node's children.\n */\nrewrite_clj.node.protocols.replace_children = (function rewrite_clj$node$protocols$replace_children(_,children){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$InnerNode$replace_children$arity$2 == null)))))){\nreturn _.rewrite_clj$node$protocols$InnerNode$replace_children$arity$2(_,children);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.replace_children[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$2(_,children) : m__4488__auto__.call(null,_,children));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.replace_children[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$2(_,children) : m__4485__auto__.call(null,_,children));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.replace-children\",_);\n}\n}\n}\n});\n\ngoog.object.set(rewrite_clj.node.protocols.InnerNode,\"object\",true);\n\ngoog.object.set(rewrite_clj.node.protocols.inner_QMARK_,\"object\",(function (_){\nreturn false;\n}));\n\ngoog.object.set(rewrite_clj.node.protocols.children,\"object\",(function (_){\nthrow (new Error(\"UnsupportedOperationException\"));\n}));\n\ngoog.object.set(rewrite_clj.node.protocols.replace_children,\"object\",(function (_,___$1){\nthrow (new Error(\"UnsupportedOperationException\"));\n}));\n/**\n * Get all child s-expressions for the given node.\n */\nrewrite_clj.node.protocols.child_sexprs = (function rewrite_clj$node$protocols$child_sexprs(node){\nif(cljs.core.truth_(rewrite_clj.node.protocols.inner_QMARK_(node))){\nreturn rewrite_clj.node.protocols.sexprs(rewrite_clj.node.protocols.children(node));\n} else {\nreturn null;\n}\n});\n\n/**\n * Protocol for values that can be coerced to nodes.\n * @interface\n */\nrewrite_clj.node.protocols.NodeCoerceable = function(){};\n\nrewrite_clj.node.protocols.coerce = (function rewrite_clj$node$protocols$coerce(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$NodeCoerceable$coerce$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$NodeCoerceable$coerce$arity$1(_);\n} else {\nvar x__4487__auto__ = (((_ == null))?null:_);\nvar m__4488__auto__ = (rewrite_clj.node.protocols.coerce[goog.typeOf(x__4487__auto__)]);\nif((!((m__4488__auto__ == null)))){\nreturn (m__4488__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4488__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4488__auto__.call(null,_));\n} else {\nvar m__4485__auto__ = (rewrite_clj.node.protocols.coerce[\"_\"]);\nif((!((m__4485__auto__ == null)))){\nreturn (m__4485__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4485__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4485__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"NodeCoerceable.coerce\",_);\n}\n}\n}\n});\n\nrewrite_clj.node.protocols.assert_sexpr_count = (function rewrite_clj$node$protocols$assert_sexpr_count(nodes,c){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.printable_only_QMARK_,nodes)),c)){\nreturn null;\n} else {\nthrow (new Error([\"Assert failed: \",[\"can only contain\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(c),\" non-whitespace form(s).\"].join(''),\"\\n\",\"(= (count (remove printable-only? nodes)) c)\"].join('')));\n}\n});\nrewrite_clj.node.protocols.assert_single_sexpr = (function rewrite_clj$node$protocols$assert_single_sexpr(nodes){\nreturn rewrite_clj.node.protocols.assert_sexpr_count(nodes,(1));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/protocols.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.protocols","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^K","~$s","^K","~$cljs.core","^L","~$goog","^M"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^F",["^S",["^O",["^K","~:as","~$s"]]]]],"~:flags",["^ ","^O",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/protocols.cljs"],"~:compiled-at",1611071560989,"~:resource-name","rewrite_clj/node/protocols.cljs","~:warnings",[],"~:source","(ns rewrite-clj.node.protocols\n  (:require [clojure.string :as s]))\n\n\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure nodes.\"\n  (tag [_]\n    \"Keyword representing the type of the node.\")\n  (printable-only? [_]\n    \"Return true if the node cannot be converted to an s-expression\n     element.\")\n  (sexpr [_]\n    \"Convert node to s-expression.\")\n  (length [_]\n    \"Get number of characters for the string version of this node.\")\n  (string [_]\n    \"Convert node to printable string.\"))\n\n\n(extend-protocol Node\n  object\n  (tag [_] :unknown)\n  (printable-only? [_] false)\n  (sexpr [this] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexprs\n  \"Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms.\"\n  [nodes]\n  (->> nodes\n       (remove printable-only?)\n       (map sexpr)))\n\n(defn sum-lengths\n  \"Sum up lengths of the given nodes.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Convert nodes to strings and concatenate them.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure nodes.\"\n  (inner? [_]\n    \"Check whether the node can contain children.\")\n  (children [_]\n    \"Get child nodes.\")\n  (replace-children [_ children]\n    \"Replace the node's children.\"))\n\n(extend-protocol InnerNode\n  object\n  (inner? [_] false)\n  (children [_]\n    (throw (js/Error. \"UnsupportedOperationException\")))\n  (replace-children [_ _]\n    (throw (js/Error. \"UnsupportedOperationException\"))))\n\n(defn child-sexprs\n  \"Get all child s-expressions for the given node.\"\n  [node]\n  (if (inner? node)\n    (sexprs (children node))))\n\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [_]))\n\n\n;; TODO: Need to handle format !!!!\n;; (defn- node->string\n;;   [node]\n;;   (let [n (str (if (printable-only? node)\n;;                  (pr-str (string node))\n;;                  (string node)))\n;;         n' (if (re-find #\"\\n\" n)\n;;              (->> (s/replace n #\"\\r?\\n\" \"\\n  \")\n;;                   (format \"%n  %s%n\"))\n;;              (str \" \" n))]\n;;     (format \"<%s:%s>\" (name (tag node)) n')))\n\n\n;; (defn write-node\n;;   [writer node]\n;;   (str writer (node->string node)))\n\n\n;; ## Helpers\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n    (= (count (remove printable-only? nodes)) c)\n   (str \"can only contain\" c \" non-whitespace form(s).\")))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["x__4487__auto__","m__4488__auto__","rewrite-clj.node.protocols/tag","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","rewrite-clj.node.protocols/printable-only?","rewrite-clj.node.protocols/sexpr","rewrite-clj.node.protocols/length","rewrite-clj.node.protocols/string","rewrite-clj.node.protocols/Node","_","goog.object/set","this","cljs.core/count","cljs.core.pr_str","rewrite-clj.node.protocols/sexprs","nodes","cljs.core.remove","cljs.core.map","rewrite-clj.node.protocols/sum-lengths","cljs.core.reduce","cljs.core/+","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj.node.protocols/inner?","rewrite-clj.node.protocols/children","rewrite-clj.node.protocols/replace-children","rewrite-clj.node.protocols/InnerNode","children","js/Error","rewrite-clj.node.protocols/child-sexprs","node","rewrite-clj.node.protocols/coerce","rewrite-clj.node.protocols/NodeCoerceable","rewrite-clj.node.protocols/assert-sexpr-count","c","cljs.core._EQ_","rewrite-clj.node.protocols/assert-single-sexpr"]],"~:used-vars",["^D",["~$cljs.core/str","~$cljs.core/=","~$rewrite-clj.node.protocols/child-sexprs","~$rewrite-clj.node.protocols/tag","~$rewrite-clj.node.protocols/children","~$cljs.core/count","~$cljs.core/reduce","~$rewrite-clj.node.protocols/assert-sexpr-count","~$rewrite-clj.node.protocols/concat-strings","~$rewrite-clj.node.protocols/inner?","~$rewrite-clj.node.protocols/sexprs","~$cljs.core/pr-str","~$rewrite-clj.node.protocols/InnerNode","~$cljs.core/map","~$rewrite-clj.node.protocols/replace-children","~$rewrite-clj.node.protocols/printable-only?","~$goog.object/set","~$cljs.core/remove","~$rewrite-clj.node.protocols/NodeCoerceable","~$rewrite-clj.node.protocols/sexpr","~$cljs.core/missing-protocol","~$rewrite-clj.node.protocols/assert-single-sexpr","~$rewrite-clj.node.protocols/coerce","~$rewrite-clj.node.protocols/string","~$cljs.core/not","~$rewrite-clj.node.protocols/length","~$rewrite-clj.node.protocols/sum-lengths","~$rewrite-clj.node.protocols/Node","~$cljs.core/+","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^Z","goog/dom/tagname.js"],[1611071510313,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^M","~$goog.dom.HtmlElement"]]],["^Z","goog/math/math.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","~$goog.array","~$goog.asserts"]]],["^Z","goog/html/trustedtypes.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/labs/useragent/browser.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^23","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^Z","goog/html/safeurl.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^27"]]],["^Z","goog/array/array.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24"]]],["^Z","goog/debug/error.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/dom/nodetype.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/string/typedstring.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/object/object.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/dom/asserts.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24"]]],"~:SHADOW-TIMESTAMP",[1611071515000,1611071515000,1611071513000],["^Z","goog/math/long.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24","~$goog.reflect"]]],["^Z","goog/html/trustedresourceurl.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24","~$goog.html.trustedtypes","^2:","^2;","^2<","^2="]]],["^Z","goog/string/internal.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/functions/functions.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/html/safestyle.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^23","^24","~$goog.html.SafeUrl","^2<","^2=","^27"]]],["^Z","goog/dom/safe.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2A","^29","~$goog.html.uncheckedconversions","^2<","^27"]]],["^Z","goog/structs/map.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^Z","goog/html/safehtml.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^23","^24","~$goog.dom.TagName","~$goog.dom.tags","^2E","^2F","~$goog.html.SafeStyleSheet","^2A","^29","^2@","^2:","^2;","~$goog.labs.userAgent.browser","^26","^2<","^2=","^27"]]],["^Z","goog/dom/tags.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^26"]]],["^Z","goog/asserts/asserts.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^Z","goog/uri/uri.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^23","^24","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^Z","goog/i18n/bidi.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","rewrite_clj/node/protocols.cljs"],[1611071514323,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^L","^K"]]],["^Z","goog/fs/url.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/base.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",[]]],["^Z","goog/structs/structs.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^23","^26"]]],["^Z","clojure/string.cljs"],[1611071513180,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^L","^2P","~$goog.string.StringBuffer"]]],["^Z","goog/string/string.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","~$goog.dom.safe","^2G","^2<","^27"]]],["^Z","goog/reflect/reflect.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/labs/useragent/util.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^27"]]],["^Z","goog/string/stringbuffer.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","goog/iter/iter.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^23","^24","^2C","~$goog.math"]]],["^Z","goog/html/uncheckedconversions.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24","^2D","^2E","^2F","^2L","^2A","^29","^2<","^27"]]],["^Z","goog/dom/htmlelement.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M"]]],["^Z","cljs/core.cljs"],[1611071513180,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","~$goog.math.Long","~$goog.math.Integer","^2P","^26","^23","~$goog.Uri","^2V"]]],["^Z","goog/html/safescript.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24","^2@","^2<","^2="]]],["^Z","goog/html/safestylesheet.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^23","^24","^2F","^26","^2<","^2=","^27"]]],["^Z","goog/math/integer.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^2?"]]],["^Z","goog/uri/utils.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^23","^24","^2P"]]],["^Z","goog/string/const.js"],[1611071510313,"^1Z",["^ ","^1[",null,"^20",["^D",[]],"^21",["^M","^24","^2="]]]]],"~:clj-info",["^ ","jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1611071506000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1611071507000,"jar:file:/home/mark/.m2/repository/binaryage/devtools/1.0.0/devtools-1.0.0.jar!/devtools/defaults.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1611071513000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",1,"^8",5,"^9",1,"^:",31],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"~:shadow/protocol-prefixes",["^D",["rewrite-clj$node$protocols$InnerNode$","rewrite-clj$node$protocols$Node$","rewrite-clj$node$protocols$NodeCoerceable$"]],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","~$s","^K","^L","^L","^M","^M"],"^N",["^D",["^O"]],"~:shadow/js-access-global",["^D",["Error"]],"^P",null,"~:defs",["^ ","~$child-sexprs",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",65,"^8",7,"^9",65,"^:",19,"~:arglists",["^S",["~$quote",["^S",[["~$node"]]]]],"~:doc","Get all child s-expressions for the given node."],"^E","^1<","^6","rewrite_clj/node/protocols.cljs","^:",19,"~:method-params",["^S",[["^3R"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^8",1,"~:variadic?",false,"^7",65,"~:ret-tag",["^D",["~$cljs.core/LazySeq","~$clj-nil"]],"^9",65,"~:max-fixed-arity",1,"~:fn-var",true,"^3P",["^S",["^3Q",["^S",[["^3R"]]]]],"^3S","Get all child s-expressions for the given node."],"~$tag",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",8,"^8",4,"^9",8,"^:",7,"~:protocol","^1U","^3S","Keyword representing the type of the node.","^3P",["^S",["^3Q",["^S",[["~$_"]]]]]],"^42","^1U","^E","^1=","^6","rewrite_clj/node/protocols.cljs","^:",7,"^3T",["^S",[["~$_"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",6,"^3X","~$any","^9",8,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]],"^3S","Keyword representing the type of the node."],"~$children",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",52,"^8",4,"^9",52,"^:",12,"^42","^1F","^3S","Get child nodes.","^3P",["^S",["^3Q",["^S",[["~$_"]]]]]],"^42","^1F","^E","^1>","^6","rewrite_clj/node/protocols.cljs","^:",12,"^3T",["^S",[["~$_"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",48,"^3X","^43","^9",52,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]],"^3S","Get child nodes."],"~$sexprs",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",29,"^8",7,"^9",29,"^:",13,"^3P",["^S",["^3Q",["^S",[["~$nodes"]]]]],"^3S","Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms."],"^E","^1D","^6","rewrite_clj/node/protocols.cljs","^:",13,"^3T",["^S",[["^46"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",29,"^3X","^3Y","^9",29,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["^46"]]]]],"^3S","Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms."],"~$inner?",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",50,"^8",4,"^9",50,"^:",10,"^42","^1F","^3S","Check whether the node can contain children.","^3P",["^S",["^3Q",["^S",[["~$_"]]]]]],"^42","^1F","^E","^1C","^6","rewrite_clj/node/protocols.cljs","^:",10,"^3T",["^S",[["~$_"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",48,"^3X","^43","^9",50,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]],"^3S","Check whether the node can contain children."],"~$replace-children",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",54,"^8",4,"^9",54,"^:",20,"^42","^1F","^3S","Replace the node's children.","^3P",["^S",["^3Q",["^S",[["~$_","^44"]]]]]],"^42","^1F","^E","^1H","^6","rewrite_clj/node/protocols.cljs","^:",20,"^3T",["^S",[["~$_","^44"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",48,"^3X","^43","^9",54,"^3[",2,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_","^44"]]]]],"^3S","Replace the node's children."],"~$InnerNode",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","rewrite_clj/node/protocols.cljs","^:",23,"^8",14,"^7",48,"~:protocol-info",["^ ","~:methods",["^ ","^47",[["~$_"]],"^44",[["~$_"]],"^48",[["~$_","^44"]]]],"^9",48,"~:sigs",["^ ","~:inner?",["^ ","^E","^47","^3P",["^S",[["~$_"]]],"^3S","Check whether the node can contain children."],"~:children",["^ ","^E","^44","^3P",["^S",[["~$_"]]],"^3S","Get child nodes."],"~:replace-children",["^ ","^E","^48","^3P",["^S",[["~$_","^44"]]],"^3S","Replace the node's children."]],"^3S","Protocol for non-leaf EDN/Clojure nodes.","~:jsdoc",["^S",["@interface"]]],"^4:",true,"^E","^1F","^6","rewrite_clj/node/protocols.cljs","^:",23,"^8",1,"^7",48,"^4;",["^ ","^4<",["^ ","^47",[["~$_"]],"^44",[["~$_"]],"^48",[["~$_","^44"]]]],"~:info",null,"^9",48,"~:tag","^43","^4=",["^ ","^4>",["^ ","^E","^47","^3P",["^S",[["~$_"]]],"^3S","Check whether the node can contain children."],"^4?",["^ ","^E","^44","^3P",["^S",[["~$_"]]],"^3S","Get child nodes."],"^4@",["^ ","^E","^48","^3P",["^S",[["~$_","^44"]]],"^3S","Replace the node's children."]],"~:impls",["^D",["~$object"]],"^3S","Protocol for non-leaf EDN/Clojure nodes.","^4A",["^S",["@interface"]]],"~$printable-only?",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",10,"^8",4,"^9",10,"^:",19,"^42","^1U","^3S","Return true if the node cannot be converted to an s-expression\n     element.","^3P",["^S",["^3Q",["^S",[["~$_"]]]]]],"^42","^1U","^E","^1I","^6","rewrite_clj/node/protocols.cljs","^:",19,"^3T",["^S",[["~$_"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",6,"^3X","^43","^9",10,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]],"^3S","Return true if the node cannot be converted to an s-expression\n     element."],"~$sexpr",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",13,"^8",4,"^9",13,"^:",9,"^42","^1U","^3S","Convert node to s-expression.","^3P",["^S",["^3Q",["^S",[["~$_"]]]]]],"^42","^1U","^E","^1M","^6","rewrite_clj/node/protocols.cljs","^:",9,"^3T",["^S",[["~$_"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",6,"^3X","^43","^9",13,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]],"^3S","Convert node to s-expression."],"~$concat-strings",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",42,"^8",7,"^9",42,"^:",21,"^3P",["^S",["^3Q",["^S",[["^46"]]]]],"^3S","Convert nodes to strings and concatenate them."],"^E","^1B","^6","rewrite_clj/node/protocols.cljs","^:",21,"^3T",["^S",[["^46"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",42,"^3X","^43","^9",42,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["^46"]]]]],"^3S","Convert nodes to strings and concatenate them."],"~$string",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",17,"^8",4,"^9",17,"^:",10,"^42","^1U","^3S","Convert node to printable string.","^3P",["^S",["^3Q",["^S",[["~$_"]]]]]],"^42","^1U","^E","^1Q","^6","rewrite_clj/node/protocols.cljs","^:",10,"^3T",["^S",[["~$_"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",6,"^3X","^43","^9",17,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]],"^3S","Convert node to printable string."],"~$assert-sexpr-count",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",97,"^8",7,"^9",97,"^:",25,"^3P",["^S",["^3Q",["^S",[["^46","~$c"]]]]]],"^E","^1A","^6","rewrite_clj/node/protocols.cljs","^:",25,"^3T",["^S",[["^46","~$c"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",97,"^3X","^3Z","^9",97,"^3[",2,"^40",true,"^3P",["^S",["^3Q",["^S",[["^46","~$c"]]]]]],"~$sum-lengths",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",37,"^8",7,"^9",37,"^:",18,"^3P",["^S",["^3Q",["^S",[["^46"]]]]],"^3S","Sum up lengths of the given nodes."],"^E","^1T","^6","rewrite_clj/node/protocols.cljs","^:",18,"^3T",["^S",[["^46"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",37,"^3X","^43","^9",37,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["^46"]]]]],"^3S","Sum up lengths of the given nodes."],"~$assert-single-sexpr",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",103,"^8",7,"^9",103,"^:",26,"^3P",["^S",["^3Q",["^S",[["^46"]]]]]],"^E","^1O","^6","rewrite_clj/node/protocols.cljs","^:",26,"^3T",["^S",[["^46"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",103,"^3X","^3Z","^9",103,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["^46"]]]]]],"~$length",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",15,"^8",4,"^9",15,"^:",10,"^42","^1U","^3S","Get number of characters for the string version of this node.","^3P",["^S",["^3Q",["^S",[["~$_"]]]]]],"^42","^1U","^E","^1S","^6","rewrite_clj/node/protocols.cljs","^:",10,"^3T",["^S",[["~$_"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",6,"^3X","^43","^9",15,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]],"^3S","Get number of characters for the string version of this node."],"~$NodeCoerceable",["^ ","^5",["^ ","^4:",true,"^6","rewrite_clj/node/protocols.cljs","^:",28,"^8",14,"^7",72,"^4;",["^ ","^4<",["^ ","~$coerce",[["~$_"]]]],"^9",72,"^4=",["^ ","~:coerce",["^ ","^E","^4O","^3P",["^S",[["~$_"]]],"^3S",null]],"^3S","Protocol for values that can be coerced to nodes.","^4A",["^S",["@interface"]]],"^4:",true,"^E","^1L","^6","rewrite_clj/node/protocols.cljs","^:",28,"^8",1,"^7",72,"^4;",["^ ","^4<",["^ ","^4O",[["~$_"]]]],"^4B",null,"^9",72,"^4C","^43","^4=",["^ ","^4P",["^ ","^E","^4O","^3P",["^S",[["~$_"]]],"^3S",null]],"^4D",["^D",[]],"^3S","Protocol for values that can be coerced to nodes.","^4A",["^S",["@interface"]]],"~$Node",["^ ","^5",["^ ","^4:",true,"^6","rewrite_clj/node/protocols.cljs","^:",18,"^8",14,"^7",6,"^4;",["^ ","^4<",["^ ","^41",[["~$_"]],"^4F",[["~$_"]],"^4G",[["~$_"]],"^4M",[["~$_"]],"^4I",[["~$_"]]]],"^9",6,"^4=",["^ ","^4C",["^ ","^E","^41","^3P",["^S",[["~$_"]]],"^3S","Keyword representing the type of the node."],"~:printable-only?",["^ ","^E","^4F","^3P",["^S",[["~$_"]]],"^3S","Return true if the node cannot be converted to an s-expression\n     element."],"~:sexpr",["^ ","^E","^4G","^3P",["^S",[["~$_"]]],"^3S","Convert node to s-expression."],"~:length",["^ ","^E","^4M","^3P",["^S",[["~$_"]]],"^3S","Get number of characters for the string version of this node."],"~:string",["^ ","^E","^4I","^3P",["^S",[["~$_"]]],"^3S","Convert node to printable string."]],"^3S","Protocol for EDN/Clojure nodes.","^4A",["^S",["@interface"]]],"^4:",true,"^E","^1U","^6","rewrite_clj/node/protocols.cljs","^:",18,"^8",1,"^7",6,"^4;",["^ ","^4<",["^ ","^41",[["~$_"]],"^4F",[["~$_"]],"^4G",[["~$_"]],"^4M",[["~$_"]],"^4I",[["~$_"]]]],"^4B",null,"^9",6,"^4C","^43","^4=",["^ ","^4C",["^ ","^E","^41","^3P",["^S",[["~$_"]]],"^3S","Keyword representing the type of the node."],"^4R",["^ ","^E","^4F","^3P",["^S",[["~$_"]]],"^3S","Return true if the node cannot be converted to an s-expression\n     element."],"^4S",["^ ","^E","^4G","^3P",["^S",[["~$_"]]],"^3S","Convert node to s-expression."],"^4T",["^ ","^E","^4M","^3P",["^S",[["~$_"]]],"^3S","Get number of characters for the string version of this node."],"^4U",["^ ","^E","^4I","^3P",["^S",[["~$_"]]],"^3S","Convert node to printable string."]],"^4D",["^D",["^4E","~$rewrite-clj.node.comment/CommentNode"]],"^3S","Protocol for EDN/Clojure nodes.","^4A",["^S",["@interface"]]],"^4O",["^ ","^3O",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",74,"^8",4,"^9",74,"^:",10,"^42","^1L","^3S",null,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]]],"^42","^1L","^E","^1P","^6","rewrite_clj/node/protocols.cljs","^:",10,"^3T",["^S",[["~$_"]]],"^3U",null,"^3V",["^S",[null,null]],"^8",1,"^3W",false,"^7",72,"^3X","^43","^9",74,"^3[",1,"^40",true,"^3P",["^S",["^3Q",["^S",[["~$_"]]]]],"^3S",null]],"^Q",["^ ","^L","^L"],"~:cljs.analyzer/constants",["^ ","^N",["^D",["~:unknown"]],"~:order",["^4X"]],"^V",["^ ","^O",["^D",[]]],"^W",["^ "],"^X",["^M","^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^1Y",[["^50","~:static-fns"],true,["^50","~:shadow-tweaks"],null,["^50","~:source-map-inline"],null,["^50","~:elide-asserts"],false,["^50","~:optimize-constants"],null,["^50","^11"],null,["^50","~:external-config"],null,["^50","~:tooling-config"],null,["^50","~:emit-constants"],null,["^50","~:load-tests"],null,["^50","~:form-size-threshold"],null,["^50","~:infer-externs"],true,["^50","^13"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^50","~:fn-invoke-direct"],null,["^50","~:source-map"],"/dev/null"]]]