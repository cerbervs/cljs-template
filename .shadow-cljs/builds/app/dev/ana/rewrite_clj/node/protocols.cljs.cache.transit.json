["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.protocols');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\n\n/**\n * Protocol for EDN/Clojure nodes.\n * @interface\n */\nrewrite_clj.node.protocols.Node = function(){};\n\n/**\n * Keyword representing the type of the node.\n */\nrewrite_clj.node.protocols.tag = (function rewrite_clj$node$protocols$tag(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$tag$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$tag$arity$1(_);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.tag[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4434__auto__.call(null,_));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.tag[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4431__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.tag\",_);\n}\n}\n}\n});\n\n/**\n * Return true if the node cannot be converted to an s-expression\n *   element.\n */\nrewrite_clj.node.protocols.printable_only_QMARK_ = (function rewrite_clj$node$protocols$printable_only_QMARK_(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1(_);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.printable_only_QMARK_[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4434__auto__.call(null,_));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.printable_only_QMARK_[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4431__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.printable-only?\",_);\n}\n}\n}\n});\n\n/**\n * Convert node to s-expression.\n */\nrewrite_clj.node.protocols.sexpr = (function rewrite_clj$node$protocols$sexpr(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$sexpr$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$sexpr$arity$1(_);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.sexpr[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4434__auto__.call(null,_));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.sexpr[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4431__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.sexpr\",_);\n}\n}\n}\n});\n\n/**\n * Get number of characters for the string version of this node.\n */\nrewrite_clj.node.protocols.length = (function rewrite_clj$node$protocols$length(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$length$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$length$arity$1(_);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.length[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4434__auto__.call(null,_));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.length[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4431__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.length\",_);\n}\n}\n}\n});\n\n/**\n * Convert node to printable string.\n */\nrewrite_clj.node.protocols.string = (function rewrite_clj$node$protocols$string(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$Node$string$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$Node$string$arity$1(_);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.string[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4434__auto__.call(null,_));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.string[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4431__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"Node.string\",_);\n}\n}\n}\n});\n\ngoog.object.set(rewrite_clj.node.protocols.Node,\"object\",true);\n\nvar G__29153_29239 = rewrite_clj.node.protocols.tag;\nvar G__29154_29240 = \"object\";\nvar G__29155_29241 = ((function (G__29153_29239,G__29154_29240){\nreturn (function (_){\nreturn new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881);\n});})(G__29153_29239,G__29154_29240))\n;\ngoog.object.set(G__29153_29239,G__29154_29240,G__29155_29241);\n\nvar G__29161_29242 = rewrite_clj.node.protocols.printable_only_QMARK_;\nvar G__29162_29243 = \"object\";\nvar G__29163_29244 = ((function (G__29161_29242,G__29162_29243){\nreturn (function (_){\nreturn false;\n});})(G__29161_29242,G__29162_29243))\n;\ngoog.object.set(G__29161_29242,G__29162_29243,G__29163_29244);\n\nvar G__29166_29245 = rewrite_clj.node.protocols.sexpr;\nvar G__29167_29246 = \"object\";\nvar G__29168_29247 = ((function (G__29166_29245,G__29167_29246){\nreturn (function (this$){\nreturn this$;\n});})(G__29166_29245,G__29167_29246))\n;\ngoog.object.set(G__29166_29245,G__29167_29246,G__29168_29247);\n\nvar G__29172_29249 = rewrite_clj.node.protocols.length;\nvar G__29173_29250 = \"object\";\nvar G__29174_29251 = ((function (G__29172_29249,G__29173_29250){\nreturn (function (this$){\nreturn cljs.core.count(rewrite_clj.node.protocols.string(this$));\n});})(G__29172_29249,G__29173_29250))\n;\ngoog.object.set(G__29172_29249,G__29173_29250,G__29174_29251);\n\nvar G__29177_29253 = rewrite_clj.node.protocols.string;\nvar G__29178_29254 = \"object\";\nvar G__29179_29255 = ((function (G__29177_29253,G__29178_29254){\nreturn (function (this$){\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0));\n});})(G__29177_29253,G__29178_29254))\n;\ngoog.object.set(G__29177_29253,G__29178_29254,G__29179_29255);\n/**\n * Given a seq of nodes, convert those that represent s-expressions\n * to the respective forms.\n */\nrewrite_clj.node.protocols.sexprs = (function rewrite_clj$node$protocols$sexprs(nodes){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.sexpr,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.printable_only_QMARK_,nodes));\n});\n/**\n * Sum up lengths of the given nodes.\n */\nrewrite_clj.node.protocols.sum_lengths = (function rewrite_clj$node$protocols$sum_lengths(nodes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.length,nodes));\n});\n/**\n * Convert nodes to strings and concatenate them.\n */\nrewrite_clj.node.protocols.concat_strings = (function rewrite_clj$node$protocols$concat_strings(nodes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.string,nodes));\n});\n\n/**\n * Protocol for non-leaf EDN/Clojure nodes.\n * @interface\n */\nrewrite_clj.node.protocols.InnerNode = function(){};\n\n/**\n * Check whether the node can contain children.\n */\nrewrite_clj.node.protocols.inner_QMARK_ = (function rewrite_clj$node$protocols$inner_QMARK_(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$InnerNode$inner_QMARK_$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$InnerNode$inner_QMARK_$arity$1(_);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.inner_QMARK_[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4434__auto__.call(null,_));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.inner_QMARK_[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4431__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.inner?\",_);\n}\n}\n}\n});\n\n/**\n * Get child nodes.\n */\nrewrite_clj.node.protocols.children = (function rewrite_clj$node$protocols$children(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$InnerNode$children$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$InnerNode$children$arity$1(_);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.children[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4434__auto__.call(null,_));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.children[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4431__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.children\",_);\n}\n}\n}\n});\n\n/**\n * Replace the node's children.\n */\nrewrite_clj.node.protocols.replace_children = (function rewrite_clj$node$protocols$replace_children(_,children){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$InnerNode$replace_children$arity$2 == null)))))){\nreturn _.rewrite_clj$node$protocols$InnerNode$replace_children$arity$2(_,children);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.replace_children[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(_,children) : m__4434__auto__.call(null,_,children));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.replace_children[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$2(_,children) : m__4431__auto__.call(null,_,children));\n} else {\nthrow cljs.core.missing_protocol(\"InnerNode.replace-children\",_);\n}\n}\n}\n});\n\ngoog.object.set(rewrite_clj.node.protocols.InnerNode,\"object\",true);\n\nvar G__29188_29277 = rewrite_clj.node.protocols.inner_QMARK_;\nvar G__29189_29278 = \"object\";\nvar G__29190_29279 = ((function (G__29188_29277,G__29189_29278){\nreturn (function (_){\nreturn false;\n});})(G__29188_29277,G__29189_29278))\n;\ngoog.object.set(G__29188_29277,G__29189_29278,G__29190_29279);\n\nvar G__29191_29281 = rewrite_clj.node.protocols.children;\nvar G__29192_29282 = \"object\";\nvar G__29193_29283 = ((function (G__29191_29281,G__29192_29282){\nreturn (function (_){\nthrow (new Error(\"UnsupportedOperationException\"));\n});})(G__29191_29281,G__29192_29282))\n;\ngoog.object.set(G__29191_29281,G__29192_29282,G__29193_29283);\n\nvar G__29195_29284 = rewrite_clj.node.protocols.replace_children;\nvar G__29196_29285 = \"object\";\nvar G__29197_29286 = ((function (G__29195_29284,G__29196_29285){\nreturn (function (_,___$1){\nthrow (new Error(\"UnsupportedOperationException\"));\n});})(G__29195_29284,G__29196_29285))\n;\ngoog.object.set(G__29195_29284,G__29196_29285,G__29197_29286);\n/**\n * Get all child s-expressions for the given node.\n */\nrewrite_clj.node.protocols.child_sexprs = (function rewrite_clj$node$protocols$child_sexprs(node){\nif(cljs.core.truth_(rewrite_clj.node.protocols.inner_QMARK_(node))){\nreturn rewrite_clj.node.protocols.sexprs(rewrite_clj.node.protocols.children(node));\n} else {\nreturn null;\n}\n});\n\n/**\n * Protocol for values that can be coerced to nodes.\n * @interface\n */\nrewrite_clj.node.protocols.NodeCoerceable = function(){};\n\nrewrite_clj.node.protocols.coerce = (function rewrite_clj$node$protocols$coerce(_){\nif((((!((_ == null)))) && ((!((_.rewrite_clj$node$protocols$NodeCoerceable$coerce$arity$1 == null)))))){\nreturn _.rewrite_clj$node$protocols$NodeCoerceable$coerce$arity$1(_);\n} else {\nvar x__4433__auto__ = (((_ == null))?null:_);\nvar m__4434__auto__ = (rewrite_clj.node.protocols.coerce[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4434__auto__.call(null,_));\n} else {\nvar m__4431__auto__ = (rewrite_clj.node.protocols.coerce[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(_) : m__4431__auto__.call(null,_));\n} else {\nthrow cljs.core.missing_protocol(\"NodeCoerceable.coerce\",_);\n}\n}\n}\n});\n\nrewrite_clj.node.protocols.assert_sexpr_count = (function rewrite_clj$node$protocols$assert_sexpr_count(nodes,c){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.printable_only_QMARK_,nodes)),c)){\nreturn null;\n} else {\nthrow (new Error([\"Assert failed: \",[\"can only contain\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(c),\" non-whitespace form(s).\"].join(''),\"\\n\",\"(= (count (remove printable-only? nodes)) c)\"].join('')));\n}\n});\nrewrite_clj.node.protocols.assert_single_sexpr = (function rewrite_clj$node$protocols$assert_single_sexpr(nodes){\nreturn rewrite_clj.node.protocols.assert_sexpr_count(nodes,(1));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/protocols.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.protocols","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^I","~$s","^I","~$cljs.core","^J","~$goog","^K"],"~:seen",["^B",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^J","^J"],"~:form",["~#list",["~$ns","^D",["^Q",["^M",["^I","~:as","~$s"]]]]],"~:flags",["^ ","^M",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^K","^J","^I"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/protocols.cljs"],"~:compiled-at",1587374058963,"~:resource-name","rewrite_clj/node/protocols.cljs","~:warnings",[],"~:source","(ns rewrite-clj.node.protocols\n  (:require [clojure.string :as s]))\n\n\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure nodes.\"\n  (tag [_]\n    \"Keyword representing the type of the node.\")\n  (printable-only? [_]\n    \"Return true if the node cannot be converted to an s-expression\n     element.\")\n  (sexpr [_]\n    \"Convert node to s-expression.\")\n  (length [_]\n    \"Get number of characters for the string version of this node.\")\n  (string [_]\n    \"Convert node to printable string.\"))\n\n\n(extend-protocol Node\n  object\n  (tag [_] :unknown)\n  (printable-only? [_] false)\n  (sexpr [this] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexprs\n  \"Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms.\"\n  [nodes]\n  (->> nodes\n       (remove printable-only?)\n       (map sexpr)))\n\n(defn sum-lengths\n  \"Sum up lengths of the given nodes.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Convert nodes to strings and concatenate them.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure nodes.\"\n  (inner? [_]\n    \"Check whether the node can contain children.\")\n  (children [_]\n    \"Get child nodes.\")\n  (replace-children [_ children]\n    \"Replace the node's children.\"))\n\n(extend-protocol InnerNode\n  object\n  (inner? [_] false)\n  (children [_]\n    (throw (js/Error. \"UnsupportedOperationException\")))\n  (replace-children [_ _]\n    (throw (js/Error. \"UnsupportedOperationException\"))))\n\n(defn child-sexprs\n  \"Get all child s-expressions for the given node.\"\n  [node]\n  (if (inner? node)\n    (sexprs (children node))))\n\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [_]))\n\n\n;; TODO: Need to handle format !!!!\n;; (defn- node->string\n;;   [node]\n;;   (let [n (str (if (printable-only? node)\n;;                  (pr-str (string node))\n;;                  (string node)))\n;;         n' (if (re-find #\"\\n\" n)\n;;              (->> (s/replace n #\"\\r?\\n\" \"\\n  \")\n;;                   (format \"%n  %s%n\"))\n;;              (str \" \" n))]\n;;     (format \"<%s:%s>\" (name (tag node)) n')))\n\n\n;; (defn write-node\n;;   [writer node]\n;;   (str writer (node->string node)))\n\n\n;; ## Helpers\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n    (= (count (remove printable-only? nodes)) c)\n   (str \"can only contain\" c \" non-whitespace form(s).\")))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["x__4433__auto__","m__4434__auto__","rewrite-clj.node.protocols/tag","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","rewrite-clj.node.protocols/printable-only?","rewrite-clj.node.protocols/sexpr","rewrite-clj.node.protocols/length","rewrite-clj.node.protocols/string","rewrite-clj.node.protocols/Node","_","goog.object/set","G__29153","G__29154","G__29155","G__29161","G__29162","G__29163","G__29166","G__29167","G__29168","G__29172","G__29173","G__29174","G__29177","G__29178","G__29179","this","cljs.core/count","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.node.protocols/sexprs","nodes","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.protocols/sum-lengths","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj.node.protocols/inner?","rewrite-clj.node.protocols/children","rewrite-clj.node.protocols/replace-children","rewrite-clj.node.protocols/InnerNode","children","G__29188","G__29189","G__29190","G__29191","G__29192","G__29193","G__29195","G__29196","G__29197","js/Error","rewrite-clj.node.protocols/child-sexprs","node","rewrite-clj.node.protocols/coerce","rewrite-clj.node.protocols/NodeCoerceable","rewrite-clj.node.protocols/assert-sexpr-count","c","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.protocols/assert-single-sexpr"]]],"~:cache-keys",["~#cmap",[["~:macro","^J"],[1587365553000],["^X","goog/math/math.js"],[1584607223013,"^K","~$goog.array","~$goog.asserts"],["^X","goog/array/array.js"],[1584607223013,"^K","^1;"],["^X","goog/debug/error.js"],[1584607223013,"^K"],["^X","goog/dom/nodetype.js"],[1584607223013,"^K"],["^X","goog/object/object.js"],[1584607223013,"^K"],"~:SHADOW-TIMESTAMP",[1587365557000,1587365553000],["^X","goog/math/long.js"],[1584607223013,"^K","^1;","~$goog.reflect"],["^X","goog/functions/functions.js"],[1584607223013,"^K"],["^X","goog/structs/map.js"],[1584607223013,"^K","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^X","goog/asserts/asserts.js"],[1584607223013,"^K","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^X","goog/uri/uri.js"],[1584607223013,"^K","^1:","^1;","^1C","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^X","rewrite_clj/node/protocols.cljs"],[1587365556840,"^K","^J","^I"],["^X","goog/base.js"],[1584607223013],["^X","goog/structs/structs.js"],[1584607223013,"^K","^1:","^1@"],["^X","clojure/string.cljs"],[1587365553008,"^K","^J","^1C","~$goog.string.StringBuffer"],["^X","goog/string/string.js"],[1584607223013,"^K"],["^X","goog/reflect/reflect.js"],[1584607223013,"^K"],["^X","goog/string/stringbuffer.js"],[1584607223013,"^K"],["^X","goog/iter/iter.js"],[1584607223013,"^K","^1:","^1;","~$goog.functions","~$goog.math"],["^X","cljs/core.cljs"],[1587365553008,"~$goog.math.Long","~$goog.math.Integer","^1C","^1@","^1:","~$goog.Uri","^1I"],["^X","goog/math/integer.js"],[1584607223013,"^K"],["^X","goog/uri/utils.js"],[1584607223013,"^K","^1:","^1;","^1C"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",1,"^8",5,"^9",1,"^:",31],"^;",["^ ","^<","^=","^>","^?"],"~:shadow/protocol-prefixes",["^B",["rewrite-clj$node$protocols$InnerNode$","rewrite-clj$node$protocols$Node$","rewrite-clj$node$protocols$NodeCoerceable$"]],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","~$s","^I","^J","^J","^K","^K"],"^L",["^B",["^M"]],"~:shadow/js-access-global",["^B",["Error"]],"^N",null,"~:defs",["^ ","~$child-sexprs",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",65,"^8",7,"^9",65,"^:",19,"~:arglists",["^Q",["~$quote",["^Q",[["~$node"]]]]],"~:doc","Get all child s-expressions for the given node."],"^C","~$rewrite-clj.node.protocols/child-sexprs","^6","rewrite_clj/node/protocols.cljs","^:",19,"~:method-params",["^Q",[["^1W"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^8",1,"~:variadic?",false,"^7",65,"~:ret-tag",["^B",["~$cljs.core/LazySeq","~$clj-nil"]],"^9",65,"~:max-fixed-arity",1,"~:fn-var",true,"^1U",["^Q",["^1V",["^Q",[["^1W"]]]]],"^1X","Get all child s-expressions for the given node."],"~$tag",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",8,"^8",4,"^9",8,"^:",7,"~:protocol","~$rewrite-clj.node.protocols/Node","^1X","Keyword representing the type of the node.","^1U",["^Q",["^1V",["^Q",[["~$_"]]]]]],"^28","^29","^C","~$rewrite-clj.node.protocols/tag","^6","rewrite_clj/node/protocols.cljs","^:",7,"^1Z",["^Q",[["~$_"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",6,"^22","~$any","^9",8,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]],"^1X","Keyword representing the type of the node."],"~$children",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",52,"^8",4,"^9",52,"^:",12,"^28","~$rewrite-clj.node.protocols/InnerNode","^1X","Get child nodes.","^1U",["^Q",["^1V",["^Q",[["~$_"]]]]]],"^28","^2=","^C","~$rewrite-clj.node.protocols/children","^6","rewrite_clj/node/protocols.cljs","^:",12,"^1Z",["^Q",[["~$_"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",48,"^22","^2;","^9",52,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]],"^1X","Get child nodes."],"~$sexprs",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",29,"^8",7,"^9",29,"^:",13,"^1U",["^Q",["^1V",["^Q",[["~$nodes"]]]]],"^1X","Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms."],"^C","~$rewrite-clj.node.protocols/sexprs","^6","rewrite_clj/node/protocols.cljs","^:",13,"^1Z",["^Q",[["^2@"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",29,"^22","^23","^9",29,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["^2@"]]]]],"^1X","Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms."],"~$inner?",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",50,"^8",4,"^9",50,"^:",10,"^28","^2=","^1X","Check whether the node can contain children.","^1U",["^Q",["^1V",["^Q",[["~$_"]]]]]],"^28","^2=","^C","~$rewrite-clj.node.protocols/inner?","^6","rewrite_clj/node/protocols.cljs","^:",10,"^1Z",["^Q",[["~$_"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",48,"^22","^2;","^9",50,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]],"^1X","Check whether the node can contain children."],"~$replace-children",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",54,"^8",4,"^9",54,"^:",20,"^28","^2=","^1X","Replace the node's children.","^1U",["^Q",["^1V",["^Q",[["~$_","^2<"]]]]]],"^28","^2=","^C","~$rewrite-clj.node.protocols/replace-children","^6","rewrite_clj/node/protocols.cljs","^:",20,"^1Z",["^Q",[["~$_","^2<"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",48,"^22","^2;","^9",54,"^25",2,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_","^2<"]]]]],"^1X","Replace the node's children."],"~$InnerNode",["^ ","^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",48,"^8",14,"^9",48,"^:",23,"~:protocol-symbol",true,"^1X","Protocol for non-leaf EDN/Clojure nodes.","~:jsdoc",["^Q",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^2B",[["~$_"]],"^2<",[["~$_"]],"^2D",[["~$_","^2<"]]]]],"^2G",true,"^C","^2=","^6","rewrite_clj/node/protocols.cljs","^:",23,"^8",1,"^7",48,"^2I",["^ ","^2J",["^ ","^2B",[["~$_"]],"^2<",[["~$_"]],"^2D",[["~$_","^2<"]]]],"~:info",null,"^9",48,"~:tag","^2;","~:impls",["^B",["~$object"]],"^1X","Protocol for non-leaf EDN/Clojure nodes.","^2H",["^Q",["@interface"]]],"~$printable-only?",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",10,"^8",4,"^9",10,"^:",19,"^28","^29","^1X","Return true if the node cannot be converted to an s-expression\n     element.","^1U",["^Q",["^1V",["^Q",[["~$_"]]]]]],"^28","^29","^C","~$rewrite-clj.node.protocols/printable-only?","^6","rewrite_clj/node/protocols.cljs","^:",19,"^1Z",["^Q",[["~$_"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",6,"^22","^2;","^9",10,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]],"^1X","Return true if the node cannot be converted to an s-expression\n     element."],"~$sexpr",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",13,"^8",4,"^9",13,"^:",9,"^28","^29","^1X","Convert node to s-expression.","^1U",["^Q",["^1V",["^Q",[["~$_"]]]]]],"^28","^29","^C","~$rewrite-clj.node.protocols/sexpr","^6","rewrite_clj/node/protocols.cljs","^:",9,"^1Z",["^Q",[["~$_"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",6,"^22","^2;","^9",13,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]],"^1X","Convert node to s-expression."],"~$concat-strings",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",42,"^8",7,"^9",42,"^:",21,"^1U",["^Q",["^1V",["^Q",[["^2@"]]]]],"^1X","Convert nodes to strings and concatenate them."],"^C","~$rewrite-clj.node.protocols/concat-strings","^6","rewrite_clj/node/protocols.cljs","^:",21,"^1Z",["^Q",[["^2@"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",42,"^22","^2;","^9",42,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["^2@"]]]]],"^1X","Convert nodes to strings and concatenate them."],"~$string",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",17,"^8",4,"^9",17,"^:",10,"^28","^29","^1X","Convert node to printable string.","^1U",["^Q",["^1V",["^Q",[["~$_"]]]]]],"^28","^29","^C","~$rewrite-clj.node.protocols/string","^6","rewrite_clj/node/protocols.cljs","^:",10,"^1Z",["^Q",[["~$_"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",6,"^22","^2;","^9",17,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]],"^1X","Convert node to printable string."],"~$assert-sexpr-count",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",97,"^8",7,"^9",97,"^:",25,"^1U",["^Q",["^1V",["^Q",[["^2@","~$c"]]]]]],"^C","~$rewrite-clj.node.protocols/assert-sexpr-count","^6","rewrite_clj/node/protocols.cljs","^:",25,"^1Z",["^Q",[["^2@","~$c"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",97,"^22","^24","^9",97,"^25",2,"^26",true,"^1U",["^Q",["^1V",["^Q",[["^2@","~$c"]]]]]],"~$sum-lengths",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",37,"^8",7,"^9",37,"^:",18,"^1U",["^Q",["^1V",["^Q",[["^2@"]]]]],"^1X","Sum up lengths of the given nodes."],"^C","~$rewrite-clj.node.protocols/sum-lengths","^6","rewrite_clj/node/protocols.cljs","^:",18,"^1Z",["^Q",[["^2@"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",37,"^22","^2;","^9",37,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["^2@"]]]]],"^1X","Sum up lengths of the given nodes."],"~$assert-single-sexpr",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",103,"^8",7,"^9",103,"^:",26,"^1U",["^Q",["^1V",["^Q",[["^2@"]]]]]],"^C","~$rewrite-clj.node.protocols/assert-single-sexpr","^6","rewrite_clj/node/protocols.cljs","^:",26,"^1Z",["^Q",[["^2@"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",103,"^22","^24","^9",103,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["^2@"]]]]]],"~$length",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",15,"^8",4,"^9",15,"^:",10,"^28","^29","^1X","Get number of characters for the string version of this node.","^1U",["^Q",["^1V",["^Q",[["~$_"]]]]]],"^28","^29","^C","~$rewrite-clj.node.protocols/length","^6","rewrite_clj/node/protocols.cljs","^:",10,"^1Z",["^Q",[["~$_"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",6,"^22","^2;","^9",15,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]],"^1X","Get number of characters for the string version of this node."],"~$NodeCoerceable",["^ ","^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",72,"^8",14,"^9",72,"^:",28,"^2G",true,"^1X","Protocol for values that can be coerced to nodes.","^2H",["^Q",["@interface"]],"^2I",["^ ","^2J",["^ ","~$coerce",[["~$_"]]]]],"^2G",true,"^C","~$rewrite-clj.node.protocols/NodeCoerceable","^6","rewrite_clj/node/protocols.cljs","^:",28,"^8",1,"^7",72,"^2I",["^ ","^2J",["^ ","^34",[["~$_"]]]],"^2K",null,"^9",72,"^2L","^2;","^2M",["^B",[]],"^1X","Protocol for values that can be coerced to nodes.","^2H",["^Q",["@interface"]]],"~$Node",["^ ","^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",6,"^8",14,"^9",6,"^:",18,"^2G",true,"^1X","Protocol for EDN/Clojure nodes.","^2H",["^Q",["@interface"]],"^2I",["^ ","^2J",["^ ","^27",[["~$_"]],"^2O",[["~$_"]],"^2Q",[["~$_"]],"^31",[["~$_"]],"^2U",[["~$_"]]]]],"^2G",true,"^C","^29","^6","rewrite_clj/node/protocols.cljs","^:",18,"^8",1,"^7",6,"^2I",["^ ","^2J",["^ ","^27",[["~$_"]],"^2O",[["~$_"]],"^2Q",[["~$_"]],"^31",[["~$_"]],"^2U",[["~$_"]]]],"^2K",null,"^9",6,"^2L","^2;","^2M",["^B",["^2N","~$rewrite-clj.node.comment/CommentNode"]],"^1X","Protocol for EDN/Clojure nodes.","^2H",["^Q",["@interface"]]],"^34",["^ ","^1T",null,"^5",["^ ","^6","rewrite_clj/node/protocols.cljs","^7",74,"^8",4,"^9",74,"^:",10,"^28","^35","^1X",null,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]]],"^28","^35","^C","~$rewrite-clj.node.protocols/coerce","^6","rewrite_clj/node/protocols.cljs","^:",10,"^1Z",["^Q",[["~$_"]]],"^1[",null,"^20",["^Q",[null,null]],"^8",1,"^21",false,"^7",72,"^22","^2;","^9",74,"^25",1,"^26",true,"^1U",["^Q",["^1V",["^Q",[["~$_"]]]]],"^1X",null]],"^O",["^ ","^J","^J"],"~:cljs.analyzer/constants",["^ ","^L",["^B",["~:unknown"]],"~:order",["^3:"]],"^T",["^ ","^M",["^B",[]]],"^U",["^ "],"^V",["^K","^J","^I"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^18",[["^3>","~:static-fns"],true,["^3>","~:elide-asserts"],false,["^3>","~:optimize-constants"],null,["^3>","^["],null,["^3>","~:external-config"],null,["^3>","~:tooling-config"],null,["^3>","~:emit-constants"],null,["^3>","~:load-tests"],null,["^3>","~:infer-externs"],true,["^3>","^11"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3>","~:fn-invoke-direct"],null,["^3>","~:source-map"],"/dev/null"]]]