["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.editz');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.zip.base');\ngoog.require('rewrite_clj.zip.move');\ngoog.require('rewrite_clj.zip.removez');\ngoog.require('rewrite_clj.zip.utils');\ngoog.require('rewrite_clj.zip.whitespace');\ngoog.require('rewrite_clj.node');\ngoog.require('clojure.zip');\n/**\n * Replace the node at the given location with one representing\n * the given value. (The value will be coerced to a node if\n * possible.)\n */\nrewrite_clj.zip.editz.replace = (function rewrite_clj$zip$editz$replace(zloc,value){\nreturn clojure.zip.replace(zloc,(rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1(value) : rewrite_clj.node.coerce.call(null,value)));\n});\n/**\n * Create s-expression from node, apply the function and create\n * node from the result.\n */\nrewrite_clj.zip.editz.edit_node = (function rewrite_clj$zip$editz$edit_node(node,f){\nvar G__30498 = (function (){var G__30499 = (rewrite_clj.node.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.sexpr.cljs$core$IFn$_invoke$arity$1(node) : rewrite_clj.node.sexpr.call(null,node));\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__30499) : f.call(null,G__30499));\n})();\nreturn (rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1(G__30498) : rewrite_clj.node.coerce.call(null,G__30498));\n});\n/**\n * Apply the given function to the s-expression at the given\n * location, using its result to replace the node there. (The\n * result will be coerced to a node if possible.)\n */\nrewrite_clj.zip.editz.edit = (function rewrite_clj$zip$editz$edit(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___30539 = arguments.length;\nvar i__4731__auto___30540 = (0);\nwhile(true){\nif((i__4731__auto___30540 < len__4730__auto___30539)){\nargs__4736__auto__.push((arguments[i__4731__auto___30540]));\n\nvar G__30541 = (i__4731__auto___30540 + (1));\ni__4731__auto___30540 = G__30541;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn rewrite_clj.zip.editz.edit.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nrewrite_clj.zip.editz.edit.cljs$core$IFn$_invoke$arity$variadic = (function (zloc,f,args){\nreturn clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic(zloc,rewrite_clj.zip.editz.edit_node,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (p1__30501_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,p1__30501_SHARP_,args);\n})], 0));\n});\n\nrewrite_clj.zip.editz.edit.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nrewrite_clj.zip.editz.edit.cljs$lang$applyTo = (function (seq30503){\nvar G__30504 = cljs.core.first(seq30503);\nvar seq30503__$1 = cljs.core.next(seq30503);\nvar G__30505 = cljs.core.first(seq30503__$1);\nvar seq30503__$2 = cljs.core.next(seq30503__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__30504,G__30505,seq30503__$2);\n});\n\n/**\n * Splice the given node, i.e. merge its children into the current one\n * (akin to Clojure's `unquote-splicing` macro: `~@...`).\n * - if the node is not one that can have children, no modification will\n *   be performed.\n * - if the node has no or only whitespace children, it will be removed.\n * - otherwise, splicing will be performed, moving the zipper to the first\n *   non-whitespace child afterwards.\n * \n */\nrewrite_clj.zip.editz.splice = (function rewrite_clj$zip$editz$splice(zloc){\nif(cljs.core.truth_(clojure.zip.branch_QMARK_(zloc))){\nvar temp__5455__auto__ = cljs.core.seq(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace_QMARK_,cljs.core.reverse(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace_QMARK_,clojure.zip.children(zloc)))));\nif(temp__5455__auto__){\nvar children = temp__5455__auto__;\nvar loc = rewrite_clj.zip.utils.remove_and_move_right(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.zip.insert_right,zloc,children));\nvar or__4131__auto__ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1(loc);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn loc;\n}\n} else {\nreturn rewrite_clj.zip.removez.remove(zloc);\n}\n} else {\nreturn zloc;\n}\n});\nrewrite_clj.zip.editz.edit_token = (function rewrite_clj$zip$editz$edit_token(zloc,str_fn){\nvar e = rewrite_clj.zip.base.sexpr(zloc);\nvar e_SINGLEQUOTE_ = ((typeof e === 'string')?(str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(e) : str_fn.call(null,e)):(((e instanceof cljs.core.Keyword))?cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(e),(function (){var G__30509 = cljs.core.name(e);\nreturn (str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(G__30509) : str_fn.call(null,G__30509));\n})()):(((e instanceof cljs.core.Symbol))?cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(e),(function (){var G__30510 = cljs.core.name(e);\nreturn (str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(G__30510) : str_fn.call(null,G__30510));\n})()):null)));\nreturn clojure.zip.replace(zloc,(rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1(e_SINGLEQUOTE_) : rewrite_clj.node.token_node.call(null,e_SINGLEQUOTE_)));\n});\nrewrite_clj.zip.editz.edit_multi_line = (function rewrite_clj$zip$editz$edit_multi_line(zloc,line_fn){\nvar n = cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(clojure.zip.node(zloc),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"lines\",\"lines\",-700165781)], null),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(line_fn,cljs.core.vec));\nreturn clojure.zip.replace(zloc,n);\n});\nrewrite_clj.zip.editz.prefix = (function rewrite_clj$zip$editz$prefix(zloc,s){\nvar G__30519 = rewrite_clj.zip.base.tag(zloc);\nvar G__30519__$1 = (((G__30519 instanceof cljs.core.Keyword))?G__30519.fqn:null);\nswitch (G__30519__$1) {\ncase \"token\":\nreturn rewrite_clj.zip.editz.edit_token(zloc,((function (G__30519,G__30519__$1){\nreturn (function (p1__30515_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__30515_SHARP_)].join('');\n});})(G__30519,G__30519__$1))\n);\n\nbreak;\ncase \"multi-line\":\nreturn rewrite_clj.zip.editz.edit_multi_line(zloc,((function (G__30519,G__30519__$1){\nreturn (function (lines){\nif(cljs.core.empty_QMARK_(lines)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);\n} else {\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(lines,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0)], null),((function (G__30519,G__30519__$1){\nreturn (function (p1__30516_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__30516_SHARP_)].join('');\n});})(G__30519,G__30519__$1))\n);\n}\n});})(G__30519,G__30519__$1))\n);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__30519__$1)].join('')));\n\n}\n});\nrewrite_clj.zip.editz.suffix = (function rewrite_clj$zip$editz$suffix(zloc,s){\nvar G__30524 = rewrite_clj.zip.base.tag(zloc);\nvar G__30524__$1 = (((G__30524 instanceof cljs.core.Keyword))?G__30524.fqn:null);\nswitch (G__30524__$1) {\ncase \"token\":\nreturn rewrite_clj.zip.editz.edit_token(zloc,((function (G__30524,G__30524__$1){\nreturn (function (p1__30522_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__30522_SHARP_),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');\n});})(G__30524,G__30524__$1))\n);\n\nbreak;\ncase \"multi-line\":\nreturn rewrite_clj.zip.editz.edit_multi_line(zloc,((function (G__30524,G__30524__$1){\nreturn (function (lines){\nif(cljs.core.empty_QMARK_(lines)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);\n} else {\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.butlast(lines),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(lines)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(''));\n}\n});})(G__30524,G__30524__$1))\n);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__30524__$1)].join('')));\n\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/editz.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$replace"]],"~:name","~$rewrite-clj.zip.editz","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$base","~$rewrite-clj.zip.base","~$rewrite-clj.zip.removez","^L","~$clojure.zip","^M","~$rewrite-clj.node","^N","~$u","~$rewrite-clj.zip.utils","~$r","^L","~$cljs.core","^P","~$ws","~$rewrite-clj.zip.whitespace","~$goog","^S","~$n","^N","~$m","~$rewrite-clj.zip.move","^R","^R","^T","^T","~$z","^M","^O","^O","^K","^K"],"~:seen",["^B",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^E",["^Z",["~:refer-clojure","~:exclude",["^C"]]],["^Z",["^V",["^K","~:as","^J"],["^T","^12","~$m"],["^L","^12","~$r"],["^O","^12","~$u"],["^R","^12","^Q"],["^N","^12","~$n"],["^M","^12","~$z"]]]]],"~:flags",["^ ","^V",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^S","^P","^K","^T","^L","^O","^R","^N","^M"]],"^G","^E","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/editz.cljs"],"~:compiled-at",1587374059521,"~:resource-name","rewrite_clj/zip/editz.cljs","~:warnings",[],"~:source","(ns rewrite-clj.zip.editz\n  (:refer-clojure :exclude [replace])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.removez :as r]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [rewrite-clj.node :as n]\n            [clojure.zip :as z]))\n\n;; ## In-Place Modification\n\n(defn replace\n  \"Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)\"\n  [zloc value]\n  (z/replace zloc (n/coerce value)))\n\n(defn- edit-node\n  \"Create s-expression from node, apply the function and create\n   node from the result.\"\n  [node f]\n  (-> (n/sexpr node)\n      (f)\n      (n/coerce)))\n\n(defn edit\n  \"Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)\"\n  [zloc f & args]\n  (z/edit zloc edit-node #(apply f % args)))\n\n;; ## Splice\n\n\n\n(defn splice\n  \"Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   \"\n  [zloc]\n  (if (z/branch? zloc)\n    (if-let [children (->> (z/children zloc)\n                           (drop-while n/whitespace?)\n                           (reverse)\n                           (drop-while n/whitespace?)\n                           (seq))]\n      (let [loc (->> (reduce z/insert-right zloc children)\n                     (u/remove-and-move-right))]\n        (or (ws/skip-whitespace loc) loc))\n      (r/remove zloc))\n    zloc))\n\n;; ## Prefix/Suffix\n\n(defn- edit-token\n  [zloc str-fn]\n  (let [e (base/sexpr zloc)\n        e' (cond (string? e) (str-fn e)\n                 (keyword? e) (keyword (namespace e) (str-fn (name e)))\n                 (symbol? e) (symbol (namespace e) (str-fn (name e))))]\n    (z/replace zloc (n/token-node e'))))\n\n(defn- edit-multi-line\n  [zloc line-fn]\n  (let [n (-> (z/node zloc)\n              (update-in [:lines] (comp line-fn vec)))]\n    (z/replace zloc n)))\n\n(defn prefix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str s %))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (update-in lines [0] #(str s %))))\n                     (edit-multi-line zloc ))))\n\n(defn suffix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str % s))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (concat (butlast lines) (str (last lines) s))))\n                     (edit-multi-line zloc))))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.zip.editz/replace","zloc","value","clojure.zip/replace","rewrite-clj.node/coerce","rewrite-clj.zip.editz/edit-node","node","f","rewrite-clj.node/sexpr","G__30499","G__30498","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.editz/edit","seq30503","G__30504","cljs.core/first","cljs.core/next","G__30505","self__4717__auto__","args","p1__30501#","clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","rewrite-clj.zip.editz/splice","clojure.zip/branch?","temp__5455__auto__","children","clojure.zip/children","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node/whitespace?","cljs.core/reverse","cljs.core/seq","loc","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","clojure.zip/insert-right","rewrite-clj.zip.utils/remove-and-move-right","or__4131__auto__","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1","rewrite-clj.zip.removez/remove","rewrite-clj.zip.editz/edit-token","str-fn","e","rewrite-clj.zip.base/sexpr","e'","cljs.core/Keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","G__30509","cljs.core/name","cljs.core/Symbol","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","G__30510","rewrite-clj.node/token-node","rewrite-clj.zip.editz/edit-multi-line","line-fn","n","clojure.zip/node","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","rewrite-clj.zip.editz/prefix","s","G__30519","js/Error","rewrite-clj.zip.base/tag","p1__30515#","lines","cljs.core/empty?","p1__30516#","rewrite-clj.zip.editz/suffix","G__30524","p1__30522#","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/butlast","cljs.core/last"]]],"~:cache-keys",["~#cmap",[["^17","rewrite_clj/node/token.cljs"],[1587365556840,"^S","^P","~$rewrite-clj.node.protocols"],["~:macro","^P"],[1587365553000],["^17","cljs/tools/reader/impl/utils.cljs"],[1584609213925,"^S","^P","~$clojure.string","~$goog.string"],["^17","goog/math/math.js"],[1584607223013,"^S","~$goog.array","~$goog.asserts"],["^17","rewrite_clj/parser/core.cljs"],[1587365556840,"^S","^P","^N","~$rewrite-clj.reader","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","~$cljs.tools.reader.reader-types"],["^17","rewrite_clj/parser/string.cljs"],[1587365556840,"^S","^P","^N","^1J","^1G"],["^17","goog/array/array.js"],[1584607223013,"^S","^1I"],["^1E","^1O"],[1584609213000],["^17","rewrite_clj/zip/move.cljs"],[1587365556840,"^S","^P","^R","^M"],["^17","goog/debug/error.js"],[1584607223013,"^S"],["^17","rewrite_clj/zip/editz.cljs"],[1587365556840,"^S","^P","^K","^T","^L","^O","^R","^N","^M"],["^17","goog/dom/nodetype.js"],[1584607223013,"^S"],["^17","cljs/tools/reader/impl/inspect.cljs"],[1584609213925,"^S","^P"],["^17","cljs/tools/reader.cljs"],[1584609213925,"^S","^P","^1O","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^1H","^1G","~$goog.string.StringBuffer"],["^17","rewrite_clj/node/forms.cljs"],[1587365556840,"^S","^P","^1D"],["^17","rewrite_clj/zip/utils.cljs"],[1587365556840,"^S","^P","^M"],["^17","goog/object/object.js"],[1584607223013,"^S"],"~:SHADOW-TIMESTAMP",[1587365557000,1587365553000],["^17","goog/math/long.js"],[1584607223013,"^S","^1I","~$goog.reflect"],["^17","rewrite_clj/node/reader_macro.cljs"],[1587365556840,"^S","^P","^1D","~$rewrite-clj.node.whitespace"],["^17","goog/functions/functions.js"],[1584607223013,"^S"],["^17","clojure/walk.cljs"],[1587365553008,"^S","^P"],["^17","goog/structs/map.js"],[1584607223013,"^S","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^17","rewrite_clj/node/meta.cljs"],[1587365556840,"^S","^P","^1D","^1V"],["^17","rewrite_clj/node/stringz.cljs"],[1587365556840,"^S","^P","^1D","~$cljs.tools.reader","^1F"],["^17","rewrite_clj/node/comment.cljs"],[1587365556840,"^S","^P","^1D"],["^17","rewrite_clj/node/keyword.cljs"],[1587365556840,"^S","^P","^1D"],["^17","goog/asserts/asserts.js"],[1584607223013,"^S","~$goog.debug.Error","~$goog.dom.NodeType","^1G"],["^17","goog/uri/uri.js"],[1584607223013,"^S","^1H","^1I","^1G","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^17","rewrite_clj/node/protocols.cljs"],[1587365556840,"^S","^P","^1F"],["^17","rewrite_clj/node/seq.cljs"],[1587365556840,"^S","^P","^1D"],["^17","rewrite_clj/node/uneval.cljs"],[1587365556840,"^S","^P","^1D"],["^17","goog/base.js"],[1584607223013],["^17","goog/structs/structs.js"],[1584607223013,"^S","^1H","^1Y"],["^17","cljs/tools/reader/impl/errors.cljs"],[1584609213925,"^S","^P","^1O","^1F","~$cljs.tools.reader.impl.inspect"],["^17","rewrite_clj/node/whitespace.cljs"],[1587365556840,"^S","^P","^1D"],["^17","rewrite_clj/node/coercer.cljs"],[1587365556840,"^S","^P","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^1D","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^1V"],["^17","clojure/string.cljs"],[1587365553008,"^S","^P","^1G","^1S"],["^17","rewrite_clj/parser.cljs"],[1587365556840,"^S","^P","~$rewrite-clj.parser.core","^N","^1J"],["^17","rewrite_clj/parser/keyword.cljs"],[1587365556840,"^S","^P","^N","^1O","^1J"],["^17","rewrite_clj/parser/token.cljs"],[1587365556840,"^S","^P","^N","^1J","^1G"],["^17","goog/string/string.js"],[1584607223013,"^S"],["^17","goog/reflect/reflect.js"],[1584607223013,"^S"],["^17","rewrite_clj/node/fn.cljs"],[1587365556840,"^S","^P","^1D","~$clojure.walk"],["^17","rewrite_clj/node.cljs"],[1587365556840,"^S","^P","~$rewrite-clj.node.coercer","^1D","^29","^2@","^1V","^2A","^27","^28","^2=","^2;","^2?","^2:","^2<","^2>"],["^17","rewrite_clj/zip/removez.cljs"],[1587365556840,"^S","^P","^T","^O","^R","^M"],["^17","clojure/zip.cljs"],[1587365553008,"^S","^P"],["^17","goog/string/stringbuffer.js"],[1584607223013,"^S"],["^17","cljs/tools/reader/reader_types.cljs"],[1584609213925,"^S","^P","^1P","^1G","^1S"],["^17","goog/iter/iter.js"],[1584607223013,"^S","^1H","^1I","~$goog.functions","~$goog.math"],["^17","rewrite_clj/reader.cljs"],[1587365556840,"^S","^P","^1Z","^1O","^1Q","^1G","^1D"],["^17","rewrite_clj/node/quote.cljs"],[1587365556840,"^S","^P","^1D"],["^17","cljs/tools/reader/impl/commons.cljs"],[1584609213925,"^S","^P","^1R","^1O","^1P"],["^17","cljs/core.cljs"],[1587365553008,"~$goog.math.Long","~$goog.math.Integer","^1G","^1Y","^1H","~$goog.Uri","^1S"],["^17","goog/math/integer.js"],[1584607223013,"^S"],["^17","goog/uri/utils.js"],[1584607223013,"^S","^1H","^1I","^1G"],["^17","rewrite_clj/zip/base.cljs"],[1587365556840,"^S","^P","^N","~$rewrite-clj.parser","^R","^M"],["^17","rewrite_clj/zip/whitespace.cljs"],[1587365556840,"^S","^P","^N","^M"],["^17","rewrite_clj/parser/whitespace.cljs"],[1587365556840,"^S","^P","^N","^1J"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",["^C"]],"^D","^E","^H",null,"^I",["^ ","^J","^K","^L","^L","^M","^M","^N","^N","~$u","^O","~$r","^L","^P","^P","^Q","^R","^S","^S","~$n","^N","~$m","^T","^R","^R","^T","^T","~$z","^M","^O","^O","^K","^K"],"^U",["^B",["^V"]],"~:shadow/js-access-global",["^B",["Error"]],"^W",null,"~:defs",["^ ","^C",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",13,"^8",7,"^9",13,"^:",14,"~:arglists",["^Z",["~$quote",["^Z",[["~$zloc","~$value"]]]]],"~:doc","Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)"],"^D","~$rewrite-clj.zip.editz/replace","^6","rewrite_clj/zip/editz.cljs","^:",14,"~:method-params",["^Z",[["^2Q","^2R"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^8",1,"~:variadic?",false,"^7",13,"~:ret-tag",["^B",["~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^9",13,"~:max-fixed-arity",2,"~:fn-var",true,"^2O",["^Z",["^2P",["^Z",[["^2Q","^2R"]]]]],"^2S","Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)"],"~$edit-node",["^ ","^2N",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",20,"^8",8,"^9",20,"^:",17,"~:private",true,"^2O",["^Z",["^2P",["^Z",[["~$node","~$f"]]]]],"^2S","Create s-expression from node, apply the function and create\n   node from the result."],"^34",true,"^D","~$rewrite-clj.zip.editz/edit-node","^6","rewrite_clj/zip/editz.cljs","^:",17,"^2U",["^Z",[["^35","~$f"]]],"^2V",null,"^2W",["^Z",[null,null]],"^8",1,"^2X",false,"^7",20,"^2Y","~$any","^9",20,"^31",2,"^32",true,"^2O",["^Z",["^2P",["^Z",[["^35","~$f"]]]]],"^2S","Create s-expression from node, apply the function and create\n   node from the result."],"~$edit",["^ ","^2N",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",28,"^8",7,"^9",28,"^:",11,"^2O",["^Z",["^2P",["^Z",[["^2Q","~$f","~$&","~$args"]]]]],"^2S","Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)","~:top-fn",["^ ","^2X",true,"~:fixed-arity",2,"^31",2,"^2U",[["^Z",["^2Q","~$f","^39"]]],"^2O",["^Z",[["^2Q","~$f","~$&","^39"]]],"^2W",["^Z",[null]]]],"^D","~$rewrite-clj.zip.editz/edit","^6","rewrite_clj/zip/editz.cljs","^:",11,"^3:",["^ ","^2X",true,"^3;",2,"^31",2,"^2U",[["^Z",["^2Q","~$f","^39"]]],"^2O",["^Z",[["^2Q","~$f","~$&","^39"]]],"^2W",["^Z",[null]]],"^2U",[["^Z",["^2Q","~$f","^39"]]],"^2V",null,"^3;",2,"^2W",["^Z",[null]],"^8",1,"^2X",true,"~:methods",[["^ ","^3;",2,"^2X",true,"~:tag",["^B",["^2Z","^2[","^30"]]]],"^7",28,"^2Y","^37","^9",28,"^31",2,"^32",true,"^2O",["^Z",[["^2Q","~$f","~$&","^39"]]],"^2S","Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)"],"~$splice",["^ ","^2N",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",39,"^8",7,"^9",39,"^:",13,"^2O",["^Z",["^2P",["^Z",[["^2Q"]]]]],"^2S","Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   "],"^D","~$rewrite-clj.zip.editz/splice","^6","rewrite_clj/zip/editz.cljs","^:",13,"^2U",["^Z",[["^2Q"]]],"^2V",null,"^2W",["^Z",[null,null]],"^8",1,"^2X",false,"^7",39,"^2Y",["^B",[null,"^2Z","^37","^2[","^30"]],"^9",39,"^31",1,"^32",true,"^2O",["^Z",["^2P",["^Z",[["^2Q"]]]]],"^2S","Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   "],"~$edit-token",["^ ","^2N",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",63,"^8",8,"^9",63,"^:",18,"^34",true,"^2O",["^Z",["^2P",["^Z",[["^2Q","~$str-fn"]]]]]],"^34",true,"^D","~$rewrite-clj.zip.editz/edit-token","^6","rewrite_clj/zip/editz.cljs","^:",18,"^2U",["^Z",[["^2Q","^3B"]]],"^2V",null,"^2W",["^Z",[null,null]],"^8",1,"^2X",false,"^7",63,"^2Y",["^B",["^2Z","^2[","^30"]],"^9",63,"^31",2,"^32",true,"^2O",["^Z",["^2P",["^Z",[["^2Q","^3B"]]]]]],"~$edit-multi-line",["^ ","^2N",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",71,"^8",8,"^9",71,"^:",23,"^34",true,"^2O",["^Z",["^2P",["^Z",[["^2Q","~$line-fn"]]]]]],"^34",true,"^D","~$rewrite-clj.zip.editz/edit-multi-line","^6","rewrite_clj/zip/editz.cljs","^:",23,"^2U",["^Z",[["^2Q","^3E"]]],"^2V",null,"^2W",["^Z",[null,null]],"^8",1,"^2X",false,"^7",71,"^2Y",["^B",["^2Z","^2[","^30"]],"^9",71,"^31",2,"^32",true,"^2O",["^Z",["^2P",["^Z",[["^2Q","^3E"]]]]]],"~$prefix",["^ ","^2N",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",77,"^8",7,"^9",77,"^:",13,"^2O",["^Z",["^2P",["^Z",[["^2Q","~$s"]]]]]],"^D","~$rewrite-clj.zip.editz/prefix","^6","rewrite_clj/zip/editz.cljs","^:",13,"^2U",["^Z",[["^2Q","~$s"]]],"^2V",null,"^2W",["^Z",[null,null]],"^8",1,"^2X",false,"^7",77,"^9",77,"^31",2,"^32",true,"^2O",["^Z",["^2P",["^Z",[["^2Q","~$s"]]]]]],"~$suffix",["^ ","^2N",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",87,"^8",7,"^9",87,"^:",13,"^2O",["^Z",["^2P",["^Z",[["^2Q","~$s"]]]]]],"^D","~$rewrite-clj.zip.editz/suffix","^6","rewrite_clj/zip/editz.cljs","^:",13,"^2U",["^Z",[["^2Q","~$s"]]],"^2V",null,"^2W",["^Z",[null,null]],"^8",1,"^2X",false,"^7",87,"^9",87,"^31",2,"^32",true,"^2O",["^Z",["^2P",["^Z",[["^2Q","~$s"]]]]]]],"^X",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^U",["^B",["~:lines"]],"~:order",["^3L"]],"^13",["^ ","^V",["^B",[]]],"^14",["^ "],"^15",["^S","^P","^K","^T","^L","^O","^R","^N","^M"]],"^G","^E","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^3P","~:static-fns"],true,["^3P","~:elide-asserts"],false,["^3P","~:optimize-constants"],null,["^3P","^1:"],null,["^3P","~:external-config"],null,["^3P","~:tooling-config"],null,["^3P","~:emit-constants"],null,["^3P","~:load-tests"],null,["^3P","~:infer-externs"],true,["^3P","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3P","~:fn-invoke-direct"],null,["^3P","~:source-map"],"/dev/null"]]]