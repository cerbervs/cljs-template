["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.editz');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.zip.base');\ngoog.require('rewrite_clj.zip.move');\ngoog.require('rewrite_clj.zip.removez');\ngoog.require('rewrite_clj.zip.utils');\ngoog.require('rewrite_clj.zip.whitespace');\ngoog.require('rewrite_clj.node');\ngoog.require('clojure.zip');\n/**\n * Replace the node at the given location with one representing\n * the given value. (The value will be coerced to a node if\n * possible.)\n */\nrewrite_clj.zip.editz.replace = (function rewrite_clj$zip$editz$replace(zloc,value){\nreturn clojure.zip.replace(zloc,(rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1(value) : rewrite_clj.node.coerce.call(null,value)));\n});\n/**\n * Create s-expression from node, apply the function and create\n * node from the result.\n */\nrewrite_clj.zip.editz.edit_node = (function rewrite_clj$zip$editz$edit_node(node,f){\nvar G__36276 = (function (){var G__36277 = (rewrite_clj.node.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.sexpr.cljs$core$IFn$_invoke$arity$1(node) : rewrite_clj.node.sexpr.call(null,node));\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__36277) : f.call(null,G__36277));\n})();\nreturn (rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.coerce.cljs$core$IFn$_invoke$arity$1(G__36276) : rewrite_clj.node.coerce.call(null,G__36276));\n});\n/**\n * Apply the given function to the s-expression at the given\n * location, using its result to replace the node there. (The\n * result will be coerced to a node if possible.)\n */\nrewrite_clj.zip.editz.edit = (function rewrite_clj$zip$editz$edit(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___36322 = arguments.length;\nvar i__4790__auto___36323 = (0);\nwhile(true){\nif((i__4790__auto___36323 < len__4789__auto___36322)){\nargs__4795__auto__.push((arguments[i__4790__auto___36323]));\n\nvar G__36324 = (i__4790__auto___36323 + (1));\ni__4790__auto___36323 = G__36324;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((2) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((2)),(0),null)):null);\nreturn rewrite_clj.zip.editz.edit.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4796__auto__);\n});\n\n(rewrite_clj.zip.editz.edit.cljs$core$IFn$_invoke$arity$variadic = (function (zloc,f,args){\nreturn clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic(zloc,rewrite_clj.zip.editz.edit_node,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (p1__36278_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,p1__36278_SHARP_,args);\n})], 0));\n}));\n\n(rewrite_clj.zip.editz.edit.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(rewrite_clj.zip.editz.edit.cljs$lang$applyTo = (function (seq36279){\nvar G__36280 = cljs.core.first(seq36279);\nvar seq36279__$1 = cljs.core.next(seq36279);\nvar G__36281 = cljs.core.first(seq36279__$1);\nvar seq36279__$2 = cljs.core.next(seq36279__$1);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__36280,G__36281,seq36279__$2);\n}));\n\n/**\n * Splice the given node, i.e. merge its children into the current one\n * (akin to Clojure's `unquote-splicing` macro: `~@...`).\n * - if the node is not one that can have children, no modification will\n *   be performed.\n * - if the node has no or only whitespace children, it will be removed.\n * - otherwise, splicing will be performed, moving the zipper to the first\n *   non-whitespace child afterwards.\n * \n */\nrewrite_clj.zip.editz.splice = (function rewrite_clj$zip$editz$splice(zloc){\nif(cljs.core.truth_(clojure.zip.branch_QMARK_(zloc))){\nvar temp__5733__auto__ = cljs.core.seq(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace_QMARK_,cljs.core.reverse(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace_QMARK_,clojure.zip.children(zloc)))));\nif(temp__5733__auto__){\nvar children = temp__5733__auto__;\nvar loc = rewrite_clj.zip.utils.remove_and_move_right(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.zip.insert_right,zloc,children));\nvar or__4185__auto__ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1(loc);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn loc;\n}\n} else {\nreturn rewrite_clj.zip.removez.remove(zloc);\n}\n} else {\nreturn zloc;\n}\n});\nrewrite_clj.zip.editz.edit_token = (function rewrite_clj$zip$editz$edit_token(zloc,str_fn){\nvar e = rewrite_clj.zip.base.sexpr(zloc);\nvar e_SINGLEQUOTE_ = ((typeof e === 'string')?(str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(e) : str_fn.call(null,e)):(((e instanceof cljs.core.Keyword))?cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(e),(function (){var G__36289 = cljs.core.name(e);\nreturn (str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(G__36289) : str_fn.call(null,G__36289));\n})()):(((e instanceof cljs.core.Symbol))?cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(e),(function (){var G__36292 = cljs.core.name(e);\nreturn (str_fn.cljs$core$IFn$_invoke$arity$1 ? str_fn.cljs$core$IFn$_invoke$arity$1(G__36292) : str_fn.call(null,G__36292));\n})()):null)));\nreturn clojure.zip.replace(zloc,(rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1(e_SINGLEQUOTE_) : rewrite_clj.node.token_node.call(null,e_SINGLEQUOTE_)));\n});\nrewrite_clj.zip.editz.edit_multi_line = (function rewrite_clj$zip$editz$edit_multi_line(zloc,line_fn){\nvar n = cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(clojure.zip.node(zloc),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"lines\",\"lines\",-700165781)], null),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(line_fn,cljs.core.vec));\nreturn clojure.zip.replace(zloc,n);\n});\nrewrite_clj.zip.editz.prefix = (function rewrite_clj$zip$editz$prefix(zloc,s){\nvar G__36311 = rewrite_clj.zip.base.tag(zloc);\nvar G__36311__$1 = (((G__36311 instanceof cljs.core.Keyword))?G__36311.fqn:null);\nswitch (G__36311__$1) {\ncase \"token\":\nreturn rewrite_clj.zip.editz.edit_token(zloc,(function (p1__36304_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__36304_SHARP_)].join('');\n}));\n\nbreak;\ncase \"multi-line\":\nreturn rewrite_clj.zip.editz.edit_multi_line(zloc,(function (lines){\nif(cljs.core.empty_QMARK_(lines)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);\n} else {\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(lines,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0)], null),(function (p1__36305_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__36305_SHARP_)].join('');\n}));\n}\n}));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__36311__$1)].join('')));\n\n}\n});\nrewrite_clj.zip.editz.suffix = (function rewrite_clj$zip$editz$suffix(zloc,s){\nvar G__36317 = rewrite_clj.zip.base.tag(zloc);\nvar G__36317__$1 = (((G__36317 instanceof cljs.core.Keyword))?G__36317.fqn:null);\nswitch (G__36317__$1) {\ncase \"token\":\nreturn rewrite_clj.zip.editz.edit_token(zloc,(function (p1__36314_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__36314_SHARP_),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');\n}));\n\nbreak;\ncase \"multi-line\":\nreturn rewrite_clj.zip.editz.edit_multi_line(zloc,(function (lines){\nif(cljs.core.empty_QMARK_(lines)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);\n} else {\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.butlast(lines),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(lines)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(''));\n}\n}));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__36317__$1)].join('')));\n\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/editz.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$replace"]],"~:name","~$rewrite-clj.zip.editz","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$base","~$rewrite-clj.zip.base","~$rewrite-clj.zip.removez","^N","~$clojure.zip","^O","~$rewrite-clj.node","^P","~$u","~$rewrite-clj.zip.utils","~$r","^N","~$cljs.core","^R","~$ws","~$rewrite-clj.zip.whitespace","~$goog","^U","~$n","^P","~$m","~$rewrite-clj.zip.move","^T","^T","^V","^V","~$z","^O","^Q","^Q","^M","^M"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^G",["^10",["~:refer-clojure","~:exclude",["^E"]]],["^10",["^X",["^M","~:as","^L"],["^V","^14","~$m"],["^N","^14","~$r"],["^Q","^14","~$u"],["^T","^14","^S"],["^P","^14","~$n"],["^O","^14","~$z"]]]]],"~:flags",["^ ","^X",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^U","^R","^M","^V","^N","^Q","^T","^P","^O"]],"^I","^G","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/editz.cljs"],"~:compiled-at",1611071561686,"~:resource-name","rewrite_clj/zip/editz.cljs","~:warnings",[],"~:source","(ns rewrite-clj.zip.editz\n  (:refer-clojure :exclude [replace])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.removez :as r]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [rewrite-clj.node :as n]\n            [clojure.zip :as z]))\n\n;; ## In-Place Modification\n\n(defn replace\n  \"Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)\"\n  [zloc value]\n  (z/replace zloc (n/coerce value)))\n\n(defn- edit-node\n  \"Create s-expression from node, apply the function and create\n   node from the result.\"\n  [node f]\n  (-> (n/sexpr node)\n      (f)\n      (n/coerce)))\n\n(defn edit\n  \"Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)\"\n  [zloc f & args]\n  (z/edit zloc edit-node #(apply f % args)))\n\n;; ## Splice\n\n\n\n(defn splice\n  \"Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   \"\n  [zloc]\n  (if (z/branch? zloc)\n    (if-let [children (->> (z/children zloc)\n                           (drop-while n/whitespace?)\n                           (reverse)\n                           (drop-while n/whitespace?)\n                           (seq))]\n      (let [loc (->> (reduce z/insert-right zloc children)\n                     (u/remove-and-move-right))]\n        (or (ws/skip-whitespace loc) loc))\n      (r/remove zloc))\n    zloc))\n\n;; ## Prefix/Suffix\n\n(defn- edit-token\n  [zloc str-fn]\n  (let [e (base/sexpr zloc)\n        e' (cond (string? e) (str-fn e)\n                 (keyword? e) (keyword (namespace e) (str-fn (name e)))\n                 (symbol? e) (symbol (namespace e) (str-fn (name e))))]\n    (z/replace zloc (n/token-node e'))))\n\n(defn- edit-multi-line\n  [zloc line-fn]\n  (let [n (-> (z/node zloc)\n              (update-in [:lines] (comp line-fn vec)))]\n    (z/replace zloc n)))\n\n(defn prefix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str s %))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (update-in lines [0] #(str s %))))\n                     (edit-multi-line zloc ))))\n\n(defn suffix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str % s))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (concat (butlast lines) (str (last lines) s))))\n                     (edit-multi-line zloc))))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.zip.editz/replace","zloc","value","clojure.zip/replace","rewrite-clj.node/coerce","rewrite-clj.zip.editz/edit-node","node","f","rewrite-clj.node/sexpr","G__36277","G__36276","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.editz/edit","seq36279","G__36280","cljs.core/first","cljs.core/next","G__36281","self__4776__auto__","args","p1__36278#","clojure.zip.edit","cljs.core.apply","rewrite-clj.zip.editz/splice","clojure.zip/branch?","temp__5733__auto__","children","clojure.zip/children","cljs.core.drop_while","rewrite-clj.node/whitespace?","cljs.core/reverse","cljs.core/seq","loc","cljs.core.reduce","clojure.zip/insert-right","rewrite-clj.zip.utils/remove-and-move-right","or__4185__auto__","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.zip.removez/remove","rewrite-clj.zip.editz/edit-token","str-fn","e","rewrite-clj.zip.base/sexpr","e'","cljs.core/Keyword","cljs.core.keyword","cljs.core/namespace","G__36289","cljs.core/name","cljs.core/Symbol","cljs.core.symbol","G__36292","rewrite-clj.node/token-node","rewrite-clj.zip.editz/edit-multi-line","line-fn","n","clojure.zip/node","cljs.core.update_in","cljs.core.comp","cljs.core/vec","rewrite-clj.zip.editz/prefix","s","G__36311","js/Error","rewrite-clj.zip.base/tag","p1__36304#","lines","cljs.core/empty?","p1__36305#","rewrite-clj.zip.editz/suffix","G__36317","p1__36314#","cljs.core.concat","cljs.core/butlast","cljs.core/last"]],"~:used-vars",["^D",["~$rewrite-clj.zip.editz/edit-node","~$rewrite-clj.zip.editz/edit-token","~$clojure.zip/branch?","~$cljs.core/apply","~$cljs.core/last","~$rewrite-clj.zip.editz/prefix","~$clojure.zip/edit","~$cljs.core/concat","~$rewrite-clj.zip.editz/edit","~$cljs.core/empty?","~$rewrite-clj.zip.editz/edit-multi-line","~$rewrite-clj.node/token-node","~$rewrite-clj.node/coerce","~$rewrite-clj.zip.removez/remove","~$rewrite-clj.zip.editz/replace","~$rewrite-clj.zip.editz/splice","~$clojure.zip/replace","~$cljs.core/butlast","~$cljs.core/update-in","~$js/Error","~$rewrite-clj.zip.editz/suffix"]]],"~:cache-keys",["~#cmap",[["^19","goog/dom/tagname.js"],[1611071510313,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^U","~$goog.dom.HtmlElement"]]],["^19","rewrite_clj/node/token.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","~$rewrite-clj.node.protocols"]]],["^19","cljs/tools/reader/impl/utils.cljs"],[1611071507100,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","~$clojure.string","~$goog.string"]]],["^19","goog/math/math.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","~$goog.array","~$goog.asserts"]]],["^19","rewrite_clj/parser/core.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^P","~$rewrite-clj.reader","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","~$cljs.tools.reader.reader-types"]]],["^19","rewrite_clj/parser/string.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^P","^2:","^27"]]],["^19","goog/html/trustedtypes.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","goog/labs/useragent/browser.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^28","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^19","goog/html/safeurl.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2B"]]],["^19","goog/array/array.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29"]]],["^19","rewrite_clj/zip/move.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^T","^O"]]],["^19","goog/debug/error.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","rewrite_clj/zip/editz.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^M","^V","^N","^Q","^T","^P","^O"]]],["^19","goog/dom/nodetype.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","cljs/tools/reader/impl/inspect.cljs"],[1611071507100,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R"]]],["^19","cljs/tools/reader.cljs"],[1611071507100,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^2?","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^28","^27","~$goog.string.StringBuffer"]]],["^19","rewrite_clj/node/forms.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25"]]],["^19","goog/string/typedstring.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","rewrite_clj/zip/utils.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^O"]]],["^19","goog/object/object.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","goog/dom/asserts.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29"]]],"~:SHADOW-TIMESTAMP",[1611071515000,1611071515000,1611071513000],["^19","goog/math/long.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29","~$goog.reflect"]]],["^19","rewrite_clj/node/reader_macro.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25","~$rewrite-clj.node.whitespace"]]],["^19","goog/html/trustedresourceurl.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29","~$goog.html.trustedtypes","^2E","^2F","^2G","^2H"]]],["^19","goog/string/internal.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","goog/functions/functions.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","goog/html/safestyle.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^28","^29","~$goog.html.SafeUrl","^2G","^2H","^2B"]]],["^19","goog/dom/safe.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2Q","^2D","~$goog.html.uncheckedconversions","^2G","^2B"]]],["^19","clojure/walk.cljs"],[1611071513180,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R"]]],["^19","goog/structs/map.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^19","rewrite_clj/node/meta.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25","^2O"]]],["^19","goog/html/safehtml.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^28","^29","~$goog.dom.TagName","~$goog.dom.tags","^2U","^2V","~$goog.html.SafeStyleSheet","^2Q","^2D","^2P","^2E","^2F","~$goog.labs.userAgent.browser","^2A","^2G","^2H","^2B"]]],["^19","goog/dom/tags.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^2A"]]],["^19","rewrite_clj/node/stringz.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25","~$cljs.tools.reader","^26"]]],["^19","rewrite_clj/node/comment.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25"]]],["^19","rewrite_clj/node/keyword.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25"]]],["^19","goog/asserts/asserts.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^28","^29","^27","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","goog/i18n/bidi.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","rewrite_clj/node/protocols.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^26"]]],["^19","rewrite_clj/node/seq.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25"]]],["^19","rewrite_clj/node/uneval.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25"]]],["^19","goog/fs/url.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","goog/base.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",[]]],["^19","goog/structs/structs.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^28","^2A"]]],["^19","cljs/tools/reader/impl/errors.cljs"],[1611071507100,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^2?","^26","~$cljs.tools.reader.impl.inspect"]]],["^19","rewrite_clj/node/whitespace.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25"]]],["^19","rewrite_clj/node/coercer.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^25","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^2O"]]],["^19","clojure/string.cljs"],[1611071513180,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^27","^2L"]]],["^19","rewrite_clj/parser.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","~$rewrite-clj.parser.core","^P","^2:"]]],["^19","rewrite_clj/parser/keyword.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^P","^2?","^2:"]]],["^19","rewrite_clj/parser/token.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^P","^2:","^27"]]],["^19","goog/string/string.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","~$goog.dom.safe","^2W","^2G","^2B"]]],["^19","goog/reflect/reflect.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","rewrite_clj/node/fn.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25","~$clojure.walk"]]],["^19","goog/labs/useragent/util.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^2B"]]],["^19","rewrite_clj/node.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","~$rewrite-clj.node.coercer","^25","^3=","^3D","^2O","^3E","^3;","^3<","^3A","^3?","^3C","^3>","^3@","^3B"]]],["^19","rewrite_clj/zip/removez.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^V","^Q","^T","^O"]]],["^19","clojure/zip.cljs"],[1611071513180,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R"]]],["^19","goog/string/stringbuffer.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","cljs/tools/reader/reader_types.cljs"],[1611071507100,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^2I","^27","^2L"]]],["^19","goog/iter/iter.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^28","^29","^2S","~$goog.math"]]],["^19","goog/html/uncheckedconversions.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29","^2T","^2U","^2V","^30","^2Q","^2D","^2G","^2B"]]],["^19","rewrite_clj/reader.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^32","^2?","^2J","^27","^25"]]],["^19","rewrite_clj/node/quote.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^25"]]],["^19","cljs/tools/reader/impl/commons.cljs"],[1611071507100,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^2K","^2?","^2I"]]],["^19","goog/dom/htmlelement.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U"]]],["^19","cljs/core.cljs"],[1611071513180,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","~$goog.math.Long","~$goog.math.Integer","^27","^2A","^28","~$goog.Uri","^2L"]]],["^19","goog/html/safescript.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29","^2P","^2G","^2H"]]],["^19","goog/html/safestylesheet.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^28","^29","^2V","^2A","^2G","^2H","^2B"]]],["^19","goog/math/integer.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^2N"]]],["^19","goog/uri/utils.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^28","^29","^27"]]],["^19","goog/string/const.js"],[1611071510313,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^29","^2H"]]],["^19","rewrite_clj/zip/base.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^P","~$rewrite-clj.parser","^T","^O"]]],["^19","rewrite_clj/zip/whitespace.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^P","^O"]]],["^19","rewrite_clj/parser/whitespace.cljs"],[1611071514323,"^20",["^ ","^21",null,"^22",["^D",[]],"^23",["^U","^R","^P","^2:"]]]]],"~:clj-info",["^ ","jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1611071506000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1611071507000,"jar:file:/home/mark/.m2/repository/binaryage/devtools/1.0.0/devtools-1.0.0.jar!/devtools/defaults.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1611071513000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",["^E"]],"^F","^G","^J",null,"^K",["^ ","^L","^M","^N","^N","^O","^O","^P","^P","~$u","^Q","~$r","^N","^R","^R","^S","^T","^U","^U","~$n","^P","~$m","^V","^T","^T","^V","^V","~$z","^O","^Q","^Q","^M","^M"],"^W",["^D",["^X"]],"~:shadow/js-access-global",["^D",["Error"]],"^Y",null,"~:defs",["^ ","^E",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",13,"^8",7,"^9",13,"^:",14,"~:arglists",["^10",["~$quote",["^10",[["~$zloc","~$value"]]]]],"~:doc","Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)"],"^F","^1S","^6","rewrite_clj/zip/editz.cljs","^:",14,"~:method-params",["^10",[["^4D","^4E"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",13,"~:ret-tag",["^D",["~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^9",13,"~:max-fixed-arity",2,"~:fn-var",true,"^4B",["^10",["^4C",["^10",[["^4D","^4E"]]]]],"^4F","Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)"],"~$edit-node",["^ ","^4A",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",20,"^8",8,"^9",20,"^:",17,"~:private",true,"^4B",["^10",["^4C",["^10",[["~$node","~$f"]]]]],"^4F","Create s-expression from node, apply the function and create\n   node from the result."],"^4R",true,"^F","^1E","^6","rewrite_clj/zip/editz.cljs","^:",17,"^4G",["^10",[["^4S","~$f"]]],"^4H",null,"^4I",["^10",[null,null]],"^8",1,"^4J",false,"^7",20,"^4K","~$any","^9",20,"^4O",2,"^4P",true,"^4B",["^10",["^4C",["^10",[["^4S","~$f"]]]]],"^4F","Create s-expression from node, apply the function and create\n   node from the result."],"~$edit",["^ ","^4A",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",28,"^8",7,"^9",28,"^:",11,"^4B",["^10",["^4C",["^10",[["^4D","~$f","~$&","~$args"]]]]],"^4F","Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)","~:top-fn",["^ ","^4J",true,"~:fixed-arity",2,"^4O",2,"^4G",[["^10",["^4D","~$f","^4V"]]],"^4B",["^10",[["^4D","~$f","~$&","^4V"]]],"^4I",["^10",[null]]]],"^F","^1M","^6","rewrite_clj/zip/editz.cljs","^:",11,"^4W",["^ ","^4J",true,"^4X",2,"^4O",2,"^4G",[["^10",["^4D","~$f","^4V"]]],"^4B",["^10",[["^4D","~$f","~$&","^4V"]]],"^4I",["^10",[null]]],"^4G",[["^10",["^4D","~$f","^4V"]]],"^4H",null,"^4X",2,"^4I",["^10",[null]],"^8",1,"^4J",true,"~:methods",[["^ ","^4X",2,"^4J",true,"~:tag",["^D",["^4L","^4M","^4N"]]]],"^7",28,"^4K","^4T","^9",28,"^4O",2,"^4P",true,"^4B",["^10",[["^4D","~$f","~$&","^4V"]]],"^4F","Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)"],"~$splice",["^ ","^4A",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",39,"^8",7,"^9",39,"^:",13,"^4B",["^10",["^4C",["^10",[["^4D"]]]]],"^4F","Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   "],"^F","^1T","^6","rewrite_clj/zip/editz.cljs","^:",13,"^4G",["^10",[["^4D"]]],"^4H",null,"^4I",["^10",[null,null]],"^8",1,"^4J",false,"^7",39,"^4K",["^D",[null,"^4L","^4T","^4M","^4N"]],"^9",39,"^4O",1,"^4P",true,"^4B",["^10",["^4C",["^10",[["^4D"]]]]],"^4F","Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   "],"~$edit-token",["^ ","^4A",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",63,"^8",8,"^9",63,"^:",18,"^4R",true,"^4B",["^10",["^4C",["^10",[["^4D","~$str-fn"]]]]]],"^4R",true,"^F","^1F","^6","rewrite_clj/zip/editz.cljs","^:",18,"^4G",["^10",[["^4D","^51"]]],"^4H",null,"^4I",["^10",[null,null]],"^8",1,"^4J",false,"^7",63,"^4K",["^D",["^4L","^4M","^4N"]],"^9",63,"^4O",2,"^4P",true,"^4B",["^10",["^4C",["^10",[["^4D","^51"]]]]]],"~$edit-multi-line",["^ ","^4A",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",71,"^8",8,"^9",71,"^:",23,"^4R",true,"^4B",["^10",["^4C",["^10",[["^4D","~$line-fn"]]]]]],"^4R",true,"^F","^1O","^6","rewrite_clj/zip/editz.cljs","^:",23,"^4G",["^10",[["^4D","^53"]]],"^4H",null,"^4I",["^10",[null,null]],"^8",1,"^4J",false,"^7",71,"^4K",["^D",["^4L","^4M","^4N"]],"^9",71,"^4O",2,"^4P",true,"^4B",["^10",["^4C",["^10",[["^4D","^53"]]]]]],"~$prefix",["^ ","^4A",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",77,"^8",7,"^9",77,"^:",13,"^4B",["^10",["^4C",["^10",[["^4D","~$s"]]]]]],"^F","^1J","^6","rewrite_clj/zip/editz.cljs","^:",13,"^4G",["^10",[["^4D","~$s"]]],"^4H",null,"^4I",["^10",[null,null]],"^8",1,"^4J",false,"^7",77,"^9",77,"^4O",2,"^4P",true,"^4B",["^10",["^4C",["^10",[["^4D","~$s"]]]]]],"~$suffix",["^ ","^4A",null,"^5",["^ ","^6","rewrite_clj/zip/editz.cljs","^7",87,"^8",7,"^9",87,"^:",13,"^4B",["^10",["^4C",["^10",[["^4D","~$s"]]]]]],"^F","^1Y","^6","rewrite_clj/zip/editz.cljs","^:",13,"^4G",["^10",[["^4D","~$s"]]],"^4H",null,"^4I",["^10",[null,null]],"^8",1,"^4J",false,"^7",87,"^9",87,"^4O",2,"^4P",true,"^4B",["^10",["^4C",["^10",[["^4D","~$s"]]]]]]],"^Z",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^W",["^D",["~:lines"]],"~:order",["^57"]],"^15",["^ ","^X",["^D",[]]],"^16",["^ "],"^17",["^U","^R","^M","^V","^N","^Q","^T","^P","^O"]],"^I","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^1[",[["^5;","~:static-fns"],true,["^5;","~:shadow-tweaks"],null,["^5;","~:source-map-inline"],null,["^5;","~:elide-asserts"],false,["^5;","~:optimize-constants"],null,["^5;","^1<"],null,["^5;","~:external-config"],null,["^5;","~:tooling-config"],null,["^5;","~:emit-constants"],null,["^5;","~:load-tests"],null,["^5;","~:form-size-threshold"],null,["^5;","~:infer-externs"],true,["^5;","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5;","~:fn-invoke-direct"],null,["^5;","~:source-map"],"/dev/null"]]]