["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.parser.string');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.node');\ngoog.require('rewrite_clj.reader');\ngoog.require('goog.string');\n/**\n * Flush buffer and add string to the given vector.\n */\nrewrite_clj.parser.string.flush_into = (function rewrite_clj$parser$string$flush_into(lines,buf){\nvar s = buf.toString();\nbuf.set(\"\");\n\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(lines,s);\n});\nrewrite_clj.parser.string.read_string_data = (function rewrite_clj$parser$string$read_string_data(reader){\nrewrite_clj.reader.ignore(reader);\n\nvar buf = (new goog.string.StringBuffer());\nvar escape_QMARK_ = false;\nvar lines = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nvar temp__5455__auto__ = (rewrite_clj.reader.read_char.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.reader.read_char.cljs$core$IFn$_invoke$arity$1(reader) : rewrite_clj.reader.read_char.call(null,reader));\nif(cljs.core.truth_(temp__5455__auto__)){\nvar c = temp__5455__auto__;\nif((((!(escape_QMARK_))) && ((c === \"\\\"\")))){\nreturn rewrite_clj.parser.string.flush_into(lines,buf);\n} else {\nif((c === \"\\n\")){\nvar G__30166 = escape_QMARK_;\nvar G__30167 = rewrite_clj.parser.string.flush_into(lines,buf);\nescape_QMARK_ = G__30166;\nlines = G__30167;\ncontinue;\n} else {\nbuf.append(c);\n\nvar G__30168 = (((!(escape_QMARK_))) && ((c === \"\\\\\")));\nvar G__30169 = lines;\nescape_QMARK_ = G__30168;\nlines = G__30169;\ncontinue;\n\n}\n}\n} else {\nreturn rewrite_clj.reader.throw_reader(reader,\"Unexpected EOF while reading string.\");\n}\nbreak;\n}\n});\nrewrite_clj.parser.string.parse_string = (function rewrite_clj$parser$string$parse_string(reader){\nvar G__30148 = rewrite_clj.parser.string.read_string_data(reader);\nreturn (rewrite_clj.node.string_node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.string_node.cljs$core$IFn$_invoke$arity$1(G__30148) : rewrite_clj.node.string_node.call(null,G__30148));\n});\nrewrite_clj.parser.string.parse_regex = (function rewrite_clj$parser$string$parse_regex(reader){\nvar lines = rewrite_clj.parser.string.read_string_data(reader);\nvar regex = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",lines);\nvar G__30149 = cljs.core.re_pattern(regex);\nvar G__30150 = [\"#\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(regex),\"\\\"\"].join('');\nreturn (rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$2 ? rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$2(G__30149,G__30150) : rewrite_clj.node.token_node.call(null,G__30149,G__30150));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/parser/string.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.parser.string","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node","^I","~$node","^I","~$rewrite-clj.reader","^K","~$r","^K","~$goog.string","^L","~$gstring","^L","~$cljs.core","^N","~$goog","^O"],"~:seen",["^B",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^D",["^U",["^Q",["^I","~:as","^J"],["^K","^W","~$r"],["^L","^W","^M"]]]]],"~:flags",["^ ","^Q",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^I","^K","^L"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/parser/string.cljs"],"~:compiled-at",1587374059344,"~:resource-name","rewrite_clj/parser/string.cljs","~:warnings",[],"~:source","(ns rewrite-clj.parser.string\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]\n            [goog.string :as gstring]))\n\n(defn- flush-into\n  \"Flush buffer and add string to the given vector.\"\n  [lines buf]\n  (let [s (.toString buf)]\n    (.set buf \"\")\n    (conj lines s)))\n\n(defn- read-string-data\n  [^not-native reader]\n  (r/ignore reader)\n  (let [buf (gstring/StringBuffer.)]\n    (loop [escape? false\n           lines []]\n      (if-let [c (r/read-char reader)]\n        (cond (and (not escape?) (identical? c \\\"))\n              (flush-into lines buf)\n\n              (identical? c \\newline)\n              (recur escape? (flush-into lines buf))\n\n              :else\n              (do\n                (.append buf c)\n                (recur (and (not escape?) (identical? c \\\\)) lines)))\n        (r/throw-reader reader \"Unexpected EOF while reading string.\")))))\n\n(defn parse-string\n  [^not-native reader]\n  (node/string-node (read-string-data reader)))\n\n(defn parse-regex\n  [^not-native reader]\n  (let [lines (read-string-data reader)\n        regex (clojure.string/join \"\\n\" lines)]\n    (node/token-node (re-pattern regex) (str \"#\\\"\" regex \"\\\"\"))))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;;;AAKA;;;AAAA,AAAOA,AAEJC,AAAMC;AAFT,AAGE,AAAMC,AAAE,AAAWD;AAAnB,AACE,AAAA,AAAMA;;AACN,AAACE,AAAKH,AAAME;;AAEhB,AAAA,AAAOE,AACQC;AADf,AAEE,AAACC,AAASD;;AACV,AAAMJ,AAAI,AAAAM;AAAV,AACE,AAAA,AAAOC;AAAP,AACOR;;AADP,AAEE,AAAAS,AAAW,AAACE,AAAAA,AAAAA,AAAYN,AAAAA;AAAxB,AAAA,AAAAI;AAAA,AAAAA,AAASC;AAAT,AACE,AAAM,AAAK,AAAKF,AAAS,AAAA,AAAYE;AAC/B,AAACX,AAAWC,AAAMC;;AADxB,AAGM,AAAA,AAAYS;AACZ,AAAOF;AAAQ,AAACT,AAAWC,AAAMC;;;;;AAJvC,AAOM,AACE,AAASA,AAAIS;;AACb,AAAO,AAAK,AAAKF,AAAS,AAAA,AAAYE;AAAOV;;;;;;;;AACrD,AAAA,AAACY,AAAeP;;;;;AAExB,AAAA,AAAMQ,AACSR;AADf,AAEE,AAAAS,AAAkB,AAACV,AAAiBC;AAApC,AAAA,AAAAS,AAAAA,AAACC,AAAAA,AAAAA;;AAEH,AAAA,AAAMC,AACSX;AADf,AAEE,AAAML,AAAM,AAACI,AAAiBC;AACxBY,AAAM,AAAA,AAACC,AAAyBlB;AADtC,AAEE,AAAAmB,AAAiB,AAACG,AAAWL;AAA7BG,AAAoC,AAAA,AAAA,AAAWH;AAA/C,AAAA,AAAAE,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA","names",["rewrite-clj.parser.string/flush-into","lines","buf","s","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","rewrite-clj.parser.string/read-string-data","reader","rewrite-clj.reader/ignore","goog.string/StringBuffer","escape?","temp__5455__auto__","c","rewrite-clj.reader/read-char","rewrite-clj.reader/throw-reader","rewrite-clj.parser.string/parse-string","G__30148","rewrite-clj.node/string-node","rewrite-clj.parser.string/parse-regex","regex","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__30149","G__30150","rewrite-clj.node/token-node","cljs.core/re-pattern"]]],"~:cache-keys",["~#cmap",[["^10","rewrite_clj/node/token.cljs"],[1587365556840,"^O","^N","~$rewrite-clj.node.protocols"],["~:macro","^N"],[1587365553000],["^10","cljs/tools/reader/impl/utils.cljs"],[1584609213925,"^O","^N","~$clojure.string","^L"],["^10","goog/math/math.js"],[1584607223013,"^O","~$goog.array","~$goog.asserts"],["^10","rewrite_clj/parser/string.cljs"],[1587365556840,"^O","^N","^I","^K","^L"],["^10","goog/array/array.js"],[1584607223013,"^O","^1A"],["^1>","~$cljs.tools.reader.reader-types"],[1584609213000],["^10","goog/debug/error.js"],[1584607223013,"^O"],["^10","goog/dom/nodetype.js"],[1584607223013,"^O"],["^10","cljs/tools/reader/impl/inspect.cljs"],[1584609213925,"^O","^N"],["^10","cljs/tools/reader.cljs"],[1584609213925,"^O","^N","^1B","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^1@","^L","~$goog.string.StringBuffer"],["^10","rewrite_clj/node/forms.cljs"],[1587365556840,"^O","^N","^1="],["^10","goog/object/object.js"],[1584607223013,"^O"],"~:SHADOW-TIMESTAMP",[1587365557000,1587365553000],["^10","goog/math/long.js"],[1584607223013,"^O","^1A","~$goog.reflect"],["^10","rewrite_clj/node/reader_macro.cljs"],[1587365556840,"^O","^N","^1=","~$rewrite-clj.node.whitespace"],["^10","goog/functions/functions.js"],[1584607223013,"^O"],["^10","clojure/walk.cljs"],[1587365553008,"^O","^N"],["^10","goog/structs/map.js"],[1584607223013,"^O","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^10","rewrite_clj/node/meta.cljs"],[1587365556840,"^O","^N","^1=","^1I"],["^10","rewrite_clj/node/stringz.cljs"],[1587365556840,"^O","^N","^1=","~$cljs.tools.reader","^1?"],["^10","rewrite_clj/node/comment.cljs"],[1587365556840,"^O","^N","^1="],["^10","rewrite_clj/node/keyword.cljs"],[1587365556840,"^O","^N","^1="],["^10","goog/asserts/asserts.js"],[1584607223013,"^O","~$goog.debug.Error","~$goog.dom.NodeType","^L"],["^10","goog/uri/uri.js"],[1584607223013,"^O","^1@","^1A","^L","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^10","rewrite_clj/node/protocols.cljs"],[1587365556840,"^O","^N","^1?"],["^10","rewrite_clj/node/seq.cljs"],[1587365556840,"^O","^N","^1="],["^10","rewrite_clj/node/uneval.cljs"],[1587365556840,"^O","^N","^1="],["^10","goog/base.js"],[1584607223013],["^10","goog/structs/structs.js"],[1584607223013,"^O","^1@","^1L"],["^10","cljs/tools/reader/impl/errors.cljs"],[1584609213925,"^O","^N","^1B","^1?","~$cljs.tools.reader.impl.inspect"],["^10","rewrite_clj/node/whitespace.cljs"],[1587365556840,"^O","^N","^1="],["^10","rewrite_clj/node/coercer.cljs"],[1587365556840,"^O","^N","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^1=","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^1I"],["^10","clojure/string.cljs"],[1587365553008,"^O","^N","^L","^1F"],["^10","goog/string/string.js"],[1584607223013,"^O"],["^10","goog/reflect/reflect.js"],[1584607223013,"^O"],["^10","rewrite_clj/node/fn.cljs"],[1587365556840,"^O","^N","^1=","~$clojure.walk"],["^10","rewrite_clj/node.cljs"],[1587365556840,"^O","^N","~$rewrite-clj.node.coercer","^1=","^1X","^23","^1I","^24","^1V","^1W","^20","^1Z","^22","^1Y","^1[","^21"],["^10","goog/string/stringbuffer.js"],[1584607223013,"^O"],["^10","cljs/tools/reader/reader_types.cljs"],[1584609213925,"^O","^N","^1C","^L","^1F"],["^10","goog/iter/iter.js"],[1584607223013,"^O","^1@","^1A","~$goog.functions","~$goog.math"],["^10","rewrite_clj/reader.cljs"],[1587365556840,"^O","^N","^1M","^1B","^1D","^L","^1="],["^10","rewrite_clj/node/quote.cljs"],[1587365556840,"^O","^N","^1="],["^10","cljs/tools/reader/impl/commons.cljs"],[1584609213925,"^O","^N","^1E","^1B","^1C"],["^10","cljs/core.cljs"],[1587365553008,"~$goog.math.Long","~$goog.math.Integer","^L","^1L","^1@","~$goog.Uri","^1F"],["^10","goog/math/integer.js"],[1584607223013,"^O"],["^10","goog/uri/utils.js"],[1584607223013,"^O","^1@","^1A","^L"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/parser/string.cljs","^7",1,"^8",5,"^9",1,"^:",30],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^I","^K","^K","~$r","^K","^L","^L","^M","^L","^N","^N","^O","^O"],"^P",["^B",["^Q"]],"^R",null,"~:defs",["^ ","~$flush-into",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/parser/string.cljs","^7",6,"^8",8,"^9",6,"^:",18,"~:private",true,"~:arglists",["^U",["~$quote",["^U",[["~$lines","~$buf"]]]]],"~:doc","Flush buffer and add string to the given vector."],"^2@",true,"^C","~$rewrite-clj.parser.string/flush-into","^6","rewrite_clj/parser/string.cljs","^:",18,"~:method-params",["^U",[["^2C","^2D"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^8",1,"~:variadic?",false,"^7",6,"~:ret-tag","~$clj","^9",6,"~:max-fixed-arity",2,"~:fn-var",true,"^2A",["^U",["^2B",["^U",[["^2C","^2D"]]]]],"^2E","Flush buffer and add string to the given vector."],"~$read-string-data",["^ ","^2?",null,"^5",["^ ","^6","rewrite_clj/parser/string.cljs","^7",13,"^8",8,"^9",13,"^:",24,"^2@",true,"^2A",["^U",["^2B",["^U",[["~$reader"]]]]]],"^2@",true,"^C","~$rewrite-clj.parser.string/read-string-data","^6","rewrite_clj/parser/string.cljs","^:",24,"^2G",["^U",[["^2P"]]],"^2H",null,"^2I",["^U",[null,null]],"^8",1,"^2J",false,"^7",13,"^2K","^2L","^9",13,"^2M",1,"^2N",true,"^2A",["^U",["^2B",["^U",[["^2P"]]]]]],"~$parse-string",["^ ","^2?",null,"^5",["^ ","^6","rewrite_clj/parser/string.cljs","^7",32,"^8",7,"^9",32,"^:",19,"^2A",["^U",["^2B",["^U",[["^2P"]]]]]],"^C","~$rewrite-clj.parser.string/parse-string","^6","rewrite_clj/parser/string.cljs","^:",19,"^2G",["^U",[["^2P"]]],"^2H",null,"^2I",["^U",[null,null]],"^8",1,"^2J",false,"^7",32,"^2K","~$any","^9",32,"^2M",1,"^2N",true,"^2A",["^U",["^2B",["^U",[["^2P"]]]]]],"~$parse-regex",["^ ","^2?",null,"^5",["^ ","^6","rewrite_clj/parser/string.cljs","^7",36,"^8",7,"^9",36,"^:",18,"^2A",["^U",["^2B",["^U",[["^2P"]]]]]],"^C","~$rewrite-clj.parser.string/parse-regex","^6","rewrite_clj/parser/string.cljs","^:",18,"^2G",["^U",[["^2P"]]],"^2H",null,"^2I",["^U",[null,null]],"^8",1,"^2J",false,"^7",36,"^2K","^2T","^9",36,"^2M",1,"^2N",true,"^2A",["^U",["^2B",["^U",[["^2P"]]]]]]],"^S",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^P",["^B",["~:else"]],"~:order",["^2X"]],"^X",["^ ","^Q",["^B",[]]],"^Y",["^ "],"^Z",["^O","^N","^I","^K","^L"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1<",[["^30","~:static-fns"],true,["^30","~:elide-asserts"],false,["^30","~:optimize-constants"],null,["^30","^13"],null,["^30","~:external-config"],null,["^30","~:tooling-config"],null,["^30","~:emit-constants"],null,["^30","~:load-tests"],null,["^30","~:infer-externs"],true,["^30","^15"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^30","~:fn-invoke-direct"],null,["^30","~:source-map"],"/dev/null"]]]