["^ ","~:output",["^ ","~:js","goog.provide('re_frame.fx');\ngoog.require('cljs.core');\ngoog.require('re_frame.router');\ngoog.require('re_frame.db');\ngoog.require('re_frame.interceptor');\ngoog.require('re_frame.interop');\ngoog.require('re_frame.events');\ngoog.require('re_frame.registrar');\ngoog.require('re_frame.loggers');\ngoog.require('re_frame.trace');\nre_frame.fx.kind = new cljs.core.Keyword(null,\"fx\",\"fx\",-1237829572);\nif(cljs.core.truth_((re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(re_frame.fx.kind) : re_frame.registrar.kinds.call(null,re_frame.fx.kind)))){\n} else {\nthrow (new Error(\"Assert failed: (re-frame.registrar/kinds kind)\"));\n}\n/**\n * Register the given effect `handler` for the given `id`.\n * \n *   `id` is keyword, often namespaced.\n *   `handler` is a side-effecting function which takes a single argument and whose return\n *   value is ignored.\n * \n *   Example Use\n *   -----------\n * \n *   First, registration ... associate `:effect2` with a handler.\n * \n *   (reg-fx\n *   :effect2\n *   (fn [value]\n *      ... do something side-effect-y))\n * \n *   Then, later, if an event handler were to return this effects map ...\n * \n *   {...\n * :effect2  [1 2]}\n * \n * ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n * called with an argument of `[1 2]`.\n */\nre_frame.fx.reg_fx = (function re_frame$fx$reg_fx(id,handler){\nreturn re_frame.registrar.register_handler(re_frame.fx.kind,id,handler);\n});\n/**\n * An interceptor whose `:after` actions the contents of `:effects`. As a result,\n *   this interceptor is Domino 3.\n * \n *   This interceptor is silently added (by reg-event-db etc) to the front of\n *   interceptor chains for all events.\n * \n *   For each key in `:effects` (a map), it calls the registered `effects handler`\n *   (see `reg-fx` for registration of effect handlers).\n * \n *   So, if `:effects` was:\n *    {:dispatch  [:hello 42]\n *     :db        {...}\n *     :undo      \"set flag\"}\n * \n *   it will call the registered effect handlers for each of the map's keys:\n *   `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n *   value for that key - so in the example above the effect handler for :dispatch\n *   will be given one arg `[:hello 42]`.\n * \n *   You cannot rely on the ordering in which effects are executed.\n */\nre_frame.fx.do_fx = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"do-fx\",\"do-fx\",1194163050),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$fx$do_fx_after(context){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__33091 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__33092 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"do-fx\",\"event/do-fx\",1357330452)], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__33092;\n\ntry{try{var seq__33093 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\nvar chunk__33094 = null;\nvar count__33095 = (0);\nvar i__33096 = (0);\nwhile(true){\nif((i__33096 < count__33095)){\nvar vec__33108 = chunk__33094.cljs$core$IIndexed$_nth$arity$2(null,i__33096);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33108,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33108,(1),null);\nvar temp__5455__auto___33170 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5455__auto___33170)){\nvar effect_fn_33171 = temp__5455__auto___33170;\n(effect_fn_33171.cljs$core$IFn$_invoke$arity$1 ? effect_fn_33171.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_33171.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__33172 = seq__33093;\nvar G__33173 = chunk__33094;\nvar G__33174 = count__33095;\nvar G__33175 = (i__33096 + (1));\nseq__33093 = G__33172;\nchunk__33094 = G__33173;\ncount__33095 = G__33174;\ni__33096 = G__33175;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__33093);\nif(temp__5457__auto__){\nvar seq__33093__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__33093__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__33093__$1);\nvar G__33176 = cljs.core.chunk_rest(seq__33093__$1);\nvar G__33177 = c__4550__auto__;\nvar G__33178 = cljs.core.count(c__4550__auto__);\nvar G__33179 = (0);\nseq__33093 = G__33176;\nchunk__33094 = G__33177;\ncount__33095 = G__33178;\ni__33096 = G__33179;\ncontinue;\n} else {\nvar vec__33112 = cljs.core.first(seq__33093__$1);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33112,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33112,(1),null);\nvar temp__5455__auto___33184 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5455__auto___33184)){\nvar effect_fn_33185 = temp__5455__auto___33184;\n(effect_fn_33185.cljs$core$IFn$_invoke$arity$1 ? effect_fn_33185.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_33185.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__33190 = cljs.core.next(seq__33093__$1);\nvar G__33191 = null;\nvar G__33192 = (0);\nvar G__33193 = (0);\nseq__33093 = G__33190;\nchunk__33094 = G__33191;\ncount__33095 = G__33192;\ni__33096 = G__33193;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__32633__auto___33194 = re_frame.interop.now();\nvar duration__32634__auto___33195 = (end__32633__auto___33194 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__32634__auto___33195,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__32633__auto___33194);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__33091;\n}} else {\nvar seq__33115 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\nvar chunk__33116 = null;\nvar count__33117 = (0);\nvar i__33118 = (0);\nwhile(true){\nif((i__33118 < count__33117)){\nvar vec__33126 = chunk__33116.cljs$core$IIndexed$_nth$arity$2(null,i__33118);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33126,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33126,(1),null);\nvar temp__5455__auto___33203 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5455__auto___33203)){\nvar effect_fn_33204 = temp__5455__auto___33203;\n(effect_fn_33204.cljs$core$IFn$_invoke$arity$1 ? effect_fn_33204.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_33204.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__33209 = seq__33115;\nvar G__33210 = chunk__33116;\nvar G__33211 = count__33117;\nvar G__33212 = (i__33118 + (1));\nseq__33115 = G__33209;\nchunk__33116 = G__33210;\ncount__33117 = G__33211;\ni__33118 = G__33212;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__33115);\nif(temp__5457__auto__){\nvar seq__33115__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__33115__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__33115__$1);\nvar G__33213 = cljs.core.chunk_rest(seq__33115__$1);\nvar G__33214 = c__4550__auto__;\nvar G__33215 = cljs.core.count(c__4550__auto__);\nvar G__33216 = (0);\nseq__33115 = G__33213;\nchunk__33116 = G__33214;\ncount__33117 = G__33215;\ni__33118 = G__33216;\ncontinue;\n} else {\nvar vec__33130 = cljs.core.first(seq__33115__$1);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33130,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33130,(1),null);\nvar temp__5455__auto___33217 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5455__auto___33217)){\nvar effect_fn_33227 = temp__5455__auto___33217;\n(effect_fn_33227.cljs$core$IFn$_invoke$arity$1 ? effect_fn_33227.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_33227.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__33234 = cljs.core.next(seq__33115__$1);\nvar G__33235 = null;\nvar G__33236 = (0);\nvar G__33237 = (0);\nseq__33115 = G__33234;\nchunk__33116 = G__33235;\ncount__33117 = G__33236;\ni__33118 = G__33237;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n})], 0));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-later\",\"dispatch-later\",291951390),(function (value){\nvar seq__33133 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\nvar chunk__33134 = null;\nvar count__33135 = (0);\nvar i__33136 = (0);\nwhile(true){\nif((i__33136 < count__33135)){\nvar map__33144 = chunk__33134.cljs$core$IIndexed$_nth$arity$2(null,i__33136);\nvar map__33144__$1 = (((((!((map__33144 == null))))?(((((map__33144.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__33144.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__33144):map__33144);\nvar effect = map__33144__$1;\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33144__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33144__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\n} else {\nre_frame.interop.set_timeout_BANG_(((function (seq__33133,chunk__33134,count__33135,i__33136,map__33144,map__33144__$1,effect,ms,dispatch){\nreturn (function (){\nreturn re_frame.router.dispatch(dispatch);\n});})(seq__33133,chunk__33134,count__33135,i__33136,map__33144,map__33144__$1,effect,ms,dispatch))\n,ms);\n}\n\n\nvar G__33242 = seq__33133;\nvar G__33243 = chunk__33134;\nvar G__33244 = count__33135;\nvar G__33245 = (i__33136 + (1));\nseq__33133 = G__33242;\nchunk__33134 = G__33243;\ncount__33135 = G__33244;\ni__33136 = G__33245;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__33133);\nif(temp__5457__auto__){\nvar seq__33133__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__33133__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__33133__$1);\nvar G__33250 = cljs.core.chunk_rest(seq__33133__$1);\nvar G__33251 = c__4550__auto__;\nvar G__33252 = cljs.core.count(c__4550__auto__);\nvar G__33253 = (0);\nseq__33133 = G__33250;\nchunk__33134 = G__33251;\ncount__33135 = G__33252;\ni__33136 = G__33253;\ncontinue;\n} else {\nvar map__33146 = cljs.core.first(seq__33133__$1);\nvar map__33146__$1 = (((((!((map__33146 == null))))?(((((map__33146.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__33146.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__33146):map__33146);\nvar effect = map__33146__$1;\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33146__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33146__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\n} else {\nre_frame.interop.set_timeout_BANG_(((function (seq__33133,chunk__33134,count__33135,i__33136,map__33146,map__33146__$1,effect,ms,dispatch,seq__33133__$1,temp__5457__auto__){\nreturn (function (){\nreturn re_frame.router.dispatch(dispatch);\n});})(seq__33133,chunk__33134,count__33135,i__33136,map__33146,map__33146__$1,effect,ms,dispatch,seq__33133__$1,temp__5457__auto__))\n,ms);\n}\n\n\nvar G__33258 = cljs.core.next(seq__33133__$1);\nvar G__33259 = null;\nvar G__33260 = (0);\nvar G__33261 = (0);\nseq__33133 = G__33258;\nchunk__33134 = G__33259;\ncount__33135 = G__33260;\ni__33136 = G__33261;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),(function (value){\nif((!(cljs.core.vector_QMARK_(value)))){\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\",value], 0));\n} else {\nreturn re_frame.router.dispatch(value);\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-n\",\"dispatch-n\",-504469236),(function (value){\nif((!(cljs.core.sequential_QMARK_(value)))){\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\",value], 0));\n} else {\nvar seq__33149 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\nvar chunk__33150 = null;\nvar count__33151 = (0);\nvar i__33152 = (0);\nwhile(true){\nif((i__33152 < count__33151)){\nvar event = chunk__33150.cljs$core$IIndexed$_nth$arity$2(null,i__33152);\nre_frame.router.dispatch(event);\n\n\nvar G__33265 = seq__33149;\nvar G__33266 = chunk__33150;\nvar G__33267 = count__33151;\nvar G__33268 = (i__33152 + (1));\nseq__33149 = G__33265;\nchunk__33150 = G__33266;\ncount__33151 = G__33267;\ni__33152 = G__33268;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__33149);\nif(temp__5457__auto__){\nvar seq__33149__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__33149__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__33149__$1);\nvar G__33269 = cljs.core.chunk_rest(seq__33149__$1);\nvar G__33270 = c__4550__auto__;\nvar G__33271 = cljs.core.count(c__4550__auto__);\nvar G__33272 = (0);\nseq__33149 = G__33269;\nchunk__33150 = G__33270;\ncount__33151 = G__33271;\ni__33152 = G__33272;\ncontinue;\n} else {\nvar event = cljs.core.first(seq__33149__$1);\nre_frame.router.dispatch(event);\n\n\nvar G__33273 = cljs.core.next(seq__33149__$1);\nvar G__33274 = null;\nvar G__33275 = (0);\nvar G__33276 = (0);\nseq__33149 = G__33273;\nchunk__33150 = G__33274;\ncount__33151 = G__33275;\ni__33152 = G__33276;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"deregister-event-handler\",\"deregister-event-handler\",-1096518994),(function (value){\nvar clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\nif(cljs.core.sequential_QMARK_(value)){\nvar seq__33160 = cljs.core.seq(value);\nvar chunk__33161 = null;\nvar count__33162 = (0);\nvar i__33163 = (0);\nwhile(true){\nif((i__33163 < count__33162)){\nvar event = chunk__33161.cljs$core$IIndexed$_nth$arity$2(null,i__33163);\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\n\n\nvar G__33280 = seq__33160;\nvar G__33281 = chunk__33161;\nvar G__33282 = count__33162;\nvar G__33283 = (i__33163 + (1));\nseq__33160 = G__33280;\nchunk__33161 = G__33281;\ncount__33162 = G__33282;\ni__33163 = G__33283;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__33160);\nif(temp__5457__auto__){\nvar seq__33160__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__33160__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__33160__$1);\nvar G__33288 = cljs.core.chunk_rest(seq__33160__$1);\nvar G__33289 = c__4550__auto__;\nvar G__33290 = cljs.core.count(c__4550__auto__);\nvar G__33291 = (0);\nseq__33160 = G__33288;\nchunk__33161 = G__33289;\ncount__33162 = G__33290;\ni__33163 = G__33291;\ncontinue;\n} else {\nvar event = cljs.core.first(seq__33160__$1);\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\n\n\nvar G__33295 = cljs.core.next(seq__33160__$1);\nvar G__33296 = null;\nvar G__33297 = (0);\nvar G__33298 = (0);\nseq__33160 = G__33295;\nchunk__33161 = G__33296;\ncount__33162 = G__33297;\ni__33163 = G__33298;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn (clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(value) : clear_event.call(null,value));\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (value){\nif((!((cljs.core.deref(re_frame.db.app_db) === value)))){\nreturn cljs.core.reset_BANG_(re_frame.db.app_db,value);\n} else {\nreturn null;\n}\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/fx.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^I","~$re-frame.interceptor","^J","~$re-frame.events","^K","~$re-frame.trace","^L","~$re-frame.registrar","^M","~$cljs.core","^N","~$goog","^O","~$router","~$re-frame.router","^Q","^Q","~$trace","^L","~$events","^K","~$re-frame.loggers","^T","~$re-frame.db","^U"],"~:seen",["^B",["~:require"]],"~:uses",["^ ","~$app-db","^U","~$->interceptor","^J","~$set-timeout!","^I","~$get-handler","^M","~$clear-handlers","^M","~$register-handler","^M","~$console","^T"],"~:require-macros",["^ ","^L","^L","^R","^L","^N","^N"],"~:form",["~#list",["~$ns","^D",["^16",["^W",["^Q","~:as","^P"],["^U","~:refer",["^Y"]],["^J","^19",["^Z"]],["^I","^19",["^["]],["^K","^18","^S"],["^M","^19",["^10","^11","^12"]],["^T","^19",["^13"]],["^L","^18","^R","~:include-macros",true]]]]],"~:flags",["^ ","^W",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^Q","^U","^J","^I","^K","^M","^T","^L"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","re_frame/fx.cljc"],"~:compiled-at",1587374060552,"~:resource-name","re_frame/fx.cljc","~:warnings",[],"~:source","(ns re-frame.fx\n  (:require\n    [re-frame.router      :as router]\n    [re-frame.db          :refer [app-db]]\n    [re-frame.interceptor :refer [->interceptor]]\n    [re-frame.interop     :refer [set-timeout!]]\n    [re-frame.events      :as events]\n    [re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [re-frame.loggers     :refer [console]]\n    [re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} (remove nil? value)]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.fx/kind","js/Error","re-frame.registrar/kinds","re-frame.fx/reg-fx","id","handler","re-frame.registrar/register-handler","re-frame.fx/do-fx","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__33091","re-frame.trace/*current-trace*","*current-trace*-temp-val__33092","re-frame.trace/start-trace","end__32633__auto__","re-frame.interop/now","duration__32634__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","seq__33093","cljs.core/seq","chunk__33094","count__33095","i__33096","vec__33108","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__33112","cljs.core/first","cljs.core/next","seq__33115","chunk__33116","count__33117","i__33118","vec__33126","vec__33130","effect-key","effect-value","temp__5455__auto__","effect-fn","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","value","seq__33133","chunk__33134","count__33135","i__33136","map__33144","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__33146","ms","dispatch","effect","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/empty?","re-frame.interop/set-timeout!","re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","seq__33149","chunk__33150","count__33151","i__33152","event","clear-event","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/clear-handlers","re-frame.events/kind","seq__33160","chunk__33161","count__33162","i__33163","cljs.core/deref","re-frame.db/app-db","cljs.core/reset!"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1587365557000,499162500000,"~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"],["^1?","reagent/impl/batching.cljs"],[1587059915039,"^O","^N","~$reagent.debug","~$reagent.impl.util"],["^1?","goog/dom/tagname.js"],[1584607223013,"^O","~$goog.dom.HtmlElement"],["~:macro","^N"],[1587365553000],["^1?","goog/math/math.js"],[1584607223013,"^O","~$goog.array","~$goog.asserts"],["^1?","goog/labs/useragent/browser.js"],[1584607223013,"^O","^1T","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^1?","re_frame/loggers.cljc"],[1587370914423,"^O","^N","~$clojure.set"],["^1S","^1P"],[1587059915000],["^1?","goog/array/array.js"],[1584607223013,"^O","^1U"],["^1L","node_modules/prop-types/checkPropTypes.js"],[1587365557000,1549836454000,"^1M","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1?","reagent/impl/util.cljs"],[1587059915039,"^O","^N","~$clojure.string"],["^1?","re_frame/router.cljc"],[1587370914423,"^O","^N","^K","^I","^T","^L"],["^1S","~$net.cgrand.macrovich"],[1587353648000],["^1?","goog/debug/error.js"],[1584607223013,"^O"],["^1?","re_frame/registrar.cljc"],[1587370914423,"^O","^N","^I","^T"],["^1?","goog/dom/nodetype.js"],[1584607223013,"^O"],["^1S","~$reagent.core"],[1587059915000],["^1L","node_modules/scheduler/cjs/scheduler.development.js"],[1587365557000,499162500000,"^1M"],["^1?","reagent/ratom.cljs"],[1587059915039,"^O","^N","^1Q","^1P","~$reagent.impl.batching","^1Y","^1W"],["^1L","node_modules/scheduler/cjs/scheduler.production.min.js"],[1587365557000,499162500000,"^1M"],["^1?","re_frame/interop.cljs"],[1587370914423,"^O","^N","~$goog.async.nextTick","^21","~$reagent.ratom"],["^1L","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1587365557000,499162500000,"^1M"],["^1L","node_modules/react/index.js"],[1587365557000,499162500000,"^1M","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1?","shadow/js.js"],[1587365557008,"^O"],["^1?","goog/object/object.js"],[1584607223013,"^O"],["^1?","reagent/impl/template.cljs"],[1587059915039,"^O","^N","^=","^1[","~$clojure.walk","^1Q","~$reagent.impl.component","^22","^24","^1P","^1W"],["^1L","node_modules/react-dom/cjs/react-dom.production.min.js"],[1587365557000,499162500000,"^1M","^=","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"],"~:SHADOW-TIMESTAMP",[1587365557000,1587365553000],["^1L","node_modules/react/cjs/react.development.js"],[1587365557000,499162500000,"^1M","^29","~$module$node_modules$prop_types$checkPropTypes"],["^1S","^24"],[1587059915000],["^1?","re_frame/events.cljc"],[1587370914423,"^O","^N","^U","~$re-frame.utils","^I","^M","^T","^J","^L"],["^1?","goog/math/long.js"],[1584607223013,"^O","^1U","~$goog.reflect"],["^1L","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1587365557000,499162500000,"^1M"],["^1?","goog/functions/functions.js"],[1584607223013,"^O"],["^1?","reagent/impl/component.cljs"],[1587059915039,"^O","^N","^1W","^=","^1Q","^22","^24","^1P"],["^1?","clojure/walk.cljs"],[1587365553008,"^O","^N"],["^1?","goog/structs/map.js"],[1584607223013,"^O","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1W"],["^1L","node_modules/scheduler/index.js"],[1587365557000,499162500000,"^1M","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"],["^1?","goog/labs/useragent/engine.js"],[1584607223013,"^O","^1T","^1V","^1X"],["^1?","goog/asserts/asserts.js"],[1584607223013,"^O","~$goog.debug.Error","~$goog.dom.NodeType","^1X"],["^1?","goog/uri/uri.js"],[1584607223013,"^O","^1T","^1U","^1X","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1L","node_modules/object-assign/index.js"],[1587365557000,1484580833000,"^1M"],["^1?","re_frame/db.cljc"],[1587370914423,"^O","^N","^I"],["^1?","goog/base.js"],[1584607223013],["^1?","goog/structs/structs.js"],[1584607223013,"^O","^1T","^1W"],["^1?","clojure/string.cljs"],[1587365553008,"^O","^N","^1X","~$goog.string.StringBuffer"],["^1L","node_modules/react/cjs/react.production.min.js"],[1587365557000,499162500000,"^1M","^29"],["^1?","goog/debug/entrypointregistry.js"],[1584607223013,"^O","^1U"],["^1?","goog/string/string.js"],[1584607223013,"^O"],["^1?","re_frame/interceptor.cljc"],[1587370914423,"^O","^N","^T","^I","^L","^1Y"],["^1?","goog/reflect/reflect.js"],[1584607223013,"^O"],["^1?","goog/labs/useragent/util.js"],[1584607223013,"^O","^1X"],["^1?","reagent/core.cljs"],[1587059915039,"^O","^N","^=","~$reagent.impl.template","^28","^1Q","^22","^24","^1P","~$reagent.dom"],["^1?","goog/string/stringbuffer.js"],[1584607223013,"^O"],["^1?","goog/iter/iter.js"],[1584607223013,"^O","^1T","^1U","~$goog.functions","~$goog.math"],["^1?","goog/async/nexttick.js"],[1584607223013,"^O","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2M","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^1?","re_frame/utils.cljc"],[1587370914423,"^O","^N","^T"],["^1?","reagent/dom.cljs"],[1587059915039,"^O","^N","^?","^1Q","^2K","^22","^24"],["^1?","re_frame/fx.cljc"],[1587370914423,"^O","^N","^Q","^U","^J","^I","^K","^M","^T","^L"],["^1L","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1587365557000,1549571078000,"^1M"],["^1?","goog/dom/htmlelement.js"],[1584607223013,"^O"],["^1?","cljs/core.cljs"],[1587365553008,"~$goog.math.Long","~$goog.math.Integer","^1X","^1W","^1T","~$goog.Uri","^2J"],["^1?","reagent/debug.cljs"],[1587059915039,"^O","^N"],["^1S","^L"],[1587370914000],["^1?","goog/math/integer.js"],[1584607223013,"^O"],["^1L","node_modules/scheduler/tracing.js"],[1587365557000,499162500000,"^1M","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"],["^1L","node_modules/react-dom/cjs/react-dom.development.js"],[1587365557000,499162500000,"^1M","^=","^29","^2:","^2<","~$module$node_modules$scheduler$tracing"],["^1?","clojure/set.cljs"],[1587365553008,"^O","^N"],["^1?","goog/uri/utils.js"],[1584607223013,"^O","^1T","^1U","^1X"],["^1?","re_frame/trace.cljc"],[1587370914423,"^O","^N","^I","^T","^2M"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/fx.cljc","^7",1,"^8",5,"^9",1,"^:",16],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^J","^K","^K","^L","^L","^M","^M","^N","^N","^O","^O","^P","^Q","^Q","^Q","^R","^L","^S","^K","^T","^T","^U","^U"],"^V",["^B",["^W"]],"~:shadow/js-access-global",["^B",["Error"]],"^X",["^ ","^Y","^U","^Z","^J","^[","^I","^10","^M","^11","^M","^12","^M","^13","^T"],"~:defs",["^ ","~$kind",["^ ","^C","~$re-frame.fx/kind","^6","re_frame/fx.cljc","^7",15,"^8",1,"^9",15,"^:",10,"^5",["^ ","^6","re_frame/fx.cljc","^7",15,"^8",6,"^9",15,"^:",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/fx.cljc","^7",18,"^8",7,"^9",18,"^:",13,"~:arglists",["^16",["~$quote",["^16",[["~$id","~$handler"]]]]],"~:doc","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^C","~$re-frame.fx/reg-fx","^6","re_frame/fx.cljc","^:",13,"~:method-params",["^16",[["^38","^39"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^8",1,"~:variadic?",false,"^7",18,"~:ret-tag","~$any","^9",18,"~:max-fixed-arity",2,"~:fn-var",true,"^36",["^16",["^37",["^16",[["^38","^39"]]]]],"^3:","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$do-fx",["^ ","^C","~$re-frame.fx/do-fx","^6","re_frame/fx.cljc","^7",47,"^8",1,"^9",47,"^:",11,"^5",["^ ","^6","re_frame/fx.cljc","^7",47,"^8",6,"^9",47,"^:",11],"^3:","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.","^32","~$cljs.core/IMap"]],"^14",["^ ","^L","^L","^R","^L","^N","^N"],"~:cljs.analyzer/constants",["^ ","^V",["^B",["~:db","~:do-fx","~:start","~:dispatch-n","~:duration","~:deregister-event-handler","~:dispatch","~:after","~:event/do-fx","~:id","~:effects","~:error","~:end","~:ms","~:fx","~:op-type","~:dispatch-later"]],"~:order",["^3V","^3Q","^3I","^3O","^3W","^3P","^3J","^3L","^3T","^3R","^3S","^3X","^3U","^3N","^3K","^3M","^3H"]],"^1;",["^ ","^W",["^B",[]]],"^1<",["^ "],"^1=",["^O","^N","^Q","^U","^J","^I","^K","^M","^T","^L"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1K",[["^40","~:static-fns"],true,["^40","~:elide-asserts"],false,["^40","~:optimize-constants"],null,["^40","^1B"],null,["^40","~:external-config"],null,["^40","~:tooling-config"],null,["^40","~:emit-constants"],null,["^40","~:load-tests"],null,["^40","~:infer-externs"],true,["^40","^1D"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^40","~:fn-invoke-direct"],null,["^40","~:source-map"],"/dev/null"]]]