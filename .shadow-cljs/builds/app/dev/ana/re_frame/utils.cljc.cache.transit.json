["^ ","~:output",["^ ","~:js","goog.provide('re_frame.utils');\ngoog.require('cljs.core');\ngoog.require('re_frame.loggers');\n/**\n * Dissociates an entry from a nested associative structure returning a new\n *   nested structure. keys is a sequence of keys. Any empty maps that result\n *   will not be present in the new structure.\n *   The key thing is that 'm' remains identical? to istelf if the path was never present\n */\nre_frame.utils.dissoc_in = (function re_frame$utils$dissoc_in(m,p__32394){\nvar vec__32400 = p__32394;\nvar seq__32401 = cljs.core.seq(vec__32400);\nvar first__32402 = cljs.core.first(seq__32401);\nvar seq__32401__$1 = cljs.core.next(seq__32401);\nvar k = first__32402;\nvar ks = seq__32401__$1;\nvar keys = vec__32400;\nif(ks){\nvar temp__5455__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar nextmap = temp__5455__auto__;\nvar newmap = (re_frame.utils.dissoc_in.cljs$core$IFn$_invoke$arity$2 ? re_frame.utils.dissoc_in.cljs$core$IFn$_invoke$arity$2(nextmap,ks) : re_frame.utils.dissoc_in.call(null,nextmap,ks));\nif(cljs.core.seq(newmap)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,newmap);\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,k);\n}\n} else {\nreturn m;\n}\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,k);\n}\n});\nre_frame.utils.first_in_vector = (function re_frame$utils$first_in_vector(v){\nif(cljs.core.vector_QMARK_(v)){\nreturn cljs.core.first(v);\n} else {\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: expected a vector, but got:\",v], 0));\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/utils.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.utils","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^I","~$cljs.core","^J","~$goog","^K"],"~:seen",["^B",["~:require"]],"~:uses",["^ ","~$console","^I"],"~:require-macros",["^ ","^J","^J"],"~:form",["~#list",["~$ns","^D",["^R",["^M",["^I","~:refer",["^O"]]]]]],"~:flags",["^ ","^M",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^K","^J","^I"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","re_frame/utils.cljc"],"~:compiled-at",1587374060273,"~:resource-name","re_frame/utils.cljc","~:warnings",[],"~:source","(ns re-frame.utils\n  (:require\n    [re-frame.loggers :refer [console]]))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to istelf if the path was never present\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn first-in-vector\n  [v]\n  (if (vector? v)\n    (first v)\n    (console :error \"re-frame: expected a vector, but got:\" v)))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;AAIA;;;;;;AAAA,AAAAA,AAAMO,AAKHC;AALH,AAAA,AAAAP,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAKMK;AALNP,AAKUQ;AALVT,AAKiBU;AALjB,AAME,AAAID;AACF,AAAAE,AAAiB,AAACE,AAAIN,AAAEC;AAAxB,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AACE,AAAME,AAAO,AAACR,AAAAA,AAAAA,AAAUM,AAAAA,AAAQH,AAAAA;AAAhC,AACE,AAAI,AAACP,AAAIY;AACP,AAACC,AAAMR,AAAEC,AAAEM;;AACX,AAACE,AAAOT,AAAEC;;;AACdD;;;AACF,AAACS,AAAOT,AAAEC;;;AAEd,AAAA,AAAMS,AACHC;AADH,AAEE,AAAI,AAACC,AAAQD;AACX,AAACd,AAAMc;;AACP,AAAA,AAAA,AAACE,AAAuDF","names",["p__32394","vec__32400","seq__32401","cljs.core/seq","first__32402","cljs.core/first","cljs.core/next","re-frame.utils/dissoc-in","m","k","ks","keys","temp__5455__auto__","nextmap","cljs.core.get.cljs$core$IFn$_invoke$arity$2","newmap","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.utils/first-in-vector","v","cljs.core/vector?","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic"]]],"~:cache-keys",["~#cmap",[["~:macro","^J"],[1587365553000],["^Y","goog/math/math.js"],[1584607223013,"^K","~$goog.array","~$goog.asserts"],["^Y","re_frame/loggers.cljc"],[1587370914423,"^K","^J","~$clojure.set"],["^Y","goog/array/array.js"],[1584607223013,"^K","^1<"],["^Y","goog/debug/error.js"],[1584607223013,"^K"],["^Y","goog/dom/nodetype.js"],[1584607223013,"^K"],["^Y","goog/object/object.js"],[1584607223013,"^K"],"~:SHADOW-TIMESTAMP",[1587365557000,1587365553000],["^Y","goog/math/long.js"],[1584607223013,"^K","^1<","~$goog.reflect"],["^Y","goog/functions/functions.js"],[1584607223013,"^K"],["^Y","goog/structs/map.js"],[1584607223013,"^K","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^Y","goog/asserts/asserts.js"],[1584607223013,"^K","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^Y","goog/uri/uri.js"],[1584607223013,"^K","^1;","^1<","^1E","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^Y","goog/base.js"],[1584607223013],["^Y","goog/structs/structs.js"],[1584607223013,"^K","^1;","^1B"],["^Y","goog/string/string.js"],[1584607223013,"^K"],["^Y","goog/reflect/reflect.js"],[1584607223013,"^K"],["^Y","goog/string/stringbuffer.js"],[1584607223013,"^K"],["^Y","goog/iter/iter.js"],[1584607223013,"^K","^1;","^1<","~$goog.functions","~$goog.math"],["^Y","re_frame/utils.cljc"],[1587370914423,"^K","^J","^I"],["^Y","cljs/core.cljs"],[1587365553008,"~$goog.math.Long","~$goog.math.Integer","^1E","^1B","^1;","~$goog.Uri","~$goog.string.StringBuffer"],["^Y","goog/math/integer.js"],[1584607223013,"^K"],["^Y","clojure/set.cljs"],[1587365553008,"^K","^J"],["^Y","goog/uri/utils.js"],[1584607223013,"^K","^1;","^1<","^1E"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/utils.cljc","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^J","^K","^K"],"^L",["^B",["^M"]],"^N",["^ ","^O","^I"],"~:defs",["^ ","~$dissoc-in",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/utils.cljc","^7",5,"^8",7,"^9",5,"^:",16,"~:arglists",["^R",["~$quote",["^R",[["~$m",["~$k","~$&","~$ks","~:as","~$keys"]]]]]],"~:doc","Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to istelf if the path was never present"],"^C","~$re-frame.utils/dissoc-in","^6","re_frame/utils.cljc","^:",16,"~:method-params",["^R",[["~$m","~$p__32394"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^8",1,"~:variadic?",false,"^7",5,"~:ret-tag",["^B",[null,"~$clj","~$any","~$clj-nil"]],"^9",5,"~:max-fixed-arity",2,"~:fn-var",true,"^1U",["^R",["^1V",["^R",[["~$m",["~$k","~$&","^1W","^1X","^1Y"]]]]]],"^1Z","Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to istelf if the path was never present"],"~$first-in-vector",["^ ","^1T",null,"^5",["^ ","^6","re_frame/utils.cljc","^7",20,"^8",7,"^9",20,"^:",22,"^1U",["^R",["^1V",["^R",[["~$v"]]]]]],"^C","~$re-frame.utils/first-in-vector","^6","re_frame/utils.cljc","^:",22,"^20",["^R",[["~$v"]]],"^22",null,"^23",["^R",[null,null]],"^8",1,"^24",false,"^7",20,"^25",["^B",["^27","^28"]],"^9",20,"^29",1,"^2:",true,"^1U",["^R",["^1V",["^R",[["~$v"]]]]]]],"^P",["^ ","^J","^J"],"~:cljs.analyzer/constants",["^ ","^L",["^B",["~:error"]],"~:order",["^2>"]],"^U",["^ ","^M",["^B",[]]],"^V",["^ "],"^W",["^K","^J","^I"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^19",[["^2B","~:static-fns"],true,["^2B","~:elide-asserts"],false,["^2B","~:optimize-constants"],null,["^2B","^10"],null,["^2B","~:external-config"],null,["^2B","~:tooling-config"],null,["^2B","~:emit-constants"],null,["^2B","~:load-tests"],null,["^2B","~:infer-externs"],true,["^2B","^12"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2B","~:fn-invoke-direct"],null,["^2B","~:source-map"],"/dev/null"]]]