["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\ngoog.require('cljs.core');\ngoog.require('clojure.set');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),console.debug.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___38377 = arguments.length;\nvar i__4790__auto___38378 = (0);\nwhile(true){\nif((i__4790__auto___38378 < len__4789__auto___38377)){\nargs__4795__auto__.push((arguments[i__4790__auto___38378]));\n\nvar G__38379 = (i__4790__auto___38378 + (1));\ni__4790__auto___38378 = G__38379;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);\n});\n\n(re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nif(cljs.core.contains_QMARK_(cljs.core.deref(re_frame.loggers.loggers),level)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join(''),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__38369 = cljs.core.deref(re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__38369) : level.call(null,G__38369));\n})(),args);\n}));\n\n(re_frame.loggers.console.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(re_frame.loggers.console.cljs$lang$applyTo = (function (seq38357){\nvar G__38358 = cljs.core.first(seq38357);\nvar seq38357__$1 = cljs.core.next(seq38357);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__38358,seq38357__$1);\n}));\n\n/**\n * Change the set (or a subset) of logging functions used by re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(re_frame.loggers.loggers)))))){\n} else {\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^K","~$cljs.core","^L","~$goog","^M"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$difference","^K"],"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^F",["^T",["^O",["^K","~:refer",["^Q"]]]]]],"~:flags",["^ ","^O",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1611071562899,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :debug     (js/console.debug.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :debug    (partial log :debug)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAACG,AAAsBH,AACvB,AAAI,AAASA,AACX,AAACI,AAAsBJ,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACK,AAAyBL;AAD5B,AAAA;;AAW7B,AAAA,AAAA,AAAAM,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAQC;AADX,AAEE,AAAQ,AAAA,AAAAE,AAACC,AAAWzB,AAAQqB;AAA5B;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAmC,AAAA,AAAiDF;;;AACpF,AAACK,AAAM,AAAAC,AAAA,AAAAH,AAAQxB;AAAR,AAAA,AAAA2B,AAAAA,AAACN,AAAAA,AAAAA;AAAgBC;;;AAH1B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA;;;;AAAA,AAAMY,AAGHC;AAHH,AAIE,AAAS,AAACC,AAAO,AAACC,AAAW,AAACC,AAAI,AAACC,AAAKJ,AAAc,AAAA,AAAA,AAAAL,AAAKxB,AAAQiC,AAAKD;AAAxE;AAAA,AAAA,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACW,AAAMlC,AAAQmC,AAAMN;;AAEvB;;;AAAA,AAAMO;AAAN,AAAA,AAAAZ,AAGGxB","names",["re-frame.loggers/loggers","cljs.core.atom","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.debug.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","seq38357","G__38358","cljs.core/first","cljs.core/next","self__4776__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply","G__38369","re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_","cljs.core/merge","re-frame.loggers/get-loggers"]],"~:used-vars",["^D",["~$cljs.core/keys","~$re-frame.loggers/set-loggers!","~$cljs.core/deref","~$js/console.group.bind","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/atom","~$js/console","~$cljs.core/set","~$cljs.core/empty?","~$js/console.warn.bind","~$cljs.core/contains?","~$js/console.debug.bind","~$js/console.error.bind","~$cljs.core/swap!","~$js/console.groupEnd.bind","~$clojure.set/difference","~$js/console.log.bind","~$cljs.core/merge","~$re-frame.loggers/loggers","~$js/Error","~$re-frame.loggers/get-loggers"]]],"~:cache-keys",["~#cmap",[["^[","goog/dom/tagname.js"],[1611071510313,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^M","~$goog.dom.HtmlElement"]]],["^[","goog/math/math.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","~$goog.array","~$goog.asserts"]]],["^[","goog/html/trustedtypes.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/labs/useragent/browser.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1X","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^[","goog/html/safeurl.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^20"]]],["^[","re_frame/loggers.cljc"],[1611071514186,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^L","^K"]]],["^[","goog/array/array.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y"]]],["^[","goog/debug/error.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/dom/nodetype.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/string/typedstring.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/object/object.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/dom/asserts.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y"]]],"~:SHADOW-TIMESTAMP",[1611071515000,1611071515000,1611071513000],["^[","goog/math/long.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y","~$goog.reflect"]]],["^[","goog/html/trustedresourceurl.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y","~$goog.html.trustedtypes","^23","^24","^25","^26"]]],["^[","goog/string/internal.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/functions/functions.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/html/safestyle.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1X","^1Y","~$goog.html.SafeUrl","^25","^26","^20"]]],["^[","goog/dom/safe.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2:","^22","~$goog.html.uncheckedconversions","^25","^20"]]],["^[","goog/structs/map.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^[","goog/html/safehtml.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1X","^1Y","~$goog.dom.TagName","~$goog.dom.tags","^2>","^2?","~$goog.html.SafeStyleSheet","^2:","^22","^29","^23","^24","~$goog.labs.userAgent.browser","^1[","^25","^26","^20"]]],["^[","goog/dom/tags.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1["]]],["^[","goog/asserts/asserts.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1X","^1Y","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/i18n/bidi.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/fs/url.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/base.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",[]]],["^[","goog/structs/structs.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1X","^1["]]],["^[","goog/string/string.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","~$goog.dom.safe","^2@","^25","^20"]]],["^[","goog/reflect/reflect.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/labs/useragent/util.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^20"]]],["^[","goog/string/stringbuffer.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","goog/iter/iter.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1X","^1Y","^2<","~$goog.math"]]],["^[","goog/html/uncheckedconversions.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y","^2=","^2>","^2?","^2E","^2:","^22","^25","^20"]]],["^[","goog/dom/htmlelement.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M"]]],["^[","cljs/core.cljs"],[1611071513180,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","~$goog.math.Long","~$goog.math.Integer","^2I","^1[","^1X","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/html/safescript.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y","^29","^25","^26"]]],["^[","goog/html/safestylesheet.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1X","^1Y","^2?","^1[","^25","^26","^20"]]],["^[","goog/math/integer.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^28"]]],["^[","clojure/set.cljs"],[1611071513180,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^L"]]],["^[","goog/uri/utils.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1X","^1Y","^2I"]]],["^[","goog/string/const.js"],[1611071510313,"^1S",["^ ","^1T",null,"^1U",["^D",[]],"^1V",["^M","^1Y","^26"]]]]],"~:clj-info",["^ ","jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1611071506000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1611071507000,"jar:file:/home/mark/.m2/repository/binaryage/devtools/1.0.0/devtools-1.0.0.jar!/devtools/defaults.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1611071513000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M"],"^N",["^D",["^O"]],"~:shadow/js-access-global",["^D",["Error"]],"^P",["^ ","^Q","^K"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^3G",true,"^E","^1N","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",37,"^8",7,"^9",37,"^:",14,"~:arglists",["^T",["~$quote",["^T",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^T",["^3O","^3P"]]],"^3M",["^T",[["^3O","~$&","^3P"]]],"~:arglists-meta",["^T",[null]]]],"^E","^1@","^6","re_frame/loggers.cljc","^:",14,"^3Q",["^ ","^3R",true,"^3S",1,"^3T",1,"^3U",[["^T",["^3O","^3P"]]],"^3M",["^T",[["^3O","~$&","^3P"]]],"^3V",["^T",[null]]],"^3U",[["^T",["^3O","^3P"]]],"~:protocol-impl",null,"^3S",1,"^3V",["^T",[null]],"^8",1,"^3R",true,"~:methods",[["^ ","^3S",1,"^3R",true,"^3H","~$any"]],"^7",37,"~:ret-tag","^3Y","^9",37,"^3T",1,"~:fn-var",true,"^3M",["^T",[["^3O","~$&","^3P"]]]],"~$set-loggers!",["^ ","^3L",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",43,"^8",7,"^9",43,"^:",19,"^3M",["^T",["^3N",["^T",[["~$new-loggers"]]]]],"^3J","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^E","^1<","^6","re_frame/loggers.cljc","^:",19,"^3U",["^T",[["^41"]]],"^3W",null,"^3V",["^T",[null,null]],"^8",1,"^3R",false,"^7",43,"^3Z",["^D",[null,"^3Y"]],"^9",43,"^3T",1,"^3[",true,"^3M",["^T",["^3N",["^T",[["^41"]]]]],"^3J","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^3L",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",50,"^8",7,"^9",50,"^:",18,"^3M",["^T",["^3N",["^T",[[]]]]],"^3J","Get the current logging functions used by re-frame."],"^E","^1P","^6","re_frame/loggers.cljc","^:",18,"^3U",["^T",[[]]],"^3W",null,"^3V",["^T",[null,null]],"^8",1,"^3R",false,"^7",50,"^3Z","^3Y","^9",50,"^3T",0,"^3[",true,"^3M",["^T",["^3N",["^T",[[]]]]],"^3J","Get the current logging functions used by re-frame."]],"^R",["^ ","^L","^L"],"~:cljs.analyzer/constants",["^ ","^N",["^D",["~:group","~:warn","~:debug","~:error","~:groupEnd","~:log"]],"~:order",["^49","^45","^47","^46","^44","^48"]],"^W",["^ ","^O",["^D",[]]],"^X",["^ "],"^Y",["^M","^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^1R",[["^4=","~:static-fns"],true,["^4=","~:shadow-tweaks"],null,["^4=","~:source-map-inline"],null,["^4=","~:elide-asserts"],false,["^4=","~:optimize-constants"],null,["^4=","^12"],null,["^4=","~:external-config"],null,["^4=","~:tooling-config"],null,["^4=","~:emit-constants"],null,["^4=","~:load-tests"],null,["^4=","~:form-size-threshold"],null,["^4=","~:infer-externs"],true,["^4=","^14"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4=","~:fn-invoke-direct"],null,["^4=","~:source-map"],"/dev/null"]]]