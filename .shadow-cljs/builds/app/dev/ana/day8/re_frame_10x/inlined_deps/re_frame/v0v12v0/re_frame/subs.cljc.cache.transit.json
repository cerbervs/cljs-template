["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs');\ngoog.require('cljs.core');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace');\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind = new cljs.core.Keyword(null,\"sub\",\"sub\",-2093760025);\nif(cljs.core.truth_((day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind) : day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind)))){\n} else {\nthrow (new Error(\"Assert failed: (registrar/kinds kind)\"));\n}\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n/**\n * Causes all subscriptions to be removed from the cache.\n *   Does this by:\n *   1. running `on-dispose` on all cached subscriptions\n *   2. Each `on-dispose` will perform the removal of themselves.\n * \n *   This is for development time use. Useful when reloading Figwheel code\n *   after a React exception, because React components won't have been\n *   cleaned up properly. And this, in turn, means the subscriptions within those\n *   components won't have been cleaned up correctly. So this forces the issue.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.clear_subscription_cache_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$clear_subscription_cache_BANG_(){\nvar seq__34432_34564 = cljs.core.seq(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction));\nvar chunk__34433_34565 = null;\nvar count__34434_34566 = (0);\nvar i__34435_34567 = (0);\nwhile(true){\nif((i__34435_34567 < count__34434_34566)){\nvar vec__34468_34568 = chunk__34433_34565.cljs$core$IIndexed$_nth$arity$2(null,i__34435_34567);\nvar k_34569 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34468_34568,(0),null);\nvar rxn_34570 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34468_34568,(1),null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.dispose_BANG_(rxn_34570);\n\n\nvar G__34571 = seq__34432_34564;\nvar G__34572 = chunk__34433_34565;\nvar G__34573 = count__34434_34566;\nvar G__34574 = (i__34435_34567 + (1));\nseq__34432_34564 = G__34571;\nchunk__34433_34565 = G__34572;\ncount__34434_34566 = G__34573;\ni__34435_34567 = G__34574;\ncontinue;\n} else {\nvar temp__5735__auto___34575 = cljs.core.seq(seq__34432_34564);\nif(temp__5735__auto___34575){\nvar seq__34432_34576__$1 = temp__5735__auto___34575;\nif(cljs.core.chunked_seq_QMARK_(seq__34432_34576__$1)){\nvar c__4609__auto___34577 = cljs.core.chunk_first(seq__34432_34576__$1);\nvar G__34578 = cljs.core.chunk_rest(seq__34432_34576__$1);\nvar G__34579 = c__4609__auto___34577;\nvar G__34580 = cljs.core.count(c__4609__auto___34577);\nvar G__34581 = (0);\nseq__34432_34564 = G__34578;\nchunk__34433_34565 = G__34579;\ncount__34434_34566 = G__34580;\ni__34435_34567 = G__34581;\ncontinue;\n} else {\nvar vec__34474_34582 = cljs.core.first(seq__34432_34576__$1);\nvar k_34583 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34474_34582,(0),null);\nvar rxn_34584 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34474_34582,(1),null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.dispose_BANG_(rxn_34584);\n\n\nvar G__34585 = cljs.core.next(seq__34432_34576__$1);\nvar G__34586 = null;\nvar G__34587 = (0);\nvar G__34588 = (0);\nseq__34432_34564 = G__34585;\nchunk__34433_34565 = G__34586;\ncount__34434_34566 = G__34587;\ni__34435_34567 = G__34588;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction)))){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Subscription cache should be empty after clearing it.\"], 0));\n} else {\nreturn null;\n}\n});\n/**\n * Unregisters all existing subscription handlers\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.clear_all_handlers_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$clear_all_handlers_BANG_(){\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind);\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.clear_subscription_cache_BANG_();\n});\n/**\n * cache the reaction r\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$cache_and_return(query_v,dynv,r){\nvar cache_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dynv], null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.add_on_dispose_BANG_(r,(function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__34477 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__34478 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query_v),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"dispose\",\"sub/dispose\",365440536),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_v,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(r)], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__34478);\n\ntry{try{return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction,(function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n}));\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__34378__auto___34589 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__34379__auto___34590 = (end__34378__auto___34589 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__34379__auto___34590,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__34378__auto___34589);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__34477);\n}} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction,(function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n}));\n}\n}));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction,(function (query_cache){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.debug_enabled_QMARK_){\nif(cljs.core.contains_QMARK_(query_cache,cache_key)){\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\",cache_key], 0));\n} else {\n}\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_cache,cache_key,r);\n}));\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34591 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(r)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(r)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34591);\n\n} else {\n}\n\nreturn r;\n});\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$cache_lookup(var_args){\nvar G__34482 = arguments.length;\nswitch (G__34482) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1 = (function (query_v){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query_v,cljs.core.PersistentVector.EMPTY);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2 = (function (query_v,dyn_v){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dyn_v], null));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given a `query`, returns a Reagent `reaction` which, over\n *   time, reactively delivers a stream of values. So in FRP-ish terms,\n *   it returns a `Signal`.\n * \n *   To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n * \n *   `query` is a vector of at least one element. The first element is the\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\n *   elements are optional, additional values which parameterise the query\n *   performed.\n * \n *   `dynv` is an optional 3rd argument, which is a vector of further input\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\n *   historical reasons and is borderline deprecated these days.\n * \n *   Example Usage:\n *   --------------\n * \n *  (subscribe [:items])\n *  (subscribe [:items \"blue\" :small])\n *  (subscribe [:items {:colour \"blue\"  :size :small}])\n * \n *   Note: for any given call to `subscribe` there must have been a previous call\n *   to `reg-sub`, registering the query handler (function) for the `query-id` given.\n * \n *   Hint\n *   ----\n * \n *   When used in a view function BE SURE to `deref` the returned value.\n *   In fact, to avoid any mistakes, some prefer to define:\n * \n *   (def <sub  (comp deref re-frame.core/subscribe))\n * \n *   And then, within their views, they call  `(<sub [:items :small])` rather\n *   than using `subscribe` directly.\n * \n *   De-duplication\n *   --------------\n * \n *   XXX\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subscribe(var_args){\nvar G__34488 = arguments.length;\nswitch (G__34488) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__34489 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__34490 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__34490);\n\ntry{try{var temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34594 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34594);\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34595 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34595);\n\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34596 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34596);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,query) : handler_fn.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,query)));\n}\n}\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__34378__auto___34597 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__34379__auto___34598 = (end__34378__auto___34597 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__34379__auto___34598,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__34378__auto___34597);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__34489);\n}} else {\nvar temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34599 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34599);\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34600 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34600);\n\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34604 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34604);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,query) : handler_fn.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,query)));\n}\n}\n}\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__34497 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__34498 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dynv], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__34498);\n\ntry{try{var temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34605 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34605);\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34606 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34606);\n\n} else {\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5735__auto___34607 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5735__auto___34607)){\nvar not_reactive_34610 = temp__5735__auto___34607;\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_34610], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34611 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34611);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n}));\nvar sub = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nvar G__34499 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db;\nvar G__34500 = query;\nvar G__34501 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__34499,G__34500,G__34501) : handler_fn.call(null,G__34499,G__34500,G__34501));\n}));\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return(query,dynv,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n})));\n}\n}\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__34378__auto___34614 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__34379__auto___34615 = (end__34378__auto___34614 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__34379__auto___34615,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__34378__auto___34614);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__34497);\n}} else {\nvar temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34617 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34617);\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34619 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34619);\n\n} else {\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5735__auto___34621 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5735__auto___34621)){\nvar not_reactive_34622 = temp__5735__auto___34621;\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_34622], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34623 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34623);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n}));\nvar sub = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nvar G__34504 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db;\nvar G__34505 = query;\nvar G__34506 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__34504,G__34505,G__34506) : handler_fn.call(null,G__34504,G__34505,G__34506));\n}));\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return(query,dynv,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n})));\n}\n}\n}\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns a new version of 'm' in which 'f' has been applied to each value.\n *   (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_vals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$map_vals(f,m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(m),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__34507){\nvar vec__34508 = p__34507;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34508,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34508,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null);\n})),m);\n});\n/**\n * Runs f over signals. Signals may take several\n *   forms, this function handles all of them.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_signals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$map_signals(f,signals){\nif(cljs.core.sequential_QMARK_(signals)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_vals(f,signals);\n} else {\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.deref_QMARK_(signals)){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(signals) : f.call(null,signals));\n} else {\nreturn cljs.core.List.EMPTY;\n\n}\n}\n}\n});\n/**\n * Coerces x to a seq if it isn't one already\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.to_seq = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$to_seq(x){\nif(cljs.core.sequential_QMARK_(x)){\nreturn x;\n} else {\nreturn (new cljs.core.List(null,x,null,(1),null));\n}\n});\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$deref_input_signals(signals,query_id){\nvar dereffed_signals = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_signals(cljs.core.deref,signals);\nif(cljs.core.sequential_QMARK_(signals)){\ncljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_vals(cljs.core.deref,signals);\n} else {\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.deref_QMARK_(signals)){\ncljs.core.deref(signals);\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: in the reg-sub for\",query_id,\", the input-signals function returns:\",signals], 0));\n\n}\n}\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34636 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.to_seq(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_signals(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id,signals)))], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.to_seq(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_signals(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id,signals)))], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34636);\n\n} else {\n}\n\nreturn dereffed_signals;\n});\n/**\n * For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n *   \n *   During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n *   will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n *   needs to know how to create the node.   By calling `reg-sub`, you are registering \n *   'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n * \n *   Repeating: calling `reg-sub` does not create a node. It only creates the template\n *   from which nodes can be created later. \n *   \n *   `reg-sub` arguments are:  \n *  - a `query-id` (typically a namespaced keyword)\n *  - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n *  - a function which computes the value of this kind of node \n * \n *   The `computation function` is always the last argument supplied and it is expected to have the signature: \n *  `(input-values, query-vector) -> a-value`\n *   \n *   When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n *   the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n *   then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n * \n *   The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n *   but whatever is there defines the `input signals` part of the template, controlling what input \n *  values \"flow into\" the `computation function` gets when it is called. \n * \n *   `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n *   But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n *   two are really just sugary variations. \n * \n *   1. No input signals given:\n *    ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n * \n *   In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n *   and, as a result, the value within `app-db` (a map) is\n *   is given as the 1st argument when `a-computation-fn` is called.   \n *  \n * \n *   2. A signal function is explicitly supplied:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     signal-fn     ;; <-- here\n *     computation-fn)\n *   ```\n *   \n *   This is the most canonical and instructive of the three variations.\n *   \n *   When a node is created from the template, the `signal-fn` will be called and it\n *   is expected to return the input signal(s) as either a singleton, if there is only\n *   one, or a sequence if there are many, or a map with the signals as the values.\n * \n *   The values from returned nominated signals will be supplied as the 1st argument to  \n *   the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n *   this value will be either a singleton, sequence or map of them (paralleling\n *   the structure returned by the `signal-fn`).\n * \n *   This example `signal-fn` returns a vector of input signals.\n *     ```clj\n *     (fn [query-vec dynamic-vec]\n *       [(subscribe [:a-sub])\n *        (subscribe [:b-sub])])\n *     ```\n *   The associated computation function must be written\n *   to expect a vector of values for its first argument:\n *     ```clj\n *     (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n *       ....)\n *      ```\n * \n *   If, on the other hand, the signal function was simpler and returned a singleton, like this:\n *      ```clj\n *      (fn [query-vec dynamic-vec]\n *        (subscribe [:a-sub]))\n *      ```\n *   then the associated computation function must be written to expect a single value\n *   as the 1st argument:\n *      ```clj\n *      (fn [a query-vec]       ;; 1st argument is a single value\n *        ...)\n *      ```\n *  \n *   Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n *     ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *   is the equivalent of using this\n *   2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n *     a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *  \n *   3. Syntax Sugar\n * \n *   ```clj\n *   (reg-sub\n *     :a-b-sub\n *     :<- [:a-sub]\n *     :<- [:b-sub]\n *     (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n *       {:a a :b b}))\n *   ```\n * \n *   This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n *   `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n * \n *   If you supply only one pair a singleton will be supplied to the computation function, \n *   as if you had supplied a `signal-fn` returning only a single value:\n * \n *   ```clj\n *   (reg-sub\n *     :a-sub\n *     :<- [:a-sub]\n *     (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n *       ...))\n *   ```\n * \n *   For further understanding, read `/docs`, and look at the detailed comments in\n *   /examples/todomvc/src/subs.cljs\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$reg_sub(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___34637 = arguments.length;\nvar i__4790__auto___34638 = (0);\nwhile(true){\nif((i__4790__auto___34638 < len__4789__auto___34637)){\nargs__4795__auto__.push((arguments[i__4790__auto___34638]));\n\nvar G__34639 = (i__4790__auto___34638 + (1));\ni__4790__auto___34638 = G__34639;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\nvar computation_fn = cljs.core.last(args);\nvar input_args = cljs.core.butlast(args);\nvar err_header = [\"re-frame: reg-sub for \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\", \"].join('');\nvar inputs_fn = (function (){var G__34529 = cljs.core.count(input_args);\nswitch (G__34529) {\ncase (0):\nreturn (function() {\nvar G__34643 = null;\nvar G__34643__1 = (function (_){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db;\n});\nvar G__34643__2 = (function (_,___$1){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db;\n});\nG__34643 = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn G__34643__1.call(this,_);\ncase 2:\nreturn G__34643__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__34643.cljs$core$IFn$_invoke$arity$1 = G__34643__1;\nG__34643.cljs$core$IFn$_invoke$arity$2 = G__34643__2;\nreturn G__34643;\n})()\n\nbreak;\ncase (1):\nvar f = cljs.core.first(input_args);\nif(cljs.core.fn_QMARK_(f)){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"2nd argument expected to be an inputs function, got:\",f], 0));\n}\n\nreturn f;\n\nbreak;\ncase (2):\nvar vec__34531 = input_args;\nvar marker = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34531,(0),null);\nvar vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34531,(1),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),marker)){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected :<-, got:\",marker], 0));\n}\n\nreturn (function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1 = (function (_){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1;\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn;\n})()\n\nbreak;\ndefault:\nvar pairs = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),input_args);\nvar markers = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs);\nvar vecs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.last,pairs);\nif(((cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),null], null), null),markers)) && (cljs.core.every_QMARK_(cljs.core.vector_QMARK_,vecs)))){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected pairs of :<- and vectors, got:\",pairs], 0));\n}\n\nreturn (function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1 = (function (_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe,vecs);\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe,vecs);\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1;\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn;\n})()\n\n}\n})();\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.register_handler(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id,(function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__2 = (function (db,query_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$1 ? inputs_fn.cljs$core$IFn$_invoke$arity$1(query_vec) : inputs_fn.call(null,query_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__34537 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__34538 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__34538);\n\ntry{try{var subscription = (function (){var G__34543 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__34544 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__34543,G__34544) : computation_fn.call(null,G__34543,G__34544));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34645 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34645);\n\n} else {\n}\n\nreturn subscription;\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__34378__auto___34646 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__34379__auto___34647 = (end__34378__auto___34646 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__34379__auto___34647,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__34378__auto___34646);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__34537);\n}} else {\nvar subscription = (function (){var G__34546 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__34547 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__34546,G__34547) : computation_fn.call(null,G__34546,G__34547));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34648 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34648);\n\n} else {\n}\n\nreturn subscription;\n}\n}));\ncljs.core.reset_BANG_(reaction_id,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__3 = (function (db,query_vec,dyn_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$2 ? inputs_fn.cljs$core$IFn$_invoke$arity$2(query_vec,dyn_vec) : inputs_fn.call(null,query_vec,dyn_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__34549 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__34550 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dyn_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__34550);\n\ntry{try{var subscription = (function (){var G__34551 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__34552 = query_vec;\nvar G__34553 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__34551,G__34552,G__34553) : computation_fn.call(null,G__34551,G__34552,G__34553));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34649 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34649);\n\n} else {\n}\n\nreturn subscription;\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__34378__auto___34650 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__34379__auto___34651 = (end__34378__auto___34650 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__34379__auto___34651,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__34378__auto___34650);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__34549);\n}} else {\nvar subscription = (function (){var G__34555 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__34556 = query_vec;\nvar G__34557 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__34555,G__34556,G__34557) : computation_fn.call(null,G__34555,G__34556,G__34557));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__34380__auto___34652 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__34380__auto___34652);\n\n} else {\n}\n\nreturn subscription;\n}\n}));\ncljs.core.reset_BANG_(reaction_id,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn = function(db,query_vec,dyn_vec){\nswitch(arguments.length){\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__2.call(this,db,query_vec);\ncase 3:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__3.call(this,db,query_vec,dyn_vec);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__2;\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$3 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__3;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn;\n})()\n);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub.cljs$lang$applyTo = (function (seq34518){\nvar G__34519 = cljs.core.first(seq34518);\nvar seq34518__$1 = cljs.core.next(seq34518);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__34519,seq34518__$1);\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",66],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar","^K","~$cljs.core","^L","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers","^M","~$goog","^N","~$registrar","^K","~$trace","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop","^R","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db","^S","^Q","^Q","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.utils","^T"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$reagent-id","^R","~$console","^M","~$app-db","^S","~$dispose!","^R","~$add-on-dispose!","^R","~$make-reaction","^R","~$get-handler","^K","~$first-in-vector","^T","~$deref?","^R","~$ratom?","^R","~$debug-enabled?","^R","~$clear-handlers","^K","~$register-handler","^K"],"~:require-macros",["^ ","^Q","^Q","^P","^Q","^L","^L"],"~:form",["~#list",["~$ns","^F",["^1;",["^V",["^S","~:refer",["^Z"]],["^R","^1=",["^10","^16","^11","^15","^14","^[","^X"]],["^M","^1=",["^Y"]],["^T","^1=",["^13"]],["^K","~:as","^O","^1=",["^12","^17","^18"]],["^Q","^1>","^P","~:include-macros",true]]]]],"~:flags",["^ ","^V",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^N","^L","^S","^R","^M","^T","^K","^Q"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc"],"~:compiled-at",1611071560682,"~:resource-name","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","~:warnings",[],"~:source","(ns day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs\n (:require\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db        :refer [app-db]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers   :refer [console]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.utils     :refer [first-in-vector]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar :as registrar :refer [get-handler clear-handlers register-handler]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue.\"\n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"Subscription cache should be empty after clearing it.\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn subscribe\n  \"Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \\\"blue\\\" :small])\n    (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  \"\n\n  ([query]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n\n(defn reg-sub\n  \"For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \\\"blue\\\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \\\"blue\\\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \\\"blue\\\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \\\"flow into\\\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  \"\n  [query-id & args]\n  (let [computation-fn (last args)\n        input-args     (butlast args) ;; may be empty, or one signal fn, or pairs of  :<- / vector\n        err-header     (str \"re-frame: reg-sub for \" query-id \", \")\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map last pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/query->reaction","cljs.core.atom","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-subscription-cache!","seq__34432","cljs.core/seq","cljs.core/deref","chunk__34433","count__34434","i__34435","vec__34468","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__34474","cljs.core/first","cljs.core/next","k","rxn","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/dispose!","cljs.core/not-empty","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-all-handlers!","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.clear_handlers","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/add-on-dispose!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__34477","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/*current-trace*","*current-trace*-temp-val__34478","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/start-trace","end__34378__auto__","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/now","duration__34379__auto__","cljs.core.swap_BANG_","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/run-tracing-callbacks!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.utils/first-in-vector","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/reagent-id","query-cache","cljs.core/contains?","cljs.core.get","cljs.core.dissoc","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/debug-enabled?","new-trace__34380__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","var_args","G__34482","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/cache-lookup","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup","dyn-v","G__34488","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/subscribe","query","*current-trace*-orig-val__34489","*current-trace*-temp-val__34490","temp__5733__auto__","cached","query-id","handler-fn","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db/app-db","*current-trace*-orig-val__34497","*current-trace*-temp-val__34498","not-reactive","cljs.core.remove","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/ratom?","dyn-vals","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/make-reaction","cljs.core.mapv","sub","G__34499","G__34500","G__34501","G__34504","G__34505","G__34506","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/map-vals","f","m","cljs.core.into","cljs.core/empty","cljs.core.map","p__34507","vec__34508","v","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core/map?","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/deref?","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/to-seq","x","cljs.core/List","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/reg-sub","seq34518","G__34519","self__4776__auto__","args","computation-fn","cljs.core/last","input-args","cljs.core/butlast","err-header","inputs-fn","G__34529","_","cljs.core/fn?","vec__34531","marker","vec","cljs.core._EQ_","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe","pairs","cljs.core.partition","markers","vecs","cljs.core/every?","cljs.core/vector?","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/register-handler","db","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__34537","*current-trace*-temp-val__34538","subscription","G__34543","G__34544","G__34546","G__34547","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__34549","*current-trace*-temp-val__34550","G__34551","G__34552","G__34553","G__34555","G__34556","G__34557"]],"~:used-vars",["^D",["~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/kinds","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/traces","~$cljs.core/sequential?","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/query->reaction","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/map-vals","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/map-signals","~$cljs.core/count","~$cljs.core/deref","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/kind","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/make-reaction","~$cljs.core/dissoc","~$cljs.core/chunk-rest","~$cljs.core/atom","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/to-seq","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db/app-db","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/cache-and-return","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/reagent-id","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/dispose!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/reg-sub","~$cljs.core/contains?","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/*current-trace*","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/conj","~$cljs.core/map","~$cljs.core/List","~$cljs.core/empty","~$cljs.core/swap!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-all-handlers!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/console","~$cljs.core/get","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/add-on-dispose!","~$cljs.core/not-empty","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/register-handler","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/debug-enabled?","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/now","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-subscription-cache!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/run-tracing-callbacks!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/cache-lookup","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/clear-handlers","~$cljs.core/next","~$cljs.core/assoc","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/subscribe","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/is-trace-enabled?","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/deref-input-signals","~$js/Error","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/deref?","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1611071515000,1611071515000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1D","goog/dom/tagname.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.dom.HtmlElement"]]],["^1D","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/ratom.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.util","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.batching","~$clojure.set","~$goog.object"]]],["^1D","goog/labs/useragent/platform.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.labs.userAgent.util","~$goog.string"]]],["^1D","goog/math/math.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.array","~$goog.asserts"]]],["^1D","goog/html/trustedtypes.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","goog/labs/useragent/browser.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^39","^38","~$goog.string.internal"]]],["^1D","goog/html/safeurl.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3="]]],["^1D","goog/array/array.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<"]]],["^2W","node_modules/prop-types/checkPropTypes.js"],[1611071515000,1611071515000,1549836454000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1D","goog/useragent/useragent.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^39","~$goog.reflect","^3:"]]],["^1D","goog/debug/error.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","goog/dom/nodetype.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^2W","node_modules/scheduler/cjs/scheduler.development.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30"]]],["^2W","node_modules/scheduler/cjs/scheduler.production.min.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30"]]],["^1D","goog/string/typedstring.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^2W","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30"]]],["^2W","node_modules/react/index.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1D","shadow/js.js"],[1611071515463,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","goog/object/object.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","goog/dom/asserts.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<"]]],["^2W","node_modules/react-dom/cjs/react-dom.production.min.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1611071515000,1611071515000,1611071513000],["^2W","node_modules/react/cjs/react.development.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30","^3K","~$module$node_modules$prop_types$checkPropTypes"]]],["^1D","goog/math/long.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<","^3H"]]],["^1D","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/util.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","~$clojure.string"]]],["^1D","goog/html/trustedresourceurl.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<","~$goog.html.trustedtypes","^3@","^3A","^3B","^3C"]]],["^1D","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/core.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^?","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.template","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.component","^34","^36","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.ratom","^35","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.dom"]]],["^1D","goog/string/internal.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^2W","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30"]]],["^1D","goog/functions/functions.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","goog/html/safestyle.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^3<","~$goog.html.SafeUrl","^3B","^3C","^3="]]],["^1D","goog/dom/safe.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3U","^3?","~$goog.html.uncheckedconversions","^3B","^3="]]],["^1D","clojure/walk.cljs"],[1611071513180,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L"]]],["^1D","goog/structs/map.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1D","goog/html/safehtml.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^3<","~$goog.dom.TagName","~$goog.dom.tags","^3Y","^3Z","~$goog.html.SafeStyleSheet","^3U","^3?","^3P","^3@","^3A","^3E","^38","^3B","^3C","^3="]]],["^1D","goog/dom/tags.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^38"]]],["^1D","goog/math/size.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/batching.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^35","^34"]]],["^2W","node_modules/scheduler/index.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1D","goog/labs/useragent/engine.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^39","^3:"]]],["^1D","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^S","^R","^M","^T","^K","^Q"]]],["^1D","goog/dom/dom.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^3<","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^42","~$goog.dom.safe","^3X","^3[","~$goog.math.Coordinate","~$goog.math.Size","^38","^3:","~$goog.string.Unicode","~$goog.userAgent"]]],["^1D","goog/asserts/asserts.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.debug.Error","^48"]]],["^1D","goog/uri/uri.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^3<","^3:","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1D","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/dom.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^A","^34","^3Q","^36","^3S"]]],["^1D","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interop.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","~$goog.async.nextTick","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core","^3S"]]],["^1D","goog/i18n/bidi.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^2W","node_modules/object-assign/index.js"],[1611071515000,1611071515000,1484580833000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30"]]],["^1D","goog/fs/url.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/trace.cljc"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^R","^M","^3W"]]],["^1D","goog/base.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",[]]],["^1D","goog/structs/structs.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^38"]]],["^1D","clojure/string.cljs"],[1611071513180,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^3:","~$goog.string.StringBuffer"]]],["^2W","node_modules/react/cjs/react.production.min.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30","^3K"]]],["^1D","goog/debug/entrypointregistry.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<"]]],["^1D","goog/string/string.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^49","^3[","^3B","^3="]]],["^1D","goog/reflect/reflect.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","goog/labs/useragent/util.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3="]]],["^1D","goog/string/stringbuffer.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","goog/math/coordinate.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.math"]]],["^1D","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/template.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^?","^3O","~$clojure.walk","^34","^3R","^36","^3S","^35","^38"]]],["^1D","goog/iter/iter.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^3<","^3W","^4G"]]],["^1D","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/db.cljc"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^R"]]],["^1D","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^37"]]],["^1D","goog/async/nexttick.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.debug.entryPointRegistry","~$goog.dom","^42","^49","^3W","^3X","^3?","^3E","^3F","^3B"]]],["^1D","goog/html/uncheckedconversions.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<","^3X","^3Y","^3Z","^44","^3U","^3?","^3B","^3="]]],["^1D","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/debug.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L"]]],["^2W","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1611071515000,1611071515000,1549571078000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30"]]],["^1D","goog/dom/htmlelement.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N"]]],["^1D","cljs/core.cljs"],[1611071513180,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","~$goog.math.Long","~$goog.math.Integer","^3:","^38","^3;","~$goog.Uri","^4F"]]],["^1D","goog/html/safescript.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<","^3P","^3B","^3C"]]],["^1D","goog/html/safestylesheet.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^3<","^3Z","^38","^3B","^3C","^3="]]],["^1D","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/utils.cljc"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^M"]]],["^1D","goog/math/integer.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3H"]]],["^1D","goog/dom/browserfeature.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^4="]]],["^2W","node_modules/scheduler/tracing.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^2W","node_modules/react-dom/cjs/react-dom.development.js"],[1611071515000,1611071515000,499162500000,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^30","^?","^3K","^3L","^3N","~$module$node_modules$scheduler$tracing"]]],["^1D","clojure/set.cljs"],[1611071513180,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L"]]],["^1D","goog/uri/utils.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3;","^3<","^3:"]]],["^1D","goog/string/const.js"],[1611071510313,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^3<","^3C"]]],["^1D","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/registrar.cljc"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^R","^M"]]],["^1D","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/component.cljs"],[1611071514450,"^2X",["^ ","^2Y",null,"^2Z",["^D",[]],"^2[",["^N","^L","^38","^?","^34","^36","^3S","^35"]]]]],"~:clj-info",["^ ","jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1611071507000,"jar:file:/home/mark/.m2/repository/day8/re-frame/re-frame-10x/0.6.2/re-frame-10x-0.6.2.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/core.clj",1611071514000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/day8/re-frame/re-frame-10x/0.6.2/re-frame-10x-0.6.2.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/ratom.clj",1611071514000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1611071506000,"jar:file:/home/mark/.m2/repository/day8/re-frame/re-frame-10x/0.6.2/re-frame-10x-0.6.2.jar!/day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/trace.cljc",1611071514000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1611071507000,"jar:file:/home/mark/.m2/repository/day8/re-frame/re-frame-10x/0.6.2/re-frame-10x-0.6.2.jar!/day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interop.clj",1611071514000,"jar:file:/home/mark/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1611071514000,"jar:file:/home/mark/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1611071514000,"jar:file:/home/mark/.m2/repository/day8/re-frame/re-frame-10x/0.6.2/re-frame-10x-0.6.2.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/debug.clj",1611071514000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1611071507000,"jar:file:/home/mark/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1611071514000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1611071507000,"jar:file:/home/mark/.m2/repository/binaryage/devtools/1.0.0/devtools-1.0.0.jar!/devtools/defaults.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1611071507000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1611071513000,"jar:file:/home/mark/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1611071513000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",1,"^8",5,"^9",1,"^:",66],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M","^N","^N","^O","^K","^P","^Q","^R","^R","^S","^S","^Q","^Q","^T","^T"],"^U",["^D",["^V"]],"~:shadow/js-access-global",["^D",["Error"]],"^W",["^ ","^X","^R","^Y","^M","^Z","^S","^[","^R","^10","^R","^11","^R","^12","^K","^13","^T","^14","^R","^15","^R","^16","^R","^17","^K","^18","^K"],"~:defs",["^ ","~$to-seq",["^ ","~:protocol-inline",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",181,"^8",7,"^9",181,"^:",13,"~:arglists",["^1;",["~$quote",["^1;",[["~$x"]]]]],"~:doc","Coerces x to a seq if it isn't one already"],"^E","^21","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",13,"~:method-params",["^1;",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1;",[null,null]],"^8",1,"~:variadic?",false,"^7",181,"~:ret-tag","~$clj","^9",181,"~:max-fixed-arity",1,"~:fn-var",true,"^5L",["^1;",["^5M",["^1;",[["~$x"]]]]],"^5N","Coerces x to a seq if it isn't one already"],"~$cache-and-return",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",42,"^8",7,"^9",42,"^:",23,"^5L",["^1;",["^5M",["^1;",[["~$query-v","~$dynv","~$r"]]]]],"^5N","cache the reaction r"],"^E","^23","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",23,"^5O",["^1;",[["^5X","^5Y","~$r"]]],"^5P",null,"^5Q",["^1;",[null,null]],"^8",1,"^5R",false,"^7",42,"^9",42,"^5U",3,"^5V",true,"^5L",["^1;",["^5M",["^1;",[["^5X","^5Y","~$r"]]]]],"^5N","cache the reaction r"],"~$deref-input-signals",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",188,"^8",8,"^9",188,"^:",27,"~:private",true,"^5L",["^1;",["^5M",["^1;",[["~$signals","~$query-id"]]]]]],"^5[",true,"^E","^2Q","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",27,"^5O",["^1;",[["^60","^61"]]],"^5P",null,"^5Q",["^1;",[null,null]],"^8",1,"^5R",false,"^7",188,"^5S",["^D",["^5T","~$cljs.core/IList","~$any","~$cljs.core/LazySeq"]],"^9",188,"^5U",2,"^5V",true,"^5L",["^1;",["^5M",["^1;",[["^60","^61"]]]]]],"~$subscribe",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",74,"^8",7,"^9",74,"^:",16,"^5L",["^1;",["^5M",["^1;",[["~$query"],["^66","^5Y"]]]]],"^5N","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  ","~:top-fn",["^ ","^5R",false,"~:fixed-arity",2,"^5U",2,"^5O",["^1;",[["^66"],["^66","^5Y"]]],"^5L",["^1;",[["^66"],["^66","^5Y"]]],"^5Q",["^1;",[null,null]]]],"^E","^2O","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",16,"^67",["^ ","^5R",false,"^68",2,"^5U",2,"^5O",["^1;",[["^66"],["^66","^5Y"]]],"^5L",["^1;",[["^66"],["^66","^5Y"]]],"^5Q",["^1;",[null,null]]],"^5O",["^1;",[["^66"],["^66","^5Y"]]],"^5P",null,"^68",2,"^5Q",["^1;",[null,null]],"^8",1,"^5R",false,"~:methods",[["^ ","^68",1,"^5R",false,"~:tag",["^D",[null,"^63"]]],["^ ","^68",2,"^5R",false,"^6:",["^D",[null,"^63"]]]],"^7",74,"^9",74,"^5U",2,"^5V",true,"^5L",["^1;",[["^66"],["^66","^5Y"]]],"^5N","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  "],"~$reg-sub",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",200,"^8",7,"^9",200,"^:",14,"^5L",["^1;",["^5M",["^1;",[["^61","~$&","~$args"]]]]],"^5N","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^67",["^ ","^5R",true,"^68",1,"^5U",1,"^5O",[["^1;",["^61","^6<"]]],"^5L",["^1;",[["^61","~$&","^6<"]]],"^5Q",["^1;",[null]]]],"^E","^26","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",14,"^67",["^ ","^5R",true,"^68",1,"^5U",1,"^5O",[["^1;",["^61","^6<"]]],"^5L",["^1;",[["^61","~$&","^6<"]]],"^5Q",["^1;",[null]]],"^5O",[["^1;",["^61","^6<"]]],"^5P",null,"^68",1,"^5Q",["^1;",[null]],"^8",1,"^5R",true,"^69",[["^ ","^68",1,"^5R",true,"^6:","^63"]],"^7",200,"^5S","^63","^9",200,"^5U",1,"^5V",true,"^5L",["^1;",[["^61","~$&","^6<"]]],"^5N","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$query->reaction",["^ ","^E","^1S","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",18,"^8",1,"^9",18,"^:",21,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",18,"^8",6,"^9",18,"^:",21],"^6:","~$cljs.core/Atom"],"~$clear-all-handlers!",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",36,"^8",7,"^9",36,"^:",26,"^5L",["^1;",["^5M",["^1;",[[]]]]],"^5N","Unregisters all existing subscription handlers"],"^E","^2A","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",26,"^5O",["^1;",[[]]],"^5P",null,"^5Q",["^1;",[null,null]],"^8",1,"^5R",false,"^7",36,"^5S",["^D",["^63","~$clj-nil"]],"^9",36,"^5U",0,"^5V",true,"^5L",["^1;",["^5M",["^1;",[[]]]]],"^5N","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",65,"^8",7,"^9",65,"^:",19,"^5L",["^1;",["^5M",["^1;",[["^5X"],["^5X","~$dyn-v"]]]]],"^67",["^ ","^5R",false,"^68",2,"^5U",2,"^5O",["^1;",[["^5X"],["^5X","^6B"]]],"^5L",["^1;",[["^5X"],["^5X","^6B"]]],"^5Q",["^1;",[null,null]]]],"^E","^2K","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",19,"^67",["^ ","^5R",false,"^68",2,"^5U",2,"^5O",["^1;",[["^5X"],["^5X","^6B"]]],"^5L",["^1;",[["^5X"],["^5X","^6B"]]],"^5Q",["^1;",[null,null]]],"^5O",["^1;",[["^5X"],["^5X","^6B"]]],"^5P",null,"^68",2,"^5Q",["^1;",[null,null]],"^8",1,"^5R",false,"^69",[["^ ","^68",1,"^5R",false,"^6:","^63"],["^ ","^68",2,"^5R",false,"^6:",["^D",["^63","^6@"]]]],"^7",65,"^9",65,"^5U",2,"^5V",true,"^5L",["^1;",[["^5X"],["^5X","^6B"]]]],"~$map-vals",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",163,"^8",8,"^9",163,"^:",16,"^5[",true,"^5L",["^1;",["^5M",["^1;",[["~$f","~$m"]]]]],"^5N","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^5[",true,"^E","^1T","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",16,"^5O",["^1;",[["~$f","~$m"]]],"^5P",null,"^5Q",["^1;",[null,null]],"^8",1,"^5R",false,"^7",163,"^5S",["^D",["^5T","^63"]],"^9",163,"^5U",2,"^5V",true,"^5L",["^1;",["^5M",["^1;",[["~$f","~$m"]]]]],"^5N","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^E","^1X","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",10,"^8",1,"^9",10,"^:",10,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",10,"^8",6,"^9",10,"^:",10],"^6:","~$cljs.core/Keyword"],"~$clear-subscription-cache!",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",20,"^8",7,"^9",20,"^:",32,"^5L",["^1;",["^5M",["^1;",[[]]]]],"^5N","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^E","^2I","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",32,"^5O",["^1;",[[]]],"^5P",null,"^5Q",["^1;",[null,null]],"^8",1,"^5R",false,"^7",20,"^5S",["^D",["^63","^6@"]],"^9",20,"^5U",0,"^5V",true,"^5L",["^1;",["^5M",["^1;",[[]]]]],"^5N","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"~$map-signals",["^ ","^5K",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",171,"^8",7,"^9",171,"^:",18,"^5L",["^1;",["^5M",["^1;",[["~$f","^60"]]]]],"^5N","Runs f over signals. Signals may take several\n  forms, this function handles all of them."],"^E","^1U","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",18,"^5O",["^1;",[["~$f","^60"]]],"^5P",null,"^5Q",["^1;",[null,null]],"^8",1,"^5R",false,"^7",171,"^5S",["^D",["^5T","^62","^63","^64"]],"^9",171,"^5U",2,"^5V",true,"^5L",["^1;",["^5M",["^1;",[["~$f","^60"]]]]],"^5N","Runs f over signals. Signals may take several\n  forms, this function handles all of them."]],"^19",["^ ","^Q","^Q","^P","^Q","^L","^L"],"~:cljs.analyzer/constants",["^ ","^U",["^D",["~:dyn-v","~:tags","~:sub/run","~:else","~:<-","~:sub","~:sub/create","~:warn","~:value","~:operation","~:start","~:duration","~:query-v","~:cached?","~:sub/dispose","~:error","~:input-signals","~:end","~:reaction","~:op-type"]],"~:order",["^6N","^6P","^6R","^70","^6J","^6W","^6U","^6[","^6S","^6T","^6Z","^6O","^6V","^6X","^6I","^6L","^6Y","^6M","^6K","^6Q"]],"^1@",["^ ","^V",["^D",[]]],"^1A",["^ "],"^1B",["^N","^L","^S","^R","^M","^T","^K","^Q"]],"^H","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^2V",[["^74","~:static-fns"],true,["^74","~:shadow-tweaks"],null,["^74","~:source-map-inline"],null,["^74","~:elide-asserts"],false,["^74","~:optimize-constants"],null,["^74","^1G"],null,["^74","~:external-config"],null,["^74","~:tooling-config"],null,["^74","~:emit-constants"],null,["^74","~:load-tests"],null,["^74","~:form-size-threshold"],null,["^74","~:infer-externs"],true,["^74","^1I"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^74","~:fn-invoke-direct"],null,["^74","~:source-map"],"/dev/null"]]]