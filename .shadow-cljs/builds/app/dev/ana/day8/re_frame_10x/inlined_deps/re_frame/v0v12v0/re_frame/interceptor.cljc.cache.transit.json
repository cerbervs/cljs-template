["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor');\ngoog.require('cljs.core');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace');\ngoog.require('clojure.set');\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.interceptor_QMARK_ = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\n/**\n * Create an interceptor from named arguments\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.__GT_interceptor = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___28606 = arguments.length;\nvar i__4731__auto___28607 = (0);\nwhile(true){\nif((i__4731__auto___28607 < len__4730__auto___28606)){\nargs__4736__auto__.push((arguments[i__4731__auto___28607]));\n\nvar G__28608 = (i__4731__auto___28607 + (1));\ni__4731__auto___28607 = G__28608;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__28556){\nvar map__28560 = p__28556;\nvar map__28560__$1 = (((((!((map__28560 == null))))?(((((map__28560.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28560.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28560):map__28560);\nvar m = map__28560__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28560__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28560__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28560__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5455__auto___28609 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5455__auto___28609){\nvar unknown_keys_28610 = temp__5455__auto___28609;\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_28610], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4131__auto__ = id;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq28549){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq28549));\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_effect = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$get_effect(var_args){\nvar G__28568 = arguments.length;\nswitch (G__28568) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3;\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.assoc_effect = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_effect = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$update_effect(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___28613 = arguments.length;\nvar i__4731__auto___28614 = (0);\nwhile(true){\nif((i__4731__auto___28614 < len__4730__auto___28613)){\nargs__4736__auto__.push((arguments[i__4731__auto___28614]));\n\nvar G__28615 = (i__4731__auto___28614 + (1));\ni__4731__auto___28614 = G__28615;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq28569){\nvar G__28570 = cljs.core.first(seq28569);\nvar seq28569__$1 = cljs.core.next(seq28569);\nvar G__28571 = cljs.core.first(seq28569__$1);\nvar seq28569__$2 = cljs.core.next(seq28569__$1);\nvar G__28572 = cljs.core.first(seq28569__$2);\nvar seq28569__$3 = cljs.core.next(seq28569__$2);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__28570,G__28571,G__28572,seq28569__$3);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_coeffect = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$get_coeffect(var_args){\nvar G__28580 = arguments.length;\nswitch (G__28580) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3;\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.assoc_coeffect = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_coeffect = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$update_coeffect(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___28622 = arguments.length;\nvar i__4731__auto___28623 = (0);\nwhile(true){\nif((i__4731__auto___28623 < len__4730__auto___28622)){\nargs__4736__auto__.push((arguments[i__4731__auto___28623]));\n\nvar G__28627 = (i__4731__auto___28623 + (1));\ni__4731__auto___28623 = G__28627;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq28581){\nvar G__28583 = cljs.core.first(seq28581);\nvar seq28581__$1 = cljs.core.next(seq28581);\nvar G__28584 = cljs.core.first(seq28581__$1);\nvar seq28581__$2 = cljs.core.next(seq28581__$1);\nvar G__28585 = cljs.core.first(seq28581__$2);\nvar seq28581__$3 = cljs.core.next(seq28581__$2);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__28583,G__28584,G__28585,seq28581__$3);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.invoke_interceptor_fn = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5455__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar f = temp__5455__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.invoke_interceptors = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__28632 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__28632;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n *   Returns the updated `context`.\n * \n *   In an advanced case, this function could allow an interceptor to add new\n *   interceptors to the `:queue` of a context.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.enqueue = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$context(var_args){\nvar G__28598 = arguments.length;\nswitch (G__28598) {\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.enqueue(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.assoc_coeffect(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context.cljs$lang$maxFixedArity = 3;\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.change_direction = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$change_direction(context){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of iterceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat anologous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.execute = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$interceptor$execute(event_v,interceptors){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__28468__auto___28639 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__28468__auto___28639;\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.invoke_interceptors(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.change_direction(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.invoke_interceptors(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",73],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers","^I","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop","^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace","^K","~$trace","^K","~$clojure.set","^M","~$set","^M","~$cljs.core","^O","~$goog","^P"],"~:seen",["^B",["~:require"]],"~:uses",["^ ","~$console","^I","~$empty-queue","^J","~$debug-enabled?","^J"],"~:require-macros",["^ ","^K","^K","^L","^K","^O","^O"],"~:form",["~#list",["~$ns","^D",["^Y",["^R",["^I","~:refer",["^T"]],["^J","^[",["^U","^V"]],["^K","~:as","^L","~:include-macros",true],["^M","^10","^N"]]]]],"~:flags",["^ ","^R",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^I","^J","^K","^M"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc"],"~:compiled-at",1587374058737,"~:resource-name","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers :refer [console]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop :refer [empty-queue debug-enabled?]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/mandatory-interceptor-keys","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/set","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/->interceptor","p__28556","map__28560","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq28549","self__4718__auto__","cljs.core/seq","id","before","after","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/debug-enabled?","temp__5455__auto__","unknown-keys","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","G__28568","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","not-found","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/update-effect","seq28569","G__28570","cljs.core/first","cljs.core/next","G__28571","G__28572","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/update-in","G__28580","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/get-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/assoc-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/update-coeffect","seq28581","G__28583","G__28584","G__28585","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/pop","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/enqueue","interceptors","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/into","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/empty-queue","G__28598","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/context","event","db","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/change-direction","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/execute","event-v","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/is-trace-enabled?","new-trace__28468__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/*current-trace*","cljs.core/merge"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1587365557000,499162500000,"~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"],["^16","goog/dom/tagname.js"],[1584607223013,"^P","~$goog.dom.HtmlElement"],["^16","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/ratom.cljs"],[1587370914501,"^P","^O","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.util","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.batching","^M","~$goog.object"],["~:macro","^O"],[1587365553000],["^1L","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core"],[1587370914000],["^16","goog/math/math.js"],[1584607223013,"^P","~$goog.array","~$goog.asserts"],["^16","goog/labs/useragent/browser.js"],[1584607223013,"^P","^1N","~$goog.labs.userAgent.util","^1K","~$goog.string"],["^16","goog/array/array.js"],[1584607223013,"^P","^1O"],["^1C","node_modules/prop-types/checkPropTypes.js"],[1587365557000,1549836454000,"^1D","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1L","~$net.cgrand.macrovich"],[1587353648000],["^16","goog/debug/error.js"],[1584607223013,"^P"],["^16","goog/dom/nodetype.js"],[1584607223013,"^P"],["^1C","node_modules/scheduler/cjs/scheduler.development.js"],[1587365557000,499162500000,"^1D"],["^1C","node_modules/scheduler/cjs/scheduler.production.min.js"],[1587365557000,499162500000,"^1D"],["^1C","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1587365557000,499162500000,"^1D"],["^1C","node_modules/react/index.js"],[1587365557000,499162500000,"^1D","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^16","shadow/js.js"],[1587365557008,"^P"],["^16","goog/object/object.js"],[1584607223013,"^P"],["^1C","node_modules/react-dom/cjs/react-dom.production.min.js"],[1587365557000,499162500000,"^1D","^=","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"],"~:SHADOW-TIMESTAMP",[1587365557000,1587365553000],["^1C","node_modules/react/cjs/react.development.js"],[1587365557000,499162500000,"^1D","^1V","~$module$node_modules$prop_types$checkPropTypes"],["^16","goog/math/long.js"],[1584607223013,"^P","^1O","~$goog.reflect"],["^16","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/util.cljs"],[1587370914501,"^P","^O","~$clojure.string"],["^16","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/core.cljs"],[1587370914501,"^P","^O","^=","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.template","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.component","^1H","^1J","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.ratom","^1I","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.dom"],["^1L","^22"],[1587370914000],["^1C","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1587365557000,499162500000,"^1D"],["^16","goog/functions/functions.js"],[1584607223013,"^P"],["^16","clojure/walk.cljs"],[1587365553008,"^P","^O"],["^16","goog/structs/map.js"],[1584607223013,"^P","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1K"],["^16","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/batching.cljs"],[1587370914501,"^P","^O","^1I","^1H"],["^1C","node_modules/scheduler/index.js"],[1587365557000,499162500000,"^1D","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"],["^16","goog/labs/useragent/engine.js"],[1584607223013,"^P","^1N","^1P","^1Q"],["^16","goog/asserts/asserts.js"],[1584607223013,"^P","~$goog.debug.Error","~$goog.dom.NodeType","^1Q"],["^16","goog/uri/uri.js"],[1584607223013,"^P","^1N","^1O","^1Q","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^16","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/dom.cljs"],[1587370914501,"^P","^O","^?","^1H","^20","^1J","^22"],["^16","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interop.cljs"],[1587370914501,"^P","^O","~$goog.async.nextTick","^1M","^22"],["^1L","^1I"],[1587370914000],["^1C","node_modules/object-assign/index.js"],[1587365557000,1484580833000,"^1D"],["^16","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/trace.cljc"],[1587370914501,"^P","^O","^J","^I","~$goog.functions"],["^16","goog/base.js"],[1584607223013],["^16","goog/structs/structs.js"],[1584607223013,"^P","^1N","^1K"],["^16","clojure/string.cljs"],[1587365553008,"^P","^O","^1Q","~$goog.string.StringBuffer"],["^1C","node_modules/react/cjs/react.production.min.js"],[1587365557000,499162500000,"^1D","^1V"],["^16","goog/debug/entrypointregistry.js"],[1584607223013,"^P","^1O"],["^16","goog/string/string.js"],[1584607223013,"^P"],["^16","goog/reflect/reflect.js"],[1584607223013,"^P"],["^16","goog/labs/useragent/util.js"],[1584607223013,"^P","^1Q"],["^16","goog/string/stringbuffer.js"],[1584607223013,"^P"],["^16","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/template.cljs"],[1587370914501,"^P","^O","^=","^1[","~$clojure.walk","^1H","^21","^1J","^22","^1I","^1K"],["^1L","^K"],[1587370914000],["^16","goog/iter/iter.js"],[1584607223013,"^P","^1N","^1O","^2@","~$goog.math"],["^16","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc"],[1587370914501,"^P","^O","^M"],["^16","goog/async/nexttick.js"],[1584607223013,"^P","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2@","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^16","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/debug.cljs"],[1587370914501,"^P","^O"],["^1C","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1587365557000,1549571078000,"^1D"],["^16","goog/dom/htmlelement.js"],[1584607223013,"^P"],["^16","cljs/core.cljs"],[1587365553008,"~$goog.math.Long","~$goog.math.Integer","^1Q","^1K","^1N","~$goog.Uri","^2A"],["^16","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc"],[1587370914501,"^P","^O","^I","^J","^K","^M"],["^16","goog/math/integer.js"],[1584607223013,"^P"],["^1C","node_modules/scheduler/tracing.js"],[1587365557000,499162500000,"^1D","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"],["^1C","node_modules/react-dom/cjs/react-dom.development.js"],[1587365557000,499162500000,"^1D","^=","^1V","^1W","^1Y","~$module$node_modules$scheduler$tracing"],["^16","clojure/set.cljs"],[1587365553008,"^P","^O"],["^16","goog/uri/utils.js"],[1584607223013,"^P","^1N","^1O","^1Q"],["^16","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/component.cljs"],[1587370914501,"^P","^O","^1K","^=","^1H","^1J","^22","^1I"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",73],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^J","^K","^K","^L","^K","^M","^M","^N","^M","^O","^O","^P","^P"],"^Q",["^B",["^R"]],"~:shadow/js-access-global",["^B",["Error"]],"^S",["^ ","^T","^I","^U","^J","^V","^J"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",43,"^8",7,"^9",43,"^:",20,"~:arglists",["^Y",["~$quote",["^Y",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^Y",["^2U","^2V","~$f","^2W"]]],"^2S",["^Y",[["^2U","^2V","~$f","~$&","^2W"]]],"~:arglists-meta",["^Y",[null]]]],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/update-effect","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",20,"^2X",["^ ","^2Y",true,"^2Z",3,"^2[",3,"^30",[["^Y",["^2U","^2V","~$f","^2W"]]],"^2S",["^Y",[["^2U","^2V","~$f","~$&","^2W"]]],"^31",["^Y",[null]]],"^30",[["^Y",["^2U","^2V","~$f","^2W"]]],"~:protocol-impl",null,"^2Z",3,"^31",["^Y",[null]],"^8",1,"^2Y",true,"~:methods",[["^ ","^2Z",3,"^2Y",true,"~:tag","~$any"]],"^7",43,"~:ret-tag","^36","^9",43,"^2[",3,"~:fn-var",true,"^2S",["^Y",[["^2U","^2V","~$f","~$&","^2W"]]]],"~$invoke-interceptors",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",75,"^8",8,"^9",75,"^:",27,"~:private",true,"^2S",["^Y",["^2T",["^Y",[["^2U","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^3:",true,"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/invoke-interceptors","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",27,"^30",["^Y",[["^2U","^3;"]]],"^33",null,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^7",75,"^9",75,"^2[",2,"^38",true,"^2S",["^Y",["^2T",["^Y",[["^2U","^3;"]]]]],"^3<","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",57,"^8",7,"^9",57,"^:",21,"^2S",["^Y",["^2T",["^Y",[["^2U","^2V","~$value"]]]]]],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/assoc-coeffect","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",21,"^30",["^Y",[["^2U","^2V","^3?"]]],"^33",null,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^7",57,"^37",["^B",["~$clj","^36"]],"^9",57,"^2[",3,"^38",true,"^2S",["^Y",["^2T",["^Y",[["^2U","^2V","^3?"]]]]]],"~$update-coeffect",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",61,"^8",7,"^9",61,"^:",22,"^2S",["^Y",["^2T",["^Y",[["^2U","^2V","~$f","~$&","^2W"]]]]],"^2X",["^ ","^2Y",true,"^2Z",3,"^2[",3,"^30",[["^Y",["^2U","^2V","~$f","^2W"]]],"^2S",["^Y",[["^2U","^2V","~$f","~$&","^2W"]]],"^31",["^Y",[null]]]],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/update-coeffect","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",22,"^2X",["^ ","^2Y",true,"^2Z",3,"^2[",3,"^30",[["^Y",["^2U","^2V","~$f","^2W"]]],"^2S",["^Y",[["^2U","^2V","~$f","~$&","^2W"]]],"^31",["^Y",[null]]],"^30",[["^Y",["^2U","^2V","~$f","^2W"]]],"^33",null,"^2Z",3,"^31",["^Y",[null]],"^8",1,"^2Y",true,"^34",[["^ ","^2Z",3,"^2Y",true,"^35","^36"]],"^7",61,"^37","^36","^9",61,"^2[",3,"^38",true,"^2S",["^Y",[["^2U","^2V","~$f","~$&","^2W"]]]],"~$invoke-interceptor-fn",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",68,"^8",8,"^9",68,"^:",29,"^3:",true,"^2S",["^Y",["^2T",["^Y",[["^2U","~$interceptor","^3;"]]]]]],"^3:",true,"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/invoke-interceptor-fn","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",29,"^30",["^Y",[["^2U","^3E","^3;"]]],"^33",null,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^7",68,"^37",["^B",[null,"^36"]],"^9",68,"^2[",3,"^38",true,"^2S",["^Y",["^2T",["^Y",[["^2U","^3E","^3;"]]]]]],"~$get-effect",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",31,"^8",7,"^9",31,"^:",17,"^2S",["^Y",["^2T",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","~$not-found"]]]]],"^2X",["^ ","^2Y",false,"^2Z",3,"^2[",3,"^30",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^2S",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^31",["^Y",[null,null,null]]]],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/get-effect","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",17,"^2X",["^ ","^2Y",false,"^2Z",3,"^2[",3,"^30",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^2S",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^31",["^Y",[null,null,null]]],"^30",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^33",null,"^2Z",3,"^31",["^Y",[null,null,null]],"^8",1,"^2Y",false,"^34",[["^ ","^2Z",1,"^2Y",false,"^35","^36"],["^ ","^2Z",2,"^2Y",false,"^35",["^B",[null,"^36"]]],["^ ","^2Z",3,"^2Y",false,"^35","^36"]],"^7",31,"^9",31,"^2[",3,"^38",true,"^2S",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]]],"~$->interceptor",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^2S",["^Y",["^2T",["^Y",[["~$&",["^ ","^10","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^3<","Create an interceptor from named arguments","^2X",["^ ","^2Y",true,"^2Z",0,"^2[",0,"^30",[["^Y",[["^ ","^10","~$m","^3K",["^3L","^3M","^3N"]]]]],"^2S",["^Y",[["~$&",["^ ","^10","~$m","^3K",["^3L","^3M","^3N"]]]]],"^31",["^Y",[null]]]],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/->interceptor","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",20,"^2X",["^ ","^2Y",true,"^2Z",0,"^2[",0,"^30",[["^Y",[["^ ","^10","~$m","^3K",["^3L","^3M","^3N"]]]]],"^2S",["^Y",[["~$&",["^ ","^10","~$m","^3K",["^3L","^3M","^3N"]]]]],"^31",["^Y",[null]]],"^30",[["^Y",[["^ ","^10","~$m","^3K",["^3L","^3M","^3N"]]]]],"^33",null,"^2Z",0,"^31",["^Y",[null]],"^8",1,"^2Y",true,"^34",[["^ ","^2Z",0,"^2Y",true,"^35","~$cljs.core/IMap"]],"^7",17,"^37","^36","^9",17,"^2[",0,"^38",true,"^2S",["^Y",[["~$&",["^ ","^10","~$m","^3K",["^3L","^3M","^3N"]]]]],"^3<","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",49,"^8",7,"^9",49,"^:",19,"^2S",["^Y",["^2T",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]]]],"^2X",["^ ","^2Y",false,"^2Z",3,"^2[",3,"^30",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^2S",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^31",["^Y",[null,null,null]]]],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/get-coeffect","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",19,"^2X",["^ ","^2Y",false,"^2Z",3,"^2[",3,"^30",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^2S",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^31",["^Y",[null,null,null]]],"^30",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]],"^33",null,"^2Z",3,"^31",["^Y",[null,null,null]],"^8",1,"^2Y",false,"^34",[["^ ","^2Z",1,"^2Y",false,"^35","^36"],["^ ","^2Z",2,"^2Y",false,"^35",["^B",[null,"^36"]]],["^ ","^2Z",3,"^2Y",false,"^35","^36"]],"^7",49,"^9",49,"^2[",3,"^38",true,"^2S",["^Y",[["^2U"],["^2U","^2V"],["^2U","^2V","^3H"]]]],"~$execute",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",149,"^8",7,"^9",149,"^:",14,"^2S",["^Y",["^2T",["^Y",[["~$event-v","~$interceptors"]]]]],"^3<","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/execute","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",14,"^30",["^Y",[["^3T","^3U"]]],"^33",null,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^7",149,"^37","^36","^9",149,"^2[",2,"^38",true,"^2S",["^Y",["^2T",["^Y",[["^3T","^3U"]]]]],"^3<","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",39,"^8",7,"^9",39,"^:",19,"^2S",["^Y",["^2T",["^Y",[["^2U","^2V","^3?"]]]]]],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/assoc-effect","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",19,"^30",["^Y",[["^2U","^2V","^3?"]]],"^33",null,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^7",39,"^37",["^B",["^3A","^36"]],"^9",39,"^2[",3,"^38",true,"^2S",["^Y",["^2T",["^Y",[["^2U","^2V","^3?"]]]]]],"~$enqueue",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",112,"^8",7,"^9",112,"^:",14,"^2S",["^Y",["^2T",["^Y",[["^2U","^3U"]]]]],"^3<","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/enqueue","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",14,"^30",["^Y",[["^2U","^3U"]]],"^33",null,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^7",112,"^37",["^B",["^3A","^36"]],"^9",112,"^2[",2,"^38",true,"^2S",["^Y",["^2T",["^Y",[["^2U","^3U"]]]]],"^3<","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/mandatory-interceptor-keys","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^35","~$cljs.core/ISet"],"~$interceptor?",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^2S",["^Y",["^2T",["^Y",[["~$m"]]]]]],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/interceptor?","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",19,"^30",["^Y",[["~$m"]]],"^33",null,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^7",11,"^37","~$boolean","^9",11,"^2[",1,"^38",true,"^2S",["^Y",["^2T",["^Y",[["~$m"]]]]]],"~$change-direction",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",135,"^8",8,"^9",135,"^:",24,"^3:",true,"^2S",["^Y",["^2T",["^Y",[["^2U"]]]]],"^3<","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^3:",true,"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/change-direction","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",24,"^30",["^Y",[["^2U"]]],"^33",null,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^7",135,"^37",["^B",["^3A","^36"]],"^9",135,"^2[",1,"^38",true,"^2S",["^Y",["^2T",["^Y",[["^2U"]]]]],"^3<","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^2U",["^ ","^2R",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^7",124,"^8",8,"^9",124,"^:",15,"^3:",true,"^2S",["^Y",["^2T",["^Y",[["~$event","^3U"],["^47","^3U","~$db"]]]]],"^3<","Create a fresh context","^2X",["^ ","^2Y",false,"^2Z",3,"^2[",3,"^30",["^Y",[["^47","^3U"],["^47","^3U","^48"]]],"^2S",["^Y",[["^47","^3U"],["^47","^3U","^48"]]],"^31",["^Y",[null,null]]]],"^3:",true,"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/context","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc","^:",15,"^2X",["^ ","^2Y",false,"^2Z",3,"^2[",3,"^30",["^Y",[["^47","^3U"],["^47","^3U","^48"]]],"^2S",["^Y",[["^47","^3U"],["^47","^3U","^48"]]],"^31",["^Y",[null,null]]],"^30",["^Y",[["^47","^3U"],["^47","^3U","^48"]]],"^33",null,"^2Z",3,"^31",["^Y",[null,null]],"^8",1,"^2Y",false,"^34",[["^ ","^2Z",2,"^2Y",false,"^35",["^B",["^3A","^36"]]],["^ ","^2Z",3,"^2Y",false,"^35",["^B",["^3A","^36"]]]],"^7",124,"^9",124,"^2[",3,"^38",true,"^2S",["^Y",[["^47","^3U"],["^47","^3U","^48"]]],"^3<","Create a fresh context"]],"^W",["^ ","^K","^K","^L","^K","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^B",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^4@","^4A","^4G","^4D","^4;","^4B","^4E","^4>","^4C","^4?","^4=","^4<","^4F"]],"^12",["^ ","^R",["^B",[]]],"^13",["^ "],"^14",["^P","^O","^I","^J","^K","^M"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1B",[["^4K","~:static-fns"],true,["^4K","~:elide-asserts"],false,["^4K","~:optimize-constants"],null,["^4K","^19"],null,["^4K","~:external-config"],null,["^4K","~:tooling-config"],null,["^4K","~:emit-constants"],null,["^4K","~:load-tests"],null,["^4K","~:infer-externs"],true,["^4K","^1;"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4K","~:fn-invoke-direct"],null,["^4K","~:source-map"],"/dev/null"]]]