["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx');\ngoog.require('cljs.core');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.router');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.events');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace');\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.kind = new cljs.core.Keyword(null,\"fx\",\"fx\",-1237829572);\nif(cljs.core.truth_((day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.kind) : day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.kind)))){\n} else {\nthrow (new Error(\"Assert failed: (registrar/kinds kind)\"));\n}\n/**\n * Register the given effect `handler` for the given `id`.\n * \n *   `id` is keyword, often namespaced.\n *   `handler` is a side-effecting function which takes a single argument and whose return\n *   value is ignored.\n * \n *   Example Use\n *   -----------\n * \n *   First, registration ... associate `:effect2` with a handler.\n * \n *   (reg-fx\n *   :effect2\n *   (fn [value]\n *      ... do something side-effect-y))\n * \n *   Then, later, if an event handler were to return this effects map ...\n * \n *   {...\n * :effect2  [1 2]}\n * \n * ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n * called with an argument of `[1 2]`.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.reg_fx = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$fx$reg_fx(id,handler){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.register_handler(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.kind,id,handler);\n});\n/**\n * An interceptor whose `:after` actions the contents of `:effects`. As a result,\n *   this interceptor is Domino 3.\n * \n *   This interceptor is silently added (by reg-event-db etc) to the front of\n *   interceptor chains for all events.\n * \n *   For each key in `:effects` (a map), it calls the registered `effects handler`\n *   (see `reg-fx` for registration of effect handlers).\n * \n *   So, if `:effects` was:\n *    {:dispatch  [:hello 42]\n *     :db        {...}\n *     :undo      \"set flag\"}\n * \n *   it will call the registered effect handlers for each of the map's keys:\n *   `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n *   value for that key - so in the example above the effect handler for :dispatch\n *   will be given one arg `[:hello 42]`.\n * \n *   You cannot rely on the ordering in which effects are executed.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.do_fx = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"do-fx\",\"do-fx\",1194163050),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$fx$do_fx_after(context){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__28782 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__28783 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"do-fx\",\"event/do-fx\",1357330452)], null));\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__28783;\n\ntry{try{var seq__28784 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\nvar chunk__28785 = null;\nvar count__28786 = (0);\nvar i__28787 = (0);\nwhile(true){\nif((i__28787 < count__28786)){\nvar vec__28796 = chunk__28785.cljs$core$IIndexed$_nth$arity$2(null,i__28787);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28796,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28796,(1),null);\nvar temp__5455__auto___28863 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5455__auto___28863)){\nvar effect_fn_28864 = temp__5455__auto___28863;\n(effect_fn_28864.cljs$core$IFn$_invoke$arity$1 ? effect_fn_28864.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_28864.call(null,effect_value));\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__28866 = seq__28784;\nvar G__28867 = chunk__28785;\nvar G__28868 = count__28786;\nvar G__28869 = (i__28787 + (1));\nseq__28784 = G__28866;\nchunk__28785 = G__28867;\ncount__28786 = G__28868;\ni__28787 = G__28869;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__28784);\nif(temp__5457__auto__){\nvar seq__28784__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__28784__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__28784__$1);\nvar G__28872 = cljs.core.chunk_rest(seq__28784__$1);\nvar G__28873 = c__4550__auto__;\nvar G__28874 = cljs.core.count(c__4550__auto__);\nvar G__28875 = (0);\nseq__28784 = G__28872;\nchunk__28785 = G__28873;\ncount__28786 = G__28874;\ni__28787 = G__28875;\ncontinue;\n} else {\nvar vec__28799 = cljs.core.first(seq__28784__$1);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28799,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28799,(1),null);\nvar temp__5455__auto___28881 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5455__auto___28881)){\nvar effect_fn_28882 = temp__5455__auto___28881;\n(effect_fn_28882.cljs$core$IFn$_invoke$arity$1 ? effect_fn_28882.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_28882.call(null,effect_value));\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__28883 = cljs.core.next(seq__28784__$1);\nvar G__28884 = null;\nvar G__28885 = (0);\nvar G__28886 = (0);\nseq__28784 = G__28883;\nchunk__28785 = G__28884;\ncount__28786 = G__28885;\ni__28787 = G__28886;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__28466__auto___28891 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__28467__auto___28892 = (end__28466__auto___28891 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__28467__auto___28892,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__28466__auto___28891);\n} else {\n}\n}}finally {day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__28782;\n}} else {\nvar seq__28802 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\nvar chunk__28803 = null;\nvar count__28804 = (0);\nvar i__28805 = (0);\nwhile(true){\nif((i__28805 < count__28804)){\nvar vec__28815 = chunk__28803.cljs$core$IIndexed$_nth$arity$2(null,i__28805);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28815,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28815,(1),null);\nvar temp__5455__auto___28901 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5455__auto___28901)){\nvar effect_fn_28902 = temp__5455__auto___28901;\n(effect_fn_28902.cljs$core$IFn$_invoke$arity$1 ? effect_fn_28902.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_28902.call(null,effect_value));\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__28903 = seq__28802;\nvar G__28904 = chunk__28803;\nvar G__28905 = count__28804;\nvar G__28906 = (i__28805 + (1));\nseq__28802 = G__28903;\nchunk__28803 = G__28904;\ncount__28804 = G__28905;\ni__28805 = G__28906;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__28802);\nif(temp__5457__auto__){\nvar seq__28802__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__28802__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__28802__$1);\nvar G__28911 = cljs.core.chunk_rest(seq__28802__$1);\nvar G__28912 = c__4550__auto__;\nvar G__28913 = cljs.core.count(c__4550__auto__);\nvar G__28914 = (0);\nseq__28802 = G__28911;\nchunk__28803 = G__28912;\ncount__28804 = G__28913;\ni__28805 = G__28914;\ncontinue;\n} else {\nvar vec__28818 = cljs.core.first(seq__28802__$1);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28818,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28818,(1),null);\nvar temp__5455__auto___28915 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5455__auto___28915)){\nvar effect_fn_28916 = temp__5455__auto___28915;\n(effect_fn_28916.cljs$core$IFn$_invoke$arity$1 ? effect_fn_28916.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_28916.call(null,effect_value));\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__28917 = cljs.core.next(seq__28802__$1);\nvar G__28918 = null;\nvar G__28919 = (0);\nvar G__28920 = (0);\nseq__28802 = G__28917;\nchunk__28803 = G__28918;\ncount__28804 = G__28919;\ni__28805 = G__28920;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n})], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-later\",\"dispatch-later\",291951390),(function (value){\nvar seq__28822 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\nvar chunk__28823 = null;\nvar count__28824 = (0);\nvar i__28825 = (0);\nwhile(true){\nif((i__28825 < count__28824)){\nvar map__28830 = chunk__28823.cljs$core$IIndexed$_nth$arity$2(null,i__28825);\nvar map__28830__$1 = (((((!((map__28830 == null))))?(((((map__28830.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28830.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28830):map__28830);\nvar effect = map__28830__$1;\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28830__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28830__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.set_timeout_BANG_(((function (seq__28822,chunk__28823,count__28824,i__28825,map__28830,map__28830__$1,effect,ms,dispatch){\nreturn (function (){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.router.dispatch(dispatch);\n});})(seq__28822,chunk__28823,count__28824,i__28825,map__28830,map__28830__$1,effect,ms,dispatch))\n,ms);\n}\n\n\nvar G__28924 = seq__28822;\nvar G__28925 = chunk__28823;\nvar G__28926 = count__28824;\nvar G__28927 = (i__28825 + (1));\nseq__28822 = G__28924;\nchunk__28823 = G__28925;\ncount__28824 = G__28926;\ni__28825 = G__28927;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__28822);\nif(temp__5457__auto__){\nvar seq__28822__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__28822__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__28822__$1);\nvar G__28929 = cljs.core.chunk_rest(seq__28822__$1);\nvar G__28930 = c__4550__auto__;\nvar G__28931 = cljs.core.count(c__4550__auto__);\nvar G__28932 = (0);\nseq__28822 = G__28929;\nchunk__28823 = G__28930;\ncount__28824 = G__28931;\ni__28825 = G__28932;\ncontinue;\n} else {\nvar map__28832 = cljs.core.first(seq__28822__$1);\nvar map__28832__$1 = (((((!((map__28832 == null))))?(((((map__28832.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28832.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28832):map__28832);\nvar effect = map__28832__$1;\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28832__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28832__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.set_timeout_BANG_(((function (seq__28822,chunk__28823,count__28824,i__28825,map__28832,map__28832__$1,effect,ms,dispatch,seq__28822__$1,temp__5457__auto__){\nreturn (function (){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.router.dispatch(dispatch);\n});})(seq__28822,chunk__28823,count__28824,i__28825,map__28832,map__28832__$1,effect,ms,dispatch,seq__28822__$1,temp__5457__auto__))\n,ms);\n}\n\n\nvar G__28935 = cljs.core.next(seq__28822__$1);\nvar G__28936 = null;\nvar G__28937 = (0);\nvar G__28938 = (0);\nseq__28822 = G__28935;\nchunk__28823 = G__28936;\ncount__28824 = G__28937;\ni__28825 = G__28938;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),(function (value){\nif((!(cljs.core.vector_QMARK_(value)))){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\",value], 0));\n} else {\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.router.dispatch(value);\n}\n}));\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-n\",\"dispatch-n\",-504469236),(function (value){\nif((!(cljs.core.sequential_QMARK_(value)))){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\",value], 0));\n} else {\nvar seq__28835 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\nvar chunk__28836 = null;\nvar count__28837 = (0);\nvar i__28838 = (0);\nwhile(true){\nif((i__28838 < count__28837)){\nvar event = chunk__28836.cljs$core$IIndexed$_nth$arity$2(null,i__28838);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.router.dispatch(event);\n\n\nvar G__28939 = seq__28835;\nvar G__28940 = chunk__28836;\nvar G__28941 = count__28837;\nvar G__28942 = (i__28838 + (1));\nseq__28835 = G__28939;\nchunk__28836 = G__28940;\ncount__28837 = G__28941;\ni__28838 = G__28942;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__28835);\nif(temp__5457__auto__){\nvar seq__28835__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__28835__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__28835__$1);\nvar G__28943 = cljs.core.chunk_rest(seq__28835__$1);\nvar G__28944 = c__4550__auto__;\nvar G__28945 = cljs.core.count(c__4550__auto__);\nvar G__28946 = (0);\nseq__28835 = G__28943;\nchunk__28836 = G__28944;\ncount__28837 = G__28945;\ni__28838 = G__28946;\ncontinue;\n} else {\nvar event = cljs.core.first(seq__28835__$1);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.router.dispatch(event);\n\n\nvar G__28947 = cljs.core.next(seq__28835__$1);\nvar G__28948 = null;\nvar G__28949 = (0);\nvar G__28950 = (0);\nseq__28835 = G__28947;\nchunk__28836 = G__28948;\ncount__28837 = G__28949;\ni__28838 = G__28950;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n}));\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.reg_fx(new cljs.core.Keyword(null,\"deregister-event-handler\",\"deregister-event-handler\",-1096518994),(function (value){\nvar clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.clear_handlers,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.events.kind);\nif(cljs.core.sequential_QMARK_(value)){\nvar seq__28842 = cljs.core.seq(value);\nvar chunk__28843 = null;\nvar count__28844 = (0);\nvar i__28845 = (0);\nwhile(true){\nif((i__28845 < count__28844)){\nvar event = chunk__28843.cljs$core$IIndexed$_nth$arity$2(null,i__28845);\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\n\n\nvar G__28953 = seq__28842;\nvar G__28956 = chunk__28843;\nvar G__28957 = count__28844;\nvar G__28958 = (i__28845 + (1));\nseq__28842 = G__28953;\nchunk__28843 = G__28956;\ncount__28844 = G__28957;\ni__28845 = G__28958;\ncontinue;\n} else {\nvar temp__5457__auto__ = cljs.core.seq(seq__28842);\nif(temp__5457__auto__){\nvar seq__28842__$1 = temp__5457__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__28842__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__28842__$1);\nvar G__28959 = cljs.core.chunk_rest(seq__28842__$1);\nvar G__28960 = c__4550__auto__;\nvar G__28961 = cljs.core.count(c__4550__auto__);\nvar G__28962 = (0);\nseq__28842 = G__28959;\nchunk__28843 = G__28960;\ncount__28844 = G__28961;\ni__28845 = G__28962;\ncontinue;\n} else {\nvar event = cljs.core.first(seq__28842__$1);\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\n\n\nvar G__28967 = cljs.core.next(seq__28842__$1);\nvar G__28968 = null;\nvar G__28969 = (0);\nvar G__28970 = (0);\nseq__28842 = G__28967;\nchunk__28843 = G__28968;\ncount__28844 = G__28969;\ni__28845 = G__28970;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn (clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(value) : clear_event.call(null,value));\n}\n}));\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.fx.reg_fx(new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (value){\nif((!((cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db) === value)))){\nreturn cljs.core.reset_BANG_(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,value);\n} else {\nreturn null;\n}\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",64],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.router","^I","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar","^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor","^K","~$cljs.core","^L","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers","^M","~$goog","^N","~$router","^I","~$registrar","^J","~$trace","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop","^S","~$events","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.events","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db","^V","^R","^R","^U","^U"],"~:seen",["^B",["~:require"]],"~:uses",["^ ","~$app-db","^V","~$->interceptor","^K","~$set-timeout!","^S","~$get-handler","^J","~$clear-handlers","^J","~$register-handler","^J","~$console","^M"],"~:require-macros",["^ ","^R","^R","^Q","^R","^L","^L"],"~:form",["~#list",["~$ns","^D",["^17",["^X",["^I","~:as","^O"],["^V","~:refer",["^Z"]],["^K","^1:",["^["]],["^S","^1:",["^10"]],["^U","^19","^T"],["^J","^19","^P","^1:",["^11","^12","^13"]],["^M","^1:",["^14"]],["^R","^19","^Q","~:include-macros",true]]]]],"~:flags",["^ ","^X",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^N","^L","^I","^V","^K","^S","^U","^J","^M","^R"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc"],"~:compiled-at",1587374058863,"~:resource-name","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","~:warnings",[],"~:source","(ns day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.router      :as router]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db          :refer [app-db]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor :refer [->interceptor]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop     :refer [set-timeout!]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.events      :as events]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar   :as registrar :refer [get-handler clear-handlers register-handler]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers     :refer [console]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} (remove nil? value)]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/reg-fx","id","handler","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/register-handler","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/do-fx","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__28782","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/*current-trace*","*current-trace*-temp-val__28783","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/start-trace","end__28466__auto__","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/now","duration__28467__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/run-tracing-callbacks!","seq__28784","cljs.core/seq","chunk__28785","count__28786","i__28787","vec__28796","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__28799","cljs.core/first","cljs.core/next","seq__28802","chunk__28803","count__28804","i__28805","vec__28815","vec__28818","effect-key","effect-value","temp__5455__auto__","effect-fn","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","value","seq__28822","chunk__28823","count__28824","i__28825","map__28830","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__28832","ms","dispatch","effect","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/empty?","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/set-timeout!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","seq__28835","chunk__28836","count__28837","i__28838","event","clear-event","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/clear-handlers","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.events/kind","seq__28842","chunk__28843","count__28844","i__28845","cljs.core/deref","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db/app-db","cljs.core/reset!"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1587365557000,499162500000,"~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"],["^1@","goog/dom/tagname.js"],[1584607223013,"^N","~$goog.dom.HtmlElement"],["^1@","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/ratom.cljs"],[1587370914501,"^N","^L","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.util","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.batching","~$clojure.set","~$goog.object"],["~:macro","^L"],[1587365553000],["^1W","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core"],[1587370914000],["^1@","goog/math/math.js"],[1584607223013,"^N","~$goog.array","~$goog.asserts"],["^1@","goog/labs/useragent/browser.js"],[1584607223013,"^N","^1Y","~$goog.labs.userAgent.util","^1V","~$goog.string"],["^1@","goog/array/array.js"],[1584607223013,"^N","^1Z"],["^1M","node_modules/prop-types/checkPropTypes.js"],[1587365557000,1549836454000,"^1N","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1W","~$net.cgrand.macrovich"],[1587353648000],["^1@","goog/debug/error.js"],[1584607223013,"^N"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/events.cljc"],[1587370914501,"^N","^L","^V","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.utils","^S","^J","^M","^K","^R"],["^1@","goog/dom/nodetype.js"],[1584607223013,"^N"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc"],[1587370914501,"^N","^L","^I","^V","^K","^S","^U","^J","^M","^R"],["^1M","node_modules/scheduler/cjs/scheduler.development.js"],[1587365557000,499162500000,"^1N"],["^1M","node_modules/scheduler/cjs/scheduler.production.min.js"],[1587365557000,499162500000,"^1N"],["^1M","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1587365557000,499162500000,"^1N"],["^1M","node_modules/react/index.js"],[1587365557000,499162500000,"^1N","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1@","shadow/js.js"],[1587365557008,"^N"],["^1@","goog/object/object.js"],[1584607223013,"^N"],["^1M","node_modules/react-dom/cjs/react-dom.production.min.js"],[1587365557000,499162500000,"^1N","^=","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"],"~:SHADOW-TIMESTAMP",[1587365557000,1587365553000],["^1M","node_modules/react/cjs/react.development.js"],[1587365557000,499162500000,"^1N","^26","~$module$node_modules$prop_types$checkPropTypes"],["^1@","goog/math/long.js"],[1584607223013,"^N","^1Z","~$goog.reflect"],["^1@","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/util.cljs"],[1587370914501,"^N","^L","~$clojure.string"],["^1@","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/core.cljs"],[1587370914501,"^N","^L","^=","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.template","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.component","^1R","^1T","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.ratom","^1S","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.dom"],["^1W","^2>"],[1587370914000],["^1M","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1587365557000,499162500000,"^1N"],["^1@","goog/functions/functions.js"],[1584607223013,"^N"],["^1@","clojure/walk.cljs"],[1587365553008,"^N","^L"],["^1@","goog/structs/map.js"],[1584607223013,"^N","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1V"],["^1@","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/batching.cljs"],[1587370914501,"^N","^L","^1S","^1R"],["^1M","node_modules/scheduler/index.js"],[1587365557000,499162500000,"^1N","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"],["^1@","goog/labs/useragent/engine.js"],[1584607223013,"^N","^1Y","^1[","^20"],["^1@","goog/asserts/asserts.js"],[1584607223013,"^N","~$goog.debug.Error","~$goog.dom.NodeType","^20"],["^1@","goog/uri/uri.js"],[1584607223013,"^N","^1Y","^1Z","^20","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1@","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/dom.cljs"],[1587370914501,"^N","^L","^?","^1R","^2<","^1T","^2>"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interop.cljs"],[1587370914501,"^N","^L","~$goog.async.nextTick","^1X","^2>"],["^1W","^1S"],[1587370914000],["^1M","node_modules/object-assign/index.js"],[1587365557000,1484580833000,"^1N"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/trace.cljc"],[1587370914501,"^N","^L","^S","^M","~$goog.functions"],["^1@","goog/base.js"],[1584607223013],["^1@","goog/structs/structs.js"],[1584607223013,"^N","^1Y","^1V"],["^1@","clojure/string.cljs"],[1587365553008,"^N","^L","^20","~$goog.string.StringBuffer"],["^1M","node_modules/react/cjs/react.production.min.js"],[1587365557000,499162500000,"^1N","^26"],["^1@","goog/debug/entrypointregistry.js"],[1584607223013,"^N","^1Z"],["^1@","goog/string/string.js"],[1584607223013,"^N"],["^1@","goog/reflect/reflect.js"],[1584607223013,"^N"],["^1@","goog/labs/useragent/util.js"],[1584607223013,"^N","^20"],["^1@","goog/string/stringbuffer.js"],[1584607223013,"^N"],["^1@","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/template.cljs"],[1587370914501,"^N","^L","^=","^2;","~$clojure.walk","^1R","^2=","^1T","^2>","^1S","^1V"],["^1W","^R"],[1587370914000],["^1@","goog/iter/iter.js"],[1584607223013,"^N","^1Y","^1Z","^2L","~$goog.math"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/db.cljc"],[1587370914501,"^N","^L","^S"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc"],[1587370914501,"^N","^L","^1U"],["^1@","goog/async/nexttick.js"],[1584607223013,"^N","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2L","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^1@","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/debug.cljs"],[1587370914501,"^N","^L"],["^1M","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1587365557000,1549571078000,"^1N"],["^1@","goog/dom/htmlelement.js"],[1584607223013,"^N"],["^1@","cljs/core.cljs"],[1587365553008,"~$goog.math.Long","~$goog.math.Integer","^20","^1V","^1Y","~$goog.Uri","^2M"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interceptor.cljc"],[1587370914501,"^N","^L","^M","^S","^R","^1U"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/utils.cljc"],[1587370914501,"^N","^L","^M"],["^1@","goog/math/integer.js"],[1584607223013,"^N"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/router.cljc"],[1587370914501,"^N","^L","^U","^S","^M","^R"],["^1M","node_modules/scheduler/tracing.js"],[1587365557000,499162500000,"^1N","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"],["^1M","node_modules/react-dom/cjs/react-dom.development.js"],[1587365557000,499162500000,"^1N","^=","^26","^27","^29","~$module$node_modules$scheduler$tracing"],["^1@","clojure/set.cljs"],[1587365553008,"^N","^L"],["^1@","goog/uri/utils.js"],[1584607223013,"^N","^1Y","^1Z","^20"],["^1@","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/registrar.cljc"],[1587370914501,"^N","^L","^S","^M"],["^1@","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/component.cljs"],[1587370914501,"^N","^L","^1V","^=","^1R","^1T","^2>","^1S"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","^7",1,"^8",5,"^9",1,"^:",64],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^J","^K","^K","^L","^L","^M","^M","^N","^N","^O","^I","^P","^J","^Q","^R","^S","^S","^T","^U","^V","^V","^R","^R","^U","^U"],"^W",["^B",["^X"]],"~:shadow/js-access-global",["^B",["Error"]],"^Y",["^ ","^Z","^V","^[","^K","^10","^S","^11","^J","^12","^J","^13","^J","^14","^M"],"~:defs",["^ ","~$kind",["^ ","^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/kind","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","^7",15,"^8",1,"^9",15,"^:",10,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","^7",15,"^8",6,"^9",15,"^:",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","^7",18,"^8",7,"^9",18,"^:",13,"~:arglists",["^17",["~$quote",["^17",[["~$id","~$handler"]]]]],"~:doc","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/reg-fx","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","^:",13,"~:method-params",["^17",[["^39","^3:"]]],"~:protocol-impl",null,"~:arglists-meta",["^17",[null,null]],"^8",1,"~:variadic?",false,"^7",18,"~:ret-tag","~$any","^9",18,"~:max-fixed-arity",2,"~:fn-var",true,"^37",["^17",["^38",["^17",[["^39","^3:"]]]]],"^3;","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$do-fx",["^ ","^C","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/do-fx","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","^7",47,"^8",1,"^9",47,"^:",11,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/fx.cljc","^7",47,"^8",6,"^9",47,"^:",11],"^3;","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.","^33","~$cljs.core/IMap"]],"^15",["^ ","^R","^R","^Q","^R","^L","^L"],"~:cljs.analyzer/constants",["^ ","^W",["^B",["~:db","~:do-fx","~:start","~:dispatch-n","~:duration","~:deregister-event-handler","~:dispatch","~:after","~:event/do-fx","~:id","~:effects","~:error","~:end","~:ms","~:fx","~:op-type","~:dispatch-later"]],"~:order",["^3W","^3R","^3J","^3P","^3X","^3Q","^3K","^3M","^3U","^3S","^3T","^3Y","^3V","^3O","^3L","^3N","^3I"]],"^1<",["^ ","^X",["^B",[]]],"^1=",["^ "],"^1>",["^N","^L","^I","^V","^K","^S","^U","^J","^M","^R"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1L",[["^41","~:static-fns"],true,["^41","~:elide-asserts"],false,["^41","~:optimize-constants"],null,["^41","^1C"],null,["^41","~:external-config"],null,["^41","~:tooling-config"],null,["^41","~:emit-constants"],null,["^41","~:load-tests"],null,["^41","~:infer-externs"],true,["^41","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^41","~:fn-invoke-direct"],null,["^41","~:source-map"],"/dev/null"]]]